import os.path
from plearn.pyplearn import *

plarg_defaults.data    = "data.amat"

expdir = "constant_regressor_data=%s" % plargs.data
dataset = pl.AutoVMatrix(
    specification = plargs.data,
    inputsize = 0,
    targetsize = 1,
    weightsize = 0
    )

learner = pl.ConstantRegressor()

splitter = pl.FractionSplitter(
    splits = TMat(1,2, [ (0,1), (0,1) ])
    )

statnames = [
    'E[train.E[mse]]',
    'E[test.E[mse]]',             'E[test.V[mse]]',
    'E[test.STDDEV[mse]]',        'E[test.STDERROR[mse]]',
    'E[test.MIN[mse]]',           'E[test.MAX[mse]]',
    'E[test.RANGE[mse]]',
    'E[test.SUM[mse]]',           'E[test.SUMSQ[mse]]',
    'E[test.FIRST[mse]]',         'E[test.LAST[mse]]',
    'E[test.N[mse]]',             'E[test.NMISSING[mse]]',
    'E[test.NNONMISSING[mse]]',   'E[test.SHARPERATIO[mse]]',
    'E[test.ZSTAT[mse]]',         'E[test.PZ1t[mse]]',
    'E[test.PZ2t[mse]]',
    'E[test.PSEUDOQ(0.001)[mse]]','E[test.PSEUDOQ(0.01)[mse]]',
    'E[test.PSEUDOQ(0.05)[mse]]', 'E[test.PSEUDOQ(0.25)[mse]]',
    'E[test.PSEUDOQ(0.5)[mse]]',
    'E[test.PSEUDOQ(0.75)[mse]]', 'E[test.PSEUDOQ(0.95)[mse]]',
    'E[test.PSEUDOQ(0.99)[mse]]', 'E[test.PSEUDOQ(0.999)[mse]]',
    'E[test.IQR[mse]]',           'E[test.PRR[mse]]'
    ]

tester = pl.PTester(
    expdir                   = expdir,
    dataset                  = dataset,
    splitter                 = splitter,
    learner                  = learner,
    statnames                = statnames,
    provide_learner_expdir   = 1,
    save_test_costs          = 1,
    save_test_outputs        = 1,
    save_test_confidence     = 1,
    template_stats_collector = pl.VecStatsCollector(maxnvalues=50)
    )

def main():
    return tester
