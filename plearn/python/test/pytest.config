"""Pytest config file.

Test is a class regrouping the elements that define a test for PyTest.
    
    For each Test instance you declare in a config file, a test will be ran
    by PyTest.
    
      @ivar(name):
    The name of the Test must uniquely determine the
    test. Among others, it will be used to identify the test's results
    (.PyTest/name/*_results/) and to report test informations.
      @type(name):
    String
    
      @ivar(description):
    The description must provide other users an
    insight of what exactly is the Test testing. You are encouraged
    to used triple quoted strings for indented multi-lines
    descriptions.
      @type(description):
    String
    
      @ivar(category):
    The category to which this test belongs. By default, a
    test is considered a 'General' test.
    
    It is not desirable to let an extensive and lengthy test as 'General',
    while one shall refrain abusive use of categories since it is likely
    that only 'General' tests will be ran before most commits...
    
      @type(category):
    string
    
      @ivar(program):
    The program to be run by the Test. The program's name
    PRGNAME is used to lookup for the program in the following manner:
    
    1) Look for a local program named PRGNAME
    2) Look for a plearn-like command (plearn, plearn_tests, ...) named 
PRGNAME
    3) Call 'which PRGNAME'
    4) Fail
    
    Compilable program should provide the keyword argument 'compiler'
    mapping to a string interpreted as the compiler name (e.g.
    "compiler = 'pymake'"). If no compiler is provided while the program is
    believed to be compilable, 'pymake' will be assigned by
    default. Arguments to be forwarded to the compiler can be provided as a
    string through the 'compile_options' keyword argument. @type program:
    Program
    
      @ivar(arguments):
    The command line arguments to be passed to the program
    for the test to proceed.
      @type(arguments):
    String
    
      @ivar(resources):
    A list of resources that are used by your program
    either in the command line or directly in the code (plearn or pyplearn
    files, databases, ...). The elements of the list must be string
    representations of the path, absolute or relative, to the resource.
      @type(resources):
    List of Strings
    
      @ivar(precision):
    The precision (absolute and relative) used when comparing
    floating numbers in the test output (default = 1e-6)
      @type(precision):
    float
    
      @ivar(pfileprg):
    The program to be used for comparing files of psave &
    vmat formats. It can be either:
      - "__program__": maps to this test's program if its compilable;
    maps to 'plearn_tests' otherwise (default);
      - "__plearn__": always maps to 'plearn_tests' (for when the program
    under test is not a version of PLearn);
      - A Program (see 'program' option) instance
      - None: if you are sure no files are to be compared.
    
      @ivar(ignored_files_re):
    Default behaviour of a test is to compare all
    files created by running the test. In some case, one may prefer some of
    these files to be ignored.
      @type(ignored_files_re):
    list of regular expressions
    
      @ivar(disabled):
    If true, the test will not be ran.
      @type(disabled):
    bool
    
"""
Test(
    name = "EmbeddedPython_BasicIdentityCalls",
    description = "Tests the core of PythonCodeSnippet through identity function calls in Python",
    category = "General",
    program = Program(
        name = "plearn_tests",
        compiler = "pymake"
        ),
    arguments = "PLEARNDIR:scripts/command_line_object.plearn \"object=BasicIdentityCallsTest(save = 0)\"",
    resources = [ ],
    precision = 1e-06,
    pfileprg = "__program__",
    disabled = False
    )

Test(
    name = "EmbeddedPython_InterfunctionXchg",
    description = "Test data exchange within a single snippet and exception mapping",
    category = "General",
    program = Program(
        name = "plearn_tests",
        compiler = "pymake"
        ),
    arguments = "PLEARNDIR:scripts/command_line_object.plearn \"object=InterfunctionXchgTest(save = 0)\"",
    resources = [ ],
    precision = 1e-06,
    pfileprg = "__program__",
    disabled = False
    )

Test(
    name = "EmbeddedPython_MemoryStressTest",
    description = "Call a great number of functions to detect memory leaks",
    category = "General",
    program = Program(
        name = "plearn_tests",
        compiler = "pymake"
        ),
    arguments = "PLEARNDIR:scripts/command_line_object.plearn \"object=MemoryStressTest(save = 0)\"",
    resources = [ ],
    precision = 1e-06,
    pfileprg = "__program__",
    disabled = False
    )

Test(
    name = "EmbeddedPython_TrampolineTest",
    description = "Make sure the basic mechanism of Python calling back C++ works",
    category = "General",
    program = Program(
        name = "test_trampoline",
        compiler = "pymake"
        ),
    arguments = "",
    resources = [ ],
    precision = 1e-06,
    pfileprg = "__program__",
    disabled = True
    )

Test(
    name = "EmbeddedPython_InjectionTest",
    description = "Test the ability to inject standalone and bound C++ function into Python",
    category = "General",
    program = Program(
        name = "plearn_tests",
        compiler = "pymake"
        ),
    arguments = "PLEARNDIR:scripts/command_line_object.plearn \"object=InjectionTest(save = 0)\"",
    resources = [ ],
    precision = 1e-06,
    pfileprg = "__program__",
    disabled = False
    )

Test(
    name = "EmbeddedPython_PythonProcessedVMatrix",
    description = "Exercises the PythonProcessedVMatrix",
    category = "General",
    program = Program(
        name = "plearn_tests",
        compiler = "pymake"
        ),
    arguments = "vmat cat test_python_vmatrix.pymat",
    resources = [ "test_python_vmatrix.pymat" ],
    precision = 1e-06,
    pfileprg = "__program__",
    disabled = False
    )
