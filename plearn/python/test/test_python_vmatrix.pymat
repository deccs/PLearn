from plearn.pyplearn import *

### This is an inline Matrix that will be processed (transformed) by the
### PythonProcessedVMatrix.
source_mat = pl.MemoryVMatrix(
    data = TMat(4, 2, [ 2, 3,
                        5, 7,
                        11,13,
                        17,19 ]),
    inputsize = 1, targetsize = 1, weightsize = 0)


### This is the processing code that will be applied to the matrix from
### within the PythonProcessedVMatrix.  Please note the use of triple quotes
### """ to separate this code from the .pymat script itself.  Both are Python,
### but the processing_code executes later from within PLearn.
###
### It is NOT RECOMMENDED to indent this processing_code further, since the
### indentation would be reflected inside the string and Python is very
### indentation-sensitive.
processing_code = """
import sys
from numarray import *

def getRow(row_no, source_row):
    return concatenate((10*row_no, 2*source_row))

def getFieldNames(source_field_names):
    print >>sys.stderr, 'source_field_names:', source_field_names
    print >>sys.stderr, 'source_length     :', source_length
    print >>sys.stderr, 'source_width      :', source_width
    print >>sys.stderr, 'source_inputsize  :', source_inputsize
    print >>sys.stderr, 'source_targetsize :', source_targetsize
    print >>sys.stderr, 'source_weightsize :', source_weightsize
    print >>sys.stderr, 'params            :', getParams()
    print >>sys.stderr, 'source row(1)     :', getSourceRow(1)
    return ['tricky_rownum', 'field1', 'field2']

#def getSizes(source_inputsize, source_targetsize, source_weightsize):

#def build():
"""
                
### Finally the VMatrix object itself that wraps the source with
### the processing_code.
processed_mat = pl.PythonProcessedVMatrix(
    source = source_mat,
    code   = processing_code,
    params = { 'key1':'value1', 'key2':'value2' })
    

### The main function must return the VMatrix object.
def main():
    return processed_mat
