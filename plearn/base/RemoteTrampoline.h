// -*- C++ -*-

// RemoteTrampoline.h
//
// Copyright (C) 2006 Nicolas Chapados, Pascal Vincent
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
//  3. The name of the authors may not be used to endorse or promote
//     products derived from this software without specific prior written
//     permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// This file is part of the PLearn library. For more information on the PLearn
// library, go to the PLearn Web site at www.plearn.org

// Authors: Nicolas Chapados

/*! \file RemoteTrampoline.h */


#ifndef RemoteTrampoline_INC
#define RemoteTrampoline_INC

// Python includes must come first (if needed)
#ifdef PL_PYTHON_VERSION 
#include <plearn/python/PythonObjectWrapper.h>
#endif //def PL_PYTHON_VERSION


// From C++ stdlib
#include <string>

// From Boost
#include <boost/type_traits.hpp>

// From PLearn
#include <plearn/base/PP.h>
#include <plearn/base/TypeTraits.h>
#include <plearn/io/PStream.h>
#include <plearn/base/tuple.h>
#include "RemoteMethodDoc.h"

namespace PLearn {

using std::string;

// Forward-declare
class Object;

// Shortcut for stripping an argument or return type of all references, const,
// and volatile qualifiers
#define TRAMPOLINE_TYPE(T) \
    typename boost::remove_cv< typename boost::remove_reference<T>::type >::type

#define RTYPE_DOC(T) RetTypeDoc(TypeTraits< TRAMPOLINE_TYPE(T) >::name())

#define ATYPE_DOC(T) ArgTypeDoc(TypeTraits< TRAMPOLINE_TYPE(T) >::name())

#define FTRAMPOLINE_TYPE(T) \
    boost::remove_cv< boost::remove_reference<T>::type >::type

#define FRTYPE_DOC(T) RetTypeDoc(TypeTraits< FTRAMPOLINE_TYPE(T) >::name())

/**
 *  Base for the trampoline mechanism of PLearn remote method invocation
 *
 *  The PLearn RMI mechanism provided through the Object::call() method can
 *  easily be interfaced to existing methods through the declareMethod system.
 *  Each declareMethod involves the creation of a TRAMPOLINE object.  The
 *  purpose of this trampoline is to link together an object method with (i)
 *  the object instance, (ii) the serialized form of its arguments passed on a
 *  PStream, and (iii) the return value generated by calling the method.
 *
 *  The trampoline takes care of all the details related to stream handling,
 *  including the deserialisation of arguments from the stream into temporary
 *  variables, calling the method with an appropriate object instance, calling
 *  Object::prepareToSendResult, and serializing the return value onto the
 *  stream.
 *
 *  The base class provides a virtual call() function, which is overridden in
 *  derived classes.  Derived class templates are provided for each function
 *  arity (number of arguments).
 *
 *  Other virtual functions are provided to provide type-annotated
 *  documentation.
 */
struct RemoteTrampoline : public PPointable
{
    //! Constructor takes the methodname and some documentation.
    RemoteTrampoline(const string& methodname, const RemoteMethodDoc& doc)
        : m_methodname(methodname),
          m_documentation(doc)
    {
        m_documentation.setName(methodname);
        m_documentation.checkConsistency();
    }

    //! Documentation accessor
    const RemoteMethodDoc& documentation() const
    {
        return m_documentation;
    }
    
    /**
     *  Perform the act of binding arguments on a stream with an object
     *  instance.  The actual number of arguments is passed only for
     *  error-checking, since the trampoline knows the number of arguments that
     *  it is expecting. If this is used to call a global function or 
     *  a static method that was declared with declareFunction, instead
     *  of a regular method declared with declareMethod, then the instance 
     *  argument is ignored (and should be passed 0 by convention). 
     */
    virtual void call(Object* instance, int nargs, PStream& io) const = 0;

#ifdef PL_PYTHON_VERSION 
    //! call from python
    virtual PythonObjectWrapper call(Object* instance, 
                                     const TVec<PythonObjectWrapper>& args) const = 0;
#endif //def PL_PYTHON_VERSION 


    //! Check that the number of arguments is O.K. or PLERROR
    void checkNargs(int nargs, int expected_nargs) const;

    //! Perform dynamic-cast of its argument or PLERROR if wrong type or NULL
    template <class T>
    T* as(Object* instance) const
    {
        T* t_instance = dynamic_cast<T*>(instance);
        if (! t_instance)
            PLERROR("PLearn Remote Function: object instance is null or of the wrong "
                    "type for remote function '%s'", m_methodname.c_str());
        
        return t_instance;
    }

    //! Just forward the call to Object::prepareToSendResults
    //! (in .cc to avoid circular .h inclusion problem)
    static void prepareToSendResults(PStream& out, int nres);

    static void sendRemoteMethodVoidResult(PStream& io)
    {
        prepareToSendResults(io, 0);
        io.flush();
    }

    template<class T>
    static void sendRemoteMethodResult(PStream& io, const T& r)
    {
        prepareToSendResults(io, 1);
        io << r;
        io.flush();
    }

    template<class T1>
    static void sendRemoteMethodResult(PStream& io, const tuple<T1>& r)
    {
        prepareToSendResults(io, 1);
        io << get<0>(r);
        io.flush();
    }

    template<class T1, class T2>
    static void sendRemoteMethodResult(PStream& io, const tuple<T1,T2>& r)
    {
        prepareToSendResults(io, 2);
        io << get<0>(r) << get<1>(r);
        io.flush();
    }

    template<class T1, class T2, class T3>
    static void sendRemoteMethodResult(PStream& io, const tuple<T1,T2,T3>& r)
    {
        prepareToSendResults(io, 3);
        io << get<0>(r) << get<1>(r) << get<2>(r);
        io.flush();
    }

    template<class T1, class T2, class T3, class T4>
    static void sendRemoteMethodResult(PStream& io, const tuple<T1,T2,T3,T4>& r)
    {
        prepareToSendResults(io, 4);
        io << get<0>(r) << get<1>(r) << get<2>(r) << get<3>(r);
        io.flush();
    }

    template<class T1, class T2, class T3, class T4, class T5>
    static void sendRemoteMethodResult(PStream& io, const tuple<T1,T2,T3,T4,T5>& r)
    {
        prepareToSendResults(io, 5);
        io << get<0>(r) << get<1>(r) << get<2>(r) << get<3>(r) << get<4>(r);
        io.flush();
    }

    template<class T1, class T2, class T3, class T4, class T5, class T6>
    static void sendRemoteMethodResult(PStream& io, const tuple<T1,T2,T3,T4,T5,T6>& r)
    {
        prepareToSendResults(io, 6);
        io << get<0>(r) << get<1>(r) << get<2>(r) << get<3>(r) << get<4>(r) << get<5>(r);
        io.flush();
    }

protected:
    //! Name of the method associated with trampoline
    string m_methodname;

    //! Documentation associated with the method
    RemoteMethodDoc m_documentation;
};

//#####  Zero Arguments  ######################################################

/**
 *  Trampoline for a non-void non-const 0-argument method
 */
template <class T, class R>
struct RemoteTrampoline_0 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 0 };
    typedef R (T::*MethodType)();
    
    RemoteTrampoline_0(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(R))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(R) r = (as<T>(instance)->*m_method)();
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(R) r = (as<T>(instance)->*m_method)();
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership) ;
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};

/**
 *  Trampoline for a void non-const 0-argument method
 */
template <class T>
struct RemoteTrampoline_0<T,void> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 0 };
    typedef void (T::*MethodType)();
    
    RemoteTrampoline_0(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(void))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        (as<T>(instance)->*m_method)();
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        (as<T>(instance)->*m_method)();
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};


//#####  1 Argument  ##########################################################

/**
 *  Trampoline for a non-void non-const 1-argument method
 */
template <class T, class R, class A1>
struct RemoteTrampoline_1 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 1 };
    typedef R (T::*MethodType)(A1);
    
    RemoteTrampoline_1(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(R) r = (as<T>(instance)->*m_method)(a1);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(R) r= (as<T>(instance)->*m_method)(a1);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};

/**
 *  Trampoline for a void non-const 1-argument method
 */
template <class T, class A1>
struct RemoteTrampoline_1<T,void,A1> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 1 };
    typedef void (T::*MethodType)(A1);
    
    RemoteTrampoline_1(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        (as<T>(instance)->*m_method)(a1);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        (as<T>(instance)->*m_method)(a1);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};


//#####  2 Arguments  #########################################################

/**
 *  Trampoline for a non-void non-const 2-argument method
 */
template <class T, class R, class A1, class A2>
struct RemoteTrampoline_2 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 2 };
    typedef R (T::*MethodType)(A1,A2);
    
    RemoteTrampoline_2(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(R) r = (as<T>(instance)->*m_method)(a1,a2);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(R) r= (as<T>(instance)->*m_method)(a1,a2);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};

/**
 *  Trampoline for a void non-const 2-argument method
 */
template <class T, class A1, class A2>
struct RemoteTrampoline_2<T,void,A1,A2> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 2 };
    typedef void (T::*MethodType)(A1,A2);
    
    RemoteTrampoline_2(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        (as<T>(instance)->*m_method)(a1,a2);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        (as<T>(instance)->*m_method)(a1,a2);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};


//#####  3 Arguments  #########################################################

/**
 *  Trampoline for a non-void non-const 3-argument method
 */
template <class T, class R, class A1, class A2, class A3>
struct RemoteTrampoline_3 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 3 };
    typedef R (T::*MethodType)(A1,A2,A3);
    
    RemoteTrampoline_3(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(R) r = (as<T>(instance)->*m_method)(a1,a2,a3);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(R) r= (as<T>(instance)->*m_method)(a1,a2,a3);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};

/**
 *  Trampoline for a void non-const 3-argument method
 */
template <class T, class A1, class A2, class A3>
struct RemoteTrampoline_3<T,void,A1,A2,A3> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 3 };
    typedef void (T::*MethodType)(A1,A2,A3);
    
    RemoteTrampoline_3(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        (as<T>(instance)->*m_method)(a1,a2,a3);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        (as<T>(instance)->*m_method)(a1,a2,a3);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};


//#####  4 Arguments  #########################################################

/**
 *  Trampoline for a non-void non-const 4-argument method
 */
template <class T, class R, class A1, class A2, class A3, class A4>
struct RemoteTrampoline_4 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 4 };
    typedef R (T::*MethodType)(A1,A2,A3,A4);
    
    RemoteTrampoline_4(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(R) r = (as<T>(instance)->*m_method)(a1,a2,a3,a4);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(R) r= (as<T>(instance)->*m_method)(a1,a2,a3,a4);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};

/**
 *  Trampoline for a void non-const 4-argument method
 */
template <class T, class A1, class A2, class A3, class A4>
struct RemoteTrampoline_4<T,void,A1,A2,A3,A4> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 4 };
    typedef void (T::*MethodType)(A1,A2,A3,A4);
    
    RemoteTrampoline_4(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        (as<T>(instance)->*m_method)(a1,a2,a3,a4);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        (as<T>(instance)->*m_method)(a1,a2,a3,a4);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};


//#####  5 Arguments  #########################################################

/**
 *  Trampoline for a non-void non-const 5-argument method
 */
template <class T, class R, class A1, class A2, class A3, class A4, class A5>
struct RemoteTrampoline_5 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 5 };
    typedef R (T::*MethodType)(A1,A2,A3,A4,A5);
    
    RemoteTrampoline_5(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4), ATYPE_DOC(A5))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(A5) a5;  io >> a5;
        TRAMPOLINE_TYPE(R) r = (as<T>(instance)->*m_method)(a1,a2,a3,a4,a5);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(A5) a5= args[4].as<TRAMPOLINE_TYPE(A5)>();
        TRAMPOLINE_TYPE(R) r= (as<T>(instance)->*m_method)(a1,a2,a3,a4,a5);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};

/**
 *  Trampoline for a void non-const 5-argument method
 */
template <class T, class A1, class A2, class A3, class A4, class A5>
struct RemoteTrampoline_5<T,void,A1,A2,A3,A4,A5> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 5 };
    typedef void (T::*MethodType)(A1,A2,A3,A4,A5);
    
    RemoteTrampoline_5(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4), ATYPE_DOC(A5))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(A5) a5;  io >> a5;
        (as<T>(instance)->*m_method)(a1,a2,a3,a4,a5);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(A5) a5= args[4].as<TRAMPOLINE_TYPE(A5)>();
        (as<T>(instance)->*m_method)(a1,a2,a3,a4,a5);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};


//#####  6 Arguments  #########################################################

/**
 *  Trampoline for a non-void non-const 6-argument method
 */
template <class T, class R, class A1, class A2, class A3, class A4, class A5, class A6>
struct RemoteTrampoline_6 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 6 };
    typedef R (T::*MethodType)(A1,A2,A3,A4,A5,A6);
    
    RemoteTrampoline_6(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4), ATYPE_DOC(A5), ATYPE_DOC(A6))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(A5) a5;  io >> a5;
        TRAMPOLINE_TYPE(A6) a6;  io >> a6;
        TRAMPOLINE_TYPE(R) r = (as<T>(instance)->*m_method)(a1,a2,a3,a4,a5,a6);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(A5) a5= args[4].as<TRAMPOLINE_TYPE(A5)>();
        TRAMPOLINE_TYPE(A6) a6= args[5].as<TRAMPOLINE_TYPE(A6)>();
        TRAMPOLINE_TYPE(R) r= (as<T>(instance)->*m_method)(a1,a2,a3,a4,a5,a6);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};

/**
 *  Trampoline for a void non-const 6-argument method
 */
template <class T, class A1, class A2, class A3, class A4, class A5, class A6>
struct RemoteTrampoline_6<T,void,A1,A2,A3,A4,A5,A6> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 6 };
    typedef void (T::*MethodType)(A1,A2,A3,A4,A5,A6);
    
    RemoteTrampoline_6(const string& methodname, const RemoteMethodDoc& doc,
                       MethodType m)
        : inherited(methodname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4), ATYPE_DOC(A5), ATYPE_DOC(A6))),
          m_method(m)
    { }

    virtual void call(Object* instance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(A5) a5;  io >> a5;
        TRAMPOLINE_TYPE(A6) a6;  io >> a6;
        (as<T>(instance)->*m_method)(a1,a2,a3,a4,a5,a6);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* instance, const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(A5) a5= args[4].as<TRAMPOLINE_TYPE(A5)>();
        TRAMPOLINE_TYPE(A6) a6= args[5].as<TRAMPOLINE_TYPE(A6)>();
        (as<T>(instance)->*m_method)(a1,a2,a3,a4,a5,a6);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    MethodType m_method;
};


////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
///   Trampolines for functions          
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////


//#####  Zero Arguments  ######################################################

/**
 *  Trampoline for a non-void 0-argument function
 */
template <class R>
struct FRemoteTrampoline_0 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 0 };
    typedef R (*FunctionType)();
    
    FRemoteTrampoline_0(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(R))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(R) r = (*m_function)();
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(R) r= (*m_function)();
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};

/**
 *  Trampoline for a void 0-argument function
 */
template <>
struct FRemoteTrampoline_0<void> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 0 };
    typedef void (*FunctionType)();
    
    FRemoteTrampoline_0(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc, RetTypeDoc("void"))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        (*m_function)();
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        (*m_function)();
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};


//#####  1 Argument  ##########################################################

/**
 *  Trampoline for a non-void 1-argument function
 */
template <class R, class A1>
struct FRemoteTrampoline_1 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 1 };
    typedef R (*FunctionType)(A1);
    
    FRemoteTrampoline_1(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(R) r = (*m_function)(a1);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(R) r= (*m_function)(a1);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};

/**
 *  Trampoline for a void 1-argument function
 */
template <class A1>
struct FRemoteTrampoline_1<void,A1> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 1 };
    typedef void (*FunctionType)(A1);
    
    FRemoteTrampoline_1(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        (*m_function)(a1);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        (*m_function)(a1);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};


//#####  2 Arguments  #########################################################

/**
 *  Trampoline for a non-void 2-argument function
 */
template <class R, class A1, class A2>
struct FRemoteTrampoline_2 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 2 };
    typedef R (*FunctionType)(A1,A2);
    
    FRemoteTrampoline_2(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(R) r = (*m_function)(a1,a2);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(R) r= (*m_function)(a1,a2);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};

/**
 *  Trampoline for a void 2-argument function
 */
template <class A1, class A2>
struct FRemoteTrampoline_2<void,A1,A2> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 2 };
    typedef void (*FunctionType)(A1,A2);
    
    FRemoteTrampoline_2(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        (*m_function)(a1,a2);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        (*m_function)(a1,a2);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};


//#####  3 Arguments  #########################################################

/**
 *  Trampoline for a non-void 3-argument function
 */
template <class R, class A1, class A2, class A3>
struct FRemoteTrampoline_3 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 3 };
    typedef R (*FunctionType)(A1,A2,A3);
    
    FRemoteTrampoline_3(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(R) r = (*m_function)(a1,a2,a3);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(R) r= (*m_function)(a1,a2,a3);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};

/**
 *  Trampoline for a void 3-argument function
 */
template <class A1, class A2, class A3>
struct FRemoteTrampoline_3<void,A1,A2,A3> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 3 };
    typedef void (*FunctionType)(A1,A2,A3);
    
    FRemoteTrampoline_3(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        (*m_function)(a1,a2,a3);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        (*m_function)(a1,a2,a3);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};


//#####  4 Arguments  #########################################################

/**
 *  Trampoline for a non-void 4-argument function
 */
template <class R, class A1, class A2, class A3, class A4>
struct FRemoteTrampoline_4 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 4 };
    typedef R (*FunctionType)(A1,A2,A3,A4);
    
    FRemoteTrampoline_4(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(R) r = (*m_function)(a1,a2,a3,a4);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(R) r= (*m_function)(a1,a2,a3,a4);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};

/**
 *  Trampoline for a void 4-argument function
 */
template <class A1, class A2, class A3, class A4>
struct FRemoteTrampoline_4<void,A1,A2,A3,A4> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 4 };
    typedef void (*FunctionType)(A1,A2,A3,A4);
    
    FRemoteTrampoline_4(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        (*m_function)(a1,a2,a3,a4);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        (*m_function)(a1,a2,a3,a4);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};


//#####  5 Arguments  #########################################################

/**
 *  Trampoline for a non-void 5-argument function
 */
template <class R, class A1, class A2, class A3, class A4, class A5>
struct FRemoteTrampoline_5 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 5 };
    typedef R (*FunctionType)(A1,A2,A3,A4,A5);
    
    FRemoteTrampoline_5(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4), ATYPE_DOC(A5))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(A5) a5;  io >> a5;
        TRAMPOLINE_TYPE(R) r = (*m_function)(a1,a2,a3,a4,a5);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(A5) a5= args[4].as<TRAMPOLINE_TYPE(A5)>();
        TRAMPOLINE_TYPE(R) r= (*m_function)(a1,a2,a3,a4,a5);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};

/**
 *  Trampoline for a void 5-argument function
 */
template <class A1, class A2, class A3, class A4, class A5>
struct FRemoteTrampoline_5<void,A1,A2,A3,A4,A5> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 5 };
    typedef void (*FunctionType)(A1,A2,A3,A4,A5);
    
    FRemoteTrampoline_5(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4), ATYPE_DOC(A5))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(A5) a5;  io >> a5;
        (*m_function)(a1,a2,a3,a4,a5);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(A5) a5= args[4].as<TRAMPOLINE_TYPE(A5)>();
        (*m_function)(a1,a2,a3,a4,a5);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};


//#####  6 Arguments  #########################################################

/**
 *  Trampoline for a non-void 6-argument function
 */
template <class R, class A1, class A2, class A3, class A4, class A5, class A6>
struct FRemoteTrampoline_6 : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 6 };
    typedef R (*FunctionType)(A1,A2,A3,A4,A5,A6);
    
    FRemoteTrampoline_6(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(R),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4), ATYPE_DOC(A5), ATYPE_DOC(A6))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(A5) a5;  io >> a5;
        TRAMPOLINE_TYPE(A6) a6;  io >> a6;
        TRAMPOLINE_TYPE(R) r = (*m_function)(a1,a2,a3,a4,a5,a6);
        sendRemoteMethodResult(io, r);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(A5) a5= args[4].as<TRAMPOLINE_TYPE(A5)>();
        TRAMPOLINE_TYPE(A6) a6= args[5].as<TRAMPOLINE_TYPE(A6)>();
        TRAMPOLINE_TYPE(R) r= (*m_function)(a1,a2,a3,a4,a5,a6);
        return PythonObjectWrapper(r, PythonObjectWrapper::transfer_ownership);
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};

/**
 *  Trampoline for a void 6-argument function
 */
template <class A1, class A2, class A3, class A4, class A5, class A6>
struct FRemoteTrampoline_6<void,A1,A2,A3,A4,A5,A6> : public RemoteTrampoline
{
    typedef RemoteTrampoline inherited;
    enum { expected_nargs = 6 };
    typedef void (*FunctionType)(A1,A2,A3,A4,A5,A6);
    
    FRemoteTrampoline_6(const string& functionname, const RemoteMethodDoc& doc,
                       FunctionType m)
        : inherited(functionname, (doc,
                                 RTYPE_DOC(void),
                                 ATYPE_DOC(A1), ATYPE_DOC(A2), ATYPE_DOC(A3),
                                 ATYPE_DOC(A4), ATYPE_DOC(A5), ATYPE_DOC(A6))),
          m_function(m)
    { }

    virtual void call(Object* nullinstance, int nargs, PStream& io) const
    {
        checkNargs(nargs, expected_nargs);
        TRAMPOLINE_TYPE(A1) a1;  io >> a1;
        TRAMPOLINE_TYPE(A2) a2;  io >> a2;
        TRAMPOLINE_TYPE(A3) a3;  io >> a3;
        TRAMPOLINE_TYPE(A4) a4;  io >> a4;
        TRAMPOLINE_TYPE(A5) a5;  io >> a5;
        TRAMPOLINE_TYPE(A6) a6;  io >> a6;
        (*m_function)(a1,a2,a3,a4,a5,a6);
        sendRemoteMethodVoidResult(io);
    }

#ifdef PL_PYTHON_VERSION 
    virtual PythonObjectWrapper call(Object* nullinstance, 
                                     const TVec<PythonObjectWrapper>& args) const
    {
        checkNargs(args.size(), expected_nargs);
        TRAMPOLINE_TYPE(A1) a1= args[0].as<TRAMPOLINE_TYPE(A1)>();
        TRAMPOLINE_TYPE(A2) a2= args[1].as<TRAMPOLINE_TYPE(A2)>();
        TRAMPOLINE_TYPE(A3) a3= args[2].as<TRAMPOLINE_TYPE(A3)>();
        TRAMPOLINE_TYPE(A4) a4= args[3].as<TRAMPOLINE_TYPE(A4)>();
        TRAMPOLINE_TYPE(A5) a5= args[4].as<TRAMPOLINE_TYPE(A5)>();
        TRAMPOLINE_TYPE(A6) a6= args[5].as<TRAMPOLINE_TYPE(A6)>();
        (*m_function)(a1,a2,a3,a4,a5,a6);
        return PythonObjectWrapper(PythonObjectWrapper::transfer_ownership);//None
    }
#endif //def PL_PYTHON_VERSION 

protected:
    FunctionType m_function;
};

} // end of namespace PLearn

#endif


/*
  Local Variables:
  mode:c++
  c-basic-offset:4
  c-file-style:"stroustrup"
  c-file-offsets:((innamespace . 0)(inline-open . 0))
  indent-tabs-mode:nil
  fill-column:79
  End:
*/
// vim: filetype=cpp:expandtab:shiftwidth=4:tabstop=8:softtabstop=4:encoding=utf-8:textwidth=79 :
