// -*- C++ -*-

// RowBufferedVMatrixTest.cc
//
// Copyright (C) 2005 Olivier Delalleau
// Copyright (C) 2005 Christian Hudon
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
//
//  3. The name of the authors may not be used to endorse or promote
//     products derived from this software without specific prior written
//     permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// This file is part of the PLearn library. For more information on the PLearn
// library, go to the PLearn Web site at www.plearn.org

/* *******************************************************
   * $Id: .pyskeleton_header 544 2003-09-01 00:05:31Z plearner $
   ******************************************************* */

// Authors: Olivier Delalleau, Christian Hudon

/*! \file RowBufferedVMatrixTest.cc */


#include "RowBufferedVMatrixTest.h"
#include <plearn/vmat/TemporaryFileVMatrix.h>
#include <plearn/vmat/VMat.h>

namespace PLearn {
using namespace std;

PLEARN_IMPLEMENT_OBJECT(
    RowBufferedVMatrixTest,
    "Test that RowBufferedVMatrix's buffer correctly gets dirtied.",
    ""
);

////////////////////////////
// RowBufferedVMatrixTest //
////////////////////////////
RowBufferedVMatrixTest::RowBufferedVMatrixTest()
{
}

///////////
// build //
///////////
void RowBufferedVMatrixTest::build()
{
    inherited::build();
    build_();
}

/////////////////////////////////
// makeDeepCopyFromShallowCopy //
/////////////////////////////////
void RowBufferedVMatrixTest::makeDeepCopyFromShallowCopy(CopiesMap& copies)
{
    inherited::makeDeepCopyFromShallowCopy(copies);

    // ### Call deepCopyField on all "pointer-like" fields
    // ### that you wish to be deepCopied rather than
    // ### shallow-copied.
    // ### ex:
    // deepCopyField(trainvec, copies);

    // ### Remove this line when you have fully implemented this method.
    PLERROR("RowBufferedVMatrixTest::makeDeepCopyFromShallowCopy not fully (correctly) implemented yet!");
}

////////////////////
// declareOptions //
////////////////////
void RowBufferedVMatrixTest::declareOptions(OptionList& ol)
{
    declareOption(ol, "matrix_filename",
        &RowBufferedVMatrixTest::matrix_filename, OptionBase::buildoption,
        "Name of the temporary file VMatrix generated by this test.");

    // Now call the parent class' declareOptions
    inherited::declareOptions(ol);
}

////////////
// build_ //
////////////
void RowBufferedVMatrixTest::build_()
{
    // ### This method should do the real building of the object,
    // ### according to set 'options', in *any* situation.
    // ### Typical situations include:
    // ###  - Initial building of an object from a few user-specified options
    // ###  - Building of a "reloaded" object: i.e. from the complete set of all serialised options.
    // ###  - Updating or "re-building" of an object after a few "tuning" options have been modified.
    // ### You should assume that the parent class' build_() has already been called.
}

/////////////
// perform //
/////////////
void RowBufferedVMatrixTest::perform()
{
    if (matrix_filename.isEmpty())
        PLERROR("In RowBufferedVMatrixTest::perform - You must provide the "
                "'matrix_filename' PPath option");

    const int row_size = 3;
    double first_insert_data[] = { 20010101, -1, 42 };
    double second_insert_data[] = { 20000813, 37, 49 };

    VMat mat = new TemporaryFileVMatrix(matrix_filename, 0, row_size);
    mat->insertRow(0, Vec(row_size, first_insert_data));
    mat->insertRow(0, Vec(row_size, second_insert_data));

    if (mat->get(0, 0) != 20000813)
        pout << "Test failed!" << endl;
    else
        pout << "Test succeeded!" << endl;
}

} // end of namespace PLearn


/*
  Local Variables:
  mode:c++
  c-basic-offset:4
  c-file-style:"stroustrup"
  c-file-offsets:((innamespace . 0)(inline-open . 0))
  indent-tabs-mode:nil
  fill-column:79
  End:
*/
// vim: filetype=cpp:expandtab:shiftwidth=4:tabstop=8:softtabstop=4:encoding=utf-8:textwidth=79 :
