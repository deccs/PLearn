# A 2D Spiral dataset.

SpiralDistribution( 
  # double: 
  lambda = 0.0400000000000000008  ;
  # double: 
  alpha = 1  ;
  # double: 
  tmin = 3  ;
  # double: 
  tmax = 10
  # double: 
  sigma = 0.0100000000000000002  ;
  # double: 
  uniformity = 1  ;
  # bool: If true, then t will be appended to the generated sample, along with x and y.
  include_t = 0  ;
  # string: Defines what will be given in output. This is a string where the characters
  # have the following meaning:
  # 'l'-> log_density, 'd' -> density, 'c' -> cdf, 's' -> survival_fn,
  # 'e' -> expectation, 'v' -> variance.
  # In lower case they give the value associated with a given observation.
  # In upper case, a curve is evaluated at regular intervals and produced in
  # output (as a histogram), only for 'L', 'D', 'C' and 'S'.
  # The number of curve points is determined by the 'n_curve_points' option.
  # Note that the upper case letters only work for SCALAR variables.
  outputs_def = "l"  ;
  # int: The number of points for which the output is evaluated when outputs_defs
  # is upper case (produces a histogram).
  # The lower_bound and upper_bound options specify where the curve begins and ends.
  # Note that these options (upper case letters) only work for SCALAR variables.
  n_curve_points = -1  ;
  # double: The lower bound of scalar Y values to compute a histogram of the distribution
  # when upper case outputs_def are specified.
  lower_bound = 0  ;
  # double: The upper bound of scalar Y values to compute a histogram of the distribution
  # when upper case outputs_def are specified.
  upper_bound = 0  ;
  # string: Path of the directory associated with this learner, in which
  # it should save any file it wishes to create. 
  # The directory will be created if it does not already exist.
  # If expdir is the empty string (the default), then the learner 
  # should not create *any* file. Note that, anyway, most file creation and 
  # reporting are handled at the level of the PTester class rather than 
  # at the learner's. 
  expdir = ""  ;
  # long: The initial seed for the random number generator used to initialize this learner's parameters
  # as typically done in the forget() method... 
  # If -1 is provided, then a 'random' seed is chosen based on time of day, insuring that
  # different experiments may yield different results.
  # With a given seed, forget() should always initialize the parameters to the same values.
  seed = -1  ;
  # int: The stage until which train() should train this learner and return.
  # The meaning of 'stage' is learner-dependent, but for learners whose 
  # training is incremental (such as involving incremental optimization), 
  # it is typically synonym with the number of 'epochs', i.e. the number 
  # of passages of the optimization process through the whole training set, 
  # since the last fresh initialisation.
  nstages = 1  ;
  # bool: should progress in learning and testing be reported in a ProgressBar.
  report_progress = 1  ;
  # int: Level of verbosity. If 0 should not write anything on cerr. 
  # If >0 may write some info on the steps performed along the way.
  # The level of details written should depend on this value.
  verbosity = 1  ;
);
