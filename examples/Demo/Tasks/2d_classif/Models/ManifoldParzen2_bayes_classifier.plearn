$DEFINE{DENSITY_ESTIMATOR}
{  ManifoldParzen2( 
     # int: Number of neighbors for covariance matrix estimation.
     nneighbors = 6;

     # int: Number of components to store from the PCA.
     ncomponents = 2;

     # bool: Indication that the last eigenvalue should be used for the remaining directions' variance.
     use_last_eigenval = 0;

     # bool: Indication that the difference vector between the training points and the gaussians should be learned.
     # By default, the gaussians are centered at the training points.
     learn_mu = 1;

     # double: If use_last_eigenvalue is false, used value for the minimum variance in all directions
     global_lambda0 = 0.001;

     # double: Scale factor
     scale_factor = 1 ;


     # string: Defines what will be given in output. This is a string where the
     # characters have the following meaning:
     # - 'l' : log_density
     # - 'd' : density
     # - 'c' : cdf
     # - 's' : survival_fn
     # - 'e' : expectation
     # - 'v' : variance.
     # 
     # If these options are specified in lower case they give the value
     # associated with a given observation. In upper case, a curve is
     # evaluated at regular intervals and produced in output (as a
     # histogram). For 'L', 'D', 'C', 'S', it is the predicted part that
     # varies, while for 'E' and 'V' it is the predictor part (for
     # conditional distributions).
     # The number of curve points is given by the 'n_curve_points' option.
     # Note that the upper case letters only work for scalar variables, in
     # order to produce a one-dimensional curve.
     outputs_def = "d"  ;


     # bool: should progress in learning and testing be reported in a ProgressBar.
     report_progress = 1  ;

     # int: Level of verbosity. If 0 should not write anything on perr. 
     # If >0 may write some info on the steps performed along the way.
     # The level of details written should depend on this value.
     verbosity = 1  ;
     );   
}

ClassifierFromDensity( 
  # int: The number of classes
  nclasses = 2;

  # TVec< PP< PDistribution > >: The array of density estimators, one for each class.
  # You may also specify just one that will be replicated as many times as there are classes.
  estimators = [ ${DENSITY_ESTIMATOR}, ${DENSITY_ESTIMATOR} ]

  # bool: Whether computeOutput yields log-probabilities or probabilities (of classes given inputs)
  output_log_probabilities = 0  ;

  # bool: Whether to normalize the probabilities (if not just compute likelihood * prior for each class)
  normalize_probabilities = 1  ;

  );
