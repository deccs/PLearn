PTester( 
# string: Path of this tester's directory in which to save all tester results.
# The directory will be created if it does not already exist.
# If this is an empty string, no directory is created and no output file is generated.
expdir = "hyer"  ;

# PP< PLearner >: The learner to train/test.
learner = *0  ;

# VMat: The dataset to use to generate splits. 
# (This is ignored if your splitter is an ExplicitSplitter)
# Data-sets are seen as matrices whose columns or fields are layed out as 
# follows: a number of input fields, followed by (optional) target fields, 
# followed by a (optional) weight field (to weigh each example).
# The sizes of those areas are given by the VMatrix options 
# inputsize targetsize, and weightsize, which are typically used by the 
# learner upon building
dataset = AutoVMatrix(specification="letters all normalize");

# PP< Splitter >: The splitter to use to generate one or several train/test tuples from the dataset.
splitter = TrainTestSplitter(test_fraction=.10) ;

# TVec< string >: A list of global statistics we are interested in.
# These are strings of the form S1[S2[dataset.cost_name]] where:
#   - dataset is train or test1 or test2 ... (train being 
#     the first dataset in a split, test1 the second, ...) 
#   - cost_name is one of the training or test cost names (depending on dataset) understood 
#     by the underlying learner (see its getTrainCostNames and getTestCostNames methods) 
#   - S1 and S2 are a statistic, i.e. one of: E (expectation), V(variance), MIN, MAX, STDDEV, ... 
#     S2 is computed over the samples of a given dataset split. S1 is over the splits. 
statnames = [ "train." "" ]
 ;

# bool: If true, the computed global statistics specified in statnames will be saved in global_stats.pmat 
# and the corresponding per-split statistics will be saved in split_stats.pmat 
# For reference, all cost names (as given by the learner's getTrainCostNames() and getTestCostNames() ) 
# will be reported in files train_cost_names.txt and test_cost_names.txt
report_stats = 1  ;

# bool: If true, this PTester object will be saved in its initial state in tester.psave 
# Thus if the initial .plearn file gets lost, or modified, we can always see what this tester was.
save_initial_tester = 1  ;

# bool: If true, stat collectors for split#k will be saved in Split#k/train_stats.psave and Split#k/test#i_stats.psave
save_stat_collectors = 1  ;

# bool: If true, the final trained learner for split#k will be saved in Split#k/final_learner.psave
save_learners = 1  ;

# bool: If true, the initial untrained learner for split#k (just after forget() has been called) will be saved in Split#k/initial_learner.psave
save_initial_learners = 0  ;

# bool: If true, the data set generated for split #k will be saved as Split#k/training_set.psave Split#k/test1_set.psave ...
save_data_sets = 0  ;

# bool: If true, the outputs of the test for split #k will be saved in Split#k/test#i_outputs.pmat
save_test_outputs = 0  ;

# bool: If true, the costs of the test for split #k will be saved in Split#k/test#i_costs.pmat
save_test_costs = 0  ;

# bool: If true, each learner to be trained will have its experiment directory set to Split#k/LearnerExpdir/
provide_learner_expdir = 0  ;

);

****************************************************************** 
** Subclasses of PTester 
** (only those that can be instantiated) 
****************************************************************** 



------------------------------------------------------------------ 

