# -*-python-*-

p_vmat = Class('PLearn::VMat', 'plearn/vmat/VMat.h')
# We exclude the operator<< and operator>> because wrapping them using
# Boost.Python triggers a compiler bug.
exclude(p_vmat.operator['<<'])
exclude(p_vmat.operator['>>'])

Class('PLearn::PPointable', 'plearn/base/PP.h')
p_object = Class('PLearn::Object', 'plearn/base/Object.h')

set_policy(p_object.deepCopy, return_value_policy(manage_new_object))
set_policy(p_object.getOptionList, return_internal_reference())
set_policy(p_object._getOptionList_, return_internal_reference())
set_policy(p_object._new_instance_for_typemap_, return_value_policy(manage_new_object))

exclude(p_object.operator['<<'])
exclude(p_object.operator['>>'])

# Remove deprecated methods
exclude(p_object.load)
exclude(p_object.save)
exclude(p_object.read)
exclude(p_object.write)
exclude(p_object.oldread)

set_policy(Function('PLearn::newObject', 'plearn/base/Object.h'), return_value_policy(manage_new_object))
set_policy(Function('PLearn::macroLoadObject', 'plearn/base/Object.h'), return_value_policy(manage_new_object))
set_policy(Function('PLearn::loadObject', 'plearn/base/Object.h'), return_value_policy(manage_new_object))

Function('PLearn::getDataSetHelp', 'plearn/db/getDataSet.h')
Function('PLearn::getDataSet', 'plearn/db/getDataSet.h')

# TVec...

p_tvec = Template('PLearn::TVec', 'plearn/math/TVec.h')
exclude(p_tvec.operator['<<'])
exclude(p_tvec.operator['char*'])
# Also exclude these temporarily until we figure out
# how to map them to Python iterators
exclude(p_tvec.begin)
exclude(p_tvec.end)
exclude(p_tvec.top)
exclude(p_tvec.firstElement)
exclude(p_tvec.lastElement)
exclude(p_tvec.front)
exclude(p_tvec.back)
exclude(p_tvec.first)
exclude(p_tvec.last)
exclude(p_tvec.data)

p_tvec('double')
p_tvec('float')

# Learners...

p_plearner = Class('PLearn::PLearner', 'plearn_learners/generic/PLearner.h')

set_policy(p_plearner.deepCopy, return_value_policy(manage_new_object))
set_policy(p_plearner.getOptionList, return_internal_reference())
set_policy(p_plearner._getOptionList_, return_internal_reference())
set_policy(p_plearner._new_instance_for_typemap_, return_value_policy(manage_new_object))
exclude(p_plearner.operator['<<'])
exclude(p_plearner.operator['>>'])

p_constantregressor = Class('PLearn::ConstantRegressor',
                            'plearn_learners/regressors/ConstantRegressor.h')
set_policy(p_constantregressor.deepCopy, return_value_policy(manage_new_object))
set_policy(p_constantregressor.getOptionList, return_internal_reference())
set_policy(p_constantregressor._getOptionList_, return_internal_reference())
set_policy(p_constantregressor._new_instance_for_typemap_, return_value_policy(manage_new_object))
exclude(p_constantregressor.operator['<<'])
exclude(p_constantregressor.operator['>>'])
