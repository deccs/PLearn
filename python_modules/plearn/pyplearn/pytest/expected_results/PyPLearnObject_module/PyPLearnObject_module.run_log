---
PyPLearnObject.py builtin test/tutorial.
---
PyPLearnObject(  )
+++ Management of 'Defaults'
	Bidon( allo = "allo" )
	Bidon( allo = "allo", hi = "hi" )
or
	Bidon( allo = "allo", hi = "hi" )
and its also possible to add members within the 
constructor's keyword arguments
	Bidon( allo = "allo", hi = "hi", from_ctor = "some other member" )

+++ A major difference with the prior version when inheriting:
PyPLearnObject constructor.
        
        Previously, the syntax was::
        
            class InheritedDefaults:
                some_default_int = 10
        
            class Inherited( PyPLearnObject ):            
                def __init__(self, defaults=InheritedDefaults, **overrides):
                    PyPLearnObject.__init__(self, defaults, overrides)
                    some_other_things()
        
        where the double stars before I{overrides} were only in the
        declaration. Also note that a class was provided as default
        value to the I{defaults} argument.
        
        Please note that the proper way to override the
        L{PyPLearnObject} constructor is::
        
            class Inherited( L{PyPLearnObject} ):
                class Defaults:
                    some_default_int = 10
                    
                def __init__(self, defaults=None, **override):
                    L{PyPLearnObject}.__init__(self, defaults, **overrides)
                    some_other_things()
        
        Note the double stars before I{overrides} both in the
        declaration AND the forwarding.  Also, the I{defaults}
        argument takes I{None} as default instead of a classname.
        

+++ Testing 'frozen' behaviour
Default behavior: Add failed as expected.

NotFrozen( add_member = "added" )

+++ Classmethod classname()
Classname: PyPLearnObject
Classname from instance: PyPLearnObject

