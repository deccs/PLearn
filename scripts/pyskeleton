#!/usr/bin/env python

# pyskeleton
# A script to make skeletons of usual PLearn classes

# Copyright (C) 2001 Pascal Vincent
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#   3. The name of the authors may not be used to endorse or promote
#      products derived from this software without specific prior written
#      permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
#  NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  This file is part of the PLearn library. For more information on the PLearn
#  library, go to the PLearn Web site at www.plearn.org

import sys, os, string

args = sys.argv[:]
del args[0] # ignore program name

baseclasses = ['Learner']

if len(args)<2 or args[0] not in baseclasses:
    print """
Usage: pyskeleton <base_class> <name_of_your_derived_class>
       Will generate skeleton .h and .cc files for your new class, 
       derived form the base_class.
Currently supported base classes are: """
    print string.join(baseclasses,' ')
    sys.exit()
  
baseclass = args[0]
userclass = args[1]

hfiles = {
    'Learner': """

// -*- C++ -*-

// PLearn (A C++ Machine Learning Library)
// 
// Copyright (C) *YEAR* *AUTHOR(S)* 
// ...
// Copyright (C) *YEAR* *AUTHOR(S)* 
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
// 
//  3. The name of the authors may not be used to endorse or promote
//     products derived from this software without specific prior written
//     permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// This file is part of the PLearn library. For more information on the PLearn
// library, go to the PLearn Web site at www.plearn.org

/* *******************************************************      
   * $Id: pyskeleton,v 1.1 2002/07/30 04:06:40 plearner Exp $
   * This file is part of the PLearn library.
   ******************************************************* */

/*! \\file PLearnLibrary/PLearnAlgo/%(userclass)s.h */

#ifndef %(userclass)s_INC
#define %(userclass)s_INC

#include "Learner.h"

namespace PLearn <%%
using namespace std;

class %(userclass)s: public Learner
{
protected:
  // *********************
  // * protected options *
  // *********************

  // ### declare protected option fields (such as learnt parameters) here
  // ...
    
public:

  typedef Learner inherited;

  // ************************
  // * public build options *
  // ************************

  // ### declare public option fields (such as build options) here
  // ...

  // ****************
  // * Constructors *
  // ****************

  // Default constructor, make sure the implementation in the .cc
  // initializes all fields to reasonable default values.
  %(userclass)s();


  // ******************
  // * Object methods *
  // ******************

private: 
  //! This does the actual building. 
  // (Please implement in .cc)
  void build_();

protected: 
  //! Declares this class' options
  // (Please implement in .cc)
  static void declareOptions(OptionList& ol);

public:
  // simply calls inherited::build() then build_() 
  virtual void build();

  //! Provides a help message describing this class
  virtual string help() const;

  //! Transforms a shallow copy into a deep copy
  virtual void makeDeepCopyFromShallowCopy(map<const void*, void*>& copies);

  //! Declares name and deepCopy methods
  DECLARE_NAME_AND_DEEPCOPY(%(userclass)s);

  // *******************
  // * Learner methods *
  // *******************

  // trains the model
  virtual void train(VMat training_set); 

  // computes the ouptu of a trained model
  virtual void use(const Vec& input, Vec& output);
   
};

// Declares a few other classes and functions related to this class
  DECLARE_OBJECT_PTR(%(userclass)s);
  
%%> // end of namespace PLearn

#endif
"""
}

ccfiles = {
    'Learner': """
// -*- C++ -*-

// PLearn (A C++ Machine Learning Library)
// Copyright (C) 1998 Pascal Vincent
// Copyright (C) 1999,2000 Pascal Vincent, Yoshua Bengio and University of Montreal
//
// This file is part of the PLearn Library. This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation, version 2.
// 
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this library; see the file GPL.txt  If not, write to the Free
// Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// As a special exception, you may compile and link this library with files
// not covered by the GNU General Public License, and distribute the resulting
// executable file under the terms of your choice, without the requirement to
// distribute the complete corresponding source code, provided you have
// obtained explicit written permission to do so from Pascal Vincent (primary
// author of the library) or Yoshua Bengio or the University of Montreal.
// This exception does not however invalidate any other reasons why the
// executable file might be covered by the GNU General Public License.
//
// See the following URL for more information on PLearn:
// http://plearn.sourceforge.net 

 

/* *******************************************************      
   * $Id: pyskeleton,v 1.1 2002/07/30 04:06:40 plearner Exp $
   * AUTHORS: ...
   * This file is part of the PLearn library.
   ******************************************************* */

#include "%(userclass)s.h"

namespace PLearn <%%
using namespace std;

%(userclass)s::%(userclass)s() 
  :Learner( /* ### inputsize */ 0, /* targetsize */ 0, /* outputsize */ 0)
/* ### Initialise all other fields here */
  {
    // ### Possibly call setTestCostFunctions(...) to define the cost functions 
    // ### you are interested in (these are used by the default useAndCost() method,
    // ### which is called by the default test() method).
    // ### ex: 
    // setTestCostFunctions(squared_error());

    // ### You may also call setTestStatistics(...) if the Learner-default 'mean' and 'stderr' 
    // ### statistics are not appropriate...

    // ### You may or may not want to call build_() to finish building the object
    // build_();
  }


  IMPLEMENT_NAME_AND_DEEPCOPY(%(userclass)s);

  void %(userclass)s::declareOptions(OptionList& ol)
  {
    // ### Declare all of this object's options here
    // ### For the "flags" of each option, you should typically specify  
    // ### one of OptionBase::buildoption, OptionBase::learntoption or 
    // ### OptionBase::tuningoption. Another possible flag to be combined with
    // ### is OptionBase::nosave

    // ### ex:
    // declareOption(ol, "myoption", &%(userclass)s::myoption, OptionBase::buildoption,
    //               "Help text describing this option");
    // ...

    // Now call the parent class' declareOptions
    inherited::declareOptions(ol);
  }

  string %(userclass)s::help() const
  {
    // ### Provide some useful description of what the class is ...
    return 
      "%(userclass)s implements a ..."
      + optionHelp();
  }

  void %(userclass)s::build_()
  {
    // ### This method should do the real building of the object,
    // ### according to set 'options', in *any* situation. 
    // ### Typical situations include:
    // ###  - Initial building of an object from a few user-specified options
    // ###  - Building of a "reloaded" object: i.e. from the complete set of all serialised options.
    // ###  - Updating or "re-building" of an object after a few "tuning" options have been modified.
    // ### You should assume that the parent class' build_() has already been called.
  }

  // ### Nothing to add here, simply calls build_
  void %(userclass)s::build()
  {
    inherited::build();
    build_();
  }


  void %(userclass)s::train(VMat training_set)
  { 
    if(training_set->width() != inputsize()+targetsize())
      PLERROR("In %(userclass)s::train(VMat training_set) training_set->width() != inputsize()+targetsize()");

    setTrainingSet(training_set);

    // ### Please implement the actual training of the model.
    // ### For models with incremental training, to benefit 
    // ### from the "testing during training" and early-stopping 
    // ### mechanisms, you should make sure to call measure at 
    // ### every "epoch" (whatever epoch means for your algorithm).
    // ### ex:
    // if(measure(epoch,costvec)) 
    //     break; // exit training loop because early-stopping contditions were met
  }

  void %(userclass)s::use(const Vec& input, Vec& output)
  {
    // ### You should redefine this method to compute the output
    // ### corresponfding to a new test input.
  }

  void %(userclass)s::makeDeepCopyFromShallowCopy(map<const void*, void*>& copies)
  {
    Learner::makeDeepCopyFromShallowCopy(copies);

    // ### Call deepCopyField on all "pointer-like" fields 
    // ### that you wish to be deepCopied rather than 
    // ### shallow-copied.
    // ### ex:
    // deepCopyField(trainvec, copies);

    // ### Remove this line when you have fully implemented this method.
    PLERROR("%(userclass)s::makeDeepCopyFromShallowCopy not fully (correctly) implemented yet!");
  }

%%> // end of namespace PLearn
"""
    }

hfname = userclass+'.h'
print "Writing file " + hfname + "..."
hf = open(hfname,"a")
hf.write(hfiles[baseclass] % vars())
hf.close()

ccfname = userclass+'.cc'
print "Writing file " + ccfname + "..."
ccf = open(ccfname,"a")
ccf.write(ccfiles[baseclass] % vars())
ccf.close()

