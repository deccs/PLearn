#!/usr/bin/env python2.3

# pyskeleton
# A script to make skeletons of usual PLearn classes

# Copyright (C) 2001 Pascal Vincent
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#   3. The name of the authors may not be used to endorse or promote
#      products derived from this software without specific prior written
#      permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
#  NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  This file is part of the PLearn library. For more information on the PLearn
#  library, go to the PLearn Web site at www.plearn.org

import sys, os, string, popen2
import plearn.utilities.ppath   as ppath 
import plearn.utilities.toolkit as toolkit
from time import time, localtime

args = sys.argv[:]
del args[0] # ignore program name

homedir               = ppath.ppath('HOME')
plearndir             = ppath.ppath('PLEARNDIR')

default_skeleton_dir  = os.path.join( plearndir, 'scripts/Skeletons' )
skeleton_directories  = string.split( os.getenv('SKELETONS_PATH', default_skeleton_dir), ':' )

class Baseclasses:
    def __init__(self, directories):
        self.dir_to_classes = {}
        self.classes_to_dir = {}

        for directory in directories:
            if not os.path.exists(directory):
                continue

            self.dir_to_classes[ directory ] = []

            dirlist = os.listdir(directory)            
            for fname in dirlist:
                if fname.endswith('.h'):
                    baseclass = fname[:-2]
                    self.dir_to_classes[ directory ].append( baseclass )
                    self.classes_to_dir[ baseclass ] = directory
                    
    def classes(self, directory=None):
        if self.dir_to_classes.has_key( directory ):
            return self.dir_to_classes[directory]
        return self.classes_to_dir.keys()

    def path(self, baseclass, ext):
        assert ext in ['.h', '.cc']
        return os.path.join( self.classes_to_dir[baseclass],
                             baseclass+ext
                             )
        
    def __str__(self):
        lines = []
        for directory in self.dir_to_classes.iterkeys():
            lines.append( "- From %s\n" % directory )

            classes = self.classes(directory)
            classes.sort()
            classes_str = toolkit.boxed_string_from_words( classes,
                                                           60, "    " )
            lines.append( "%s\n" %  classes_str )
                                                          
        return string.join( lines, '\n' )

    def __contains__(self, some_class):
        return self.classes_to_dir.has_key(some_class)
    
baseclasses = Baseclasses( skeleton_directories )
usage = """
Usage: pyskeleton <base_class> <name_of_your_derived_class>
       Will generate skeletons .h and .cc files for your new class, 
       derived form the base_class, based on corresponding models in
       your skeleton directories. You can easily add new 'models' in
       these directories and even add directories in your SKELETONS_PATH.
       
Currently supported base classes are: """

if len(args)<2 or args[0] not in baseclasses:
    print usage
    print baseclasses
    sys.exit()
  
baseclass = args[0]
userclass = args[1]

# a few useful functions
def abspath(mypath):
    """returns the absolute path of the file, with a hack to remove the leading /export/ that causes problems at DIRO"""    
    p = os.path.abspath(mypath)    # python 5.1 does not have abspath
    rmprefix = '/export/'
    lenprefix = len(rmprefix)
    if len(p)>lenprefix:
        if p[0:lenprefix]==rmprefix :
            p = '/'+p[lenprefix:]
    return p

def locate_header_file():
    """returns the path for the header model file"""
    directory = os.getcwd()
    while os.path.isdir(directory) and os.access(directory,os.W_OK) and directory!='/':
        modelpath = os.path.join(directory,'.pyskeleton_header')
        if os.path.isfile(modelpath):
            return modelpath
        directory = abspath(os.path.join(directory,'..'))
    return os.path.join( default_skeleton_dir, '.pyskeleton_header' )


def fingername():
    username = '*AUTHOR(S)*'    
    r, w, e = popen2.popen3("sh -c 'finger `whoami`'")
    e.readlines()
    fing = r.readlines()
    r.close()
    e.close()
    w.close()
    fing = fing[0]
    start = string.find(fing,'Name: ')
    if start>0:
        username = string.strip(fing[start+6:])

    return username

global_year = localtime(time())[0]

global_author = '*AUTHOR(S)*'    
try:
    global_author = fingername()
except:
    pass

hmf = open(locate_header_file())
header = hmf.read()
hmf.close()

#print header
#sys.exit()

# Locate the base class skeleton in the Skeletons directory and write the class

def generate(baseclass, userclass, ext):
    """Generates a userclass+ext file based on the baseclass+ext file to be found in the scripts/Skeleton directory"""
    year = global_year  # so that it appears in vars()
    author = global_author # so that it appears in vars()
    skeletonpath = baseclasses.path(baseclass, ext)
    filename = userclass+ext

    if skeletonpath is None:
        print "-> No Skeletons/" + (baseclass+ext) + ". Won't generate " + filename
    elif os.path.exists(filename):
        print filename + " already exists. Remove it first if you want to regenerate it."
    else:
        skelf = open(skeletonpath)
        text = header%vars() + string.replace(skelf.read(), 'DERIVEDCLASS', userclass)        
        skelf.close()
        userf = open(filename, 'w')
        userf.write(text)
        userf.close()
        print 'Wrote ' + filename + ' based on ' + skeletonpath

# Process .h
generate(baseclass, userclass, '.h')
generate(baseclass, userclass, '.cc')

