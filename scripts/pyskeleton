#!/usr/bin/env python

# pyskeleton
# A script to make skeletons of usual PLearn classes

# Copyright (C) 2001 Pascal Vincent
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#   3. The name of the authors may not be used to endorse or promote
#      products derived from this software without specific prior written
#      permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
#  NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  This file is part of the PLearn library. For more information on the PLearn
#  library, go to the PLearn Web site at www.plearn.org

import sys, os, string, popen2
from time import time, localtime

args = sys.argv[:]
del args[0] # ignore program name

homedir = os.environ['HOME']
plearndir = os.environ.get('PLEARNDIR', os.path.join(homedir,'PLearn'))
skeldir = os.path.join(plearndir,'scripts/Skeletons')
baseclasses = map( lambda s: s[:-2], filter(lambda s: s[-2:]=='.h', os.listdir(skeldir)) )

if len(args)<2 or args[0] not in baseclasses:
    print """
Usage: pyskeleton <base_class> <name_of_your_derived_class>
       Will generate skeleton .h and .cc files for your new class, 
       derived form the base_class, based on corresponding models in
       the """ + skeldir + """ directory.
       (You can easily add new 'models' in this directory.)
       
Currently supported base classes are: """
    print string.join(baseclasses,' ')
    sys.exit()
  
baseclass = args[0]
userclass = args[1]

def fingername():
    username = '*AUTHOR(S)*'    
    r, w, e = popen2.popen3("sh -c 'finger `whoami`'")
    e.readlines()
    fing = r.readlines()
    r.close()
    e.close()
    w.close()
    fing = fing[0]
    start = string.find(fing,'Name: ')
    if start>0:
        username = string.strip(fing[start+6:])

    return username

year = localtime(time())[0]

author = '*AUTHOR(S)*'    
try:
    author = fingername()
except:
    pass

header = """
// -*- C++ -*-

// %(filename)s
//
// Copyright (C) """ + str(year) + '  ' + author + """ 
// 
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//  1. Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
// 
//  2. Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in the
//     documentation and/or other materials provided with the distribution.
// 
//  3. The name of the authors may not be used to endorse or promote
//     products derived from this software without specific prior written
//     permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
// NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
// LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 
// This file is part of the PLearn library. For more information on the PLearn
// library, go to the PLearn Web site at www.plearn.org

/* *******************************************************      
   * $Id: pyskeleton,v 1.4 2003/05/10 05:12:30 plearner Exp $ 
   ******************************************************* */

/*! \\file %(filename)s */
"""

# Locate the base class skeleton in the Skeletons directory and write the class

def generate(baseclass, userclass, ext):
    """Generates a userclass+ext file based on the baseclass+ext file to be found in the scripts/Skeleton directory"""
    global year, author
    skeletonpath = os.path.join(skeldir, baseclass+ext)
    filename = userclass+ext
    if not os.path.exists(skeletonpath):
        print "-> No " + skeletonpath + " Won't genrate " + filename
    elif os.path.exists(filename):
        print filename + " already exists. Remove it first if you want to regenerate it."
    else:
        skelf = open(skeletonpath)
        text = header%vars() + string.replace(skelf.read(), 'DERIVEDCLASS', userclass)        
        skelf.close()
        userf = open(filename, 'w')
        userf.write(text)
        userf.close()
        print 'Wrote ' + filename + ' based on ' + skeletonpath

# Process .h
generate(baseclass, userclass, '.h')
generate(baseclass, userclass, '.cc')

