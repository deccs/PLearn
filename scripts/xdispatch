#!/usr/bin/env python
#
# xdispatch: dispatch utility for parallel PLearn
#
# Copyright 2007, Apstat Technologies, inc.
# All rights reserved.

# Author: Xavier Saint-Mleux

from optparse import OptionParser
from plearn.parallel.dispatch import *
import tempfile
import os
import time


usage= """
Usage: xdispatch -s<nb_servers> [-l<max_load>] -- <plearn_command> <plearn_args>
       Will launch nb_servers remote servers on machines with a load no
       more than max_load for the last minute (default=1.0).
       plearn_command is your favorite version of plearn.
       Each server (slave) is launched like:
         ssh <remote_host> <plearn_command> server 0
       The master is launched like (on the local host):
         <plearn_command> --servers <serv_file> <plearn_args>
       where serv_file is a file that contains one line for each
       of the running slave servers, with hostname, port and pid.
       Once the master returns, all slaves are killed.
"""

#
# Main
#

def main():
    parser = OptionParser()
    parser.add_option('-n', '--num-available-machines',
                      help='Prints the number of available machines',
                      action='store_true', default=False)

    parser.add_option('-l', '--max-load', type= "float",
                      dest= "max_load",
                      help='Sets the default maximum load',
                      default=1.0)

    parser.add_option('-s', '--nb-servers', type="int",
                      dest= "nb_servers",
                      help='Number of servers to launch (maximum)',
                      default=3)
   
    (options, args) = parser.parse_args()

    set_logdir('/tmp/xdispatch-log/')

    Task._max_load= options.max_load

    if options.num_available_machines:
        print Task.availableMachinesCount()
    elif args:
        try:
            plearn_command= args[0]
            for i in xrange(options.nb_servers):
                launch_server( ['time',plearn_command, 'server', '0'] )

            tf, fname= tempfile.mkstemp(suffix= '.plserv', prefix= '.plserv_', dir= '/tmp/')

            for si in Task.getLaunchedServersInfo():
                print si
                os.write(tf, "%s %d %d\n"%si)
            os.close(tf)

            print "Servers listed in: ", fname
            cmd= plearn_command + ' --servers ' + fname + ' ' + ' '.join(args[1:])
            print cmd

            os.system(cmd)

        finally:
            Task.kill_all_tasks()
    else:
        print usage

if __name__ == '__main__':
    main()
