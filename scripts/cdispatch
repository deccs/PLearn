#!/usr/bin/env python
import sys,os,re,time,datetime

ScriptName="launchdbi.py"
ShortHelp='Usage: cdispatch [--help|-h] [--dbilog|*--nodbilog] [--cluster[=nb_process]|--local[=nb_process]|--bqtools[=nb_process]|*--condor] [--nb_proc=nb_process] [--test] [--long] [--micro[=nb_batch]] [--duree=X] [--wait] [--req="CONDOR_REQUIREMENT"] [--32|--64|--3264] {--file=FILEPATH | <command-template>} \n An * before -- mean that it is the default'
LongHelp="""
Dispatches jobs with dbi.py. dbi allow to dispatch jobs on condor, cluster, local, ssh and bqtools.

%s

option not explained:
  --help, -h
  --dbilog, --nodbilog
  --cluster,--local,--bqtools,--condor
  --file=FILEPATH
  
common option:
  The '--test' option make that cdispatch generate the file $ScriptName, but do not execute it. That way you can see what cdispatch generate. Also, this file make dbi in test mode, so dbi do not execute automaticaly the experiment il $ScriptName is executer
local, bqtools and cluster parameter:
  --nb_proc=nb_process, give the maximum number of concurent jobs running
    --local=X is the same as --local --nb_proc=X
    --cluster=X is the same as --cluster --nb_proc=X
    --bqtools=X is the same as --bqtools --nb_proc=X


bqtools and cluster option:
  The '--duree' option tell the maximum length of the jobs. The have the cluster syntaxe of accepted value 'cluster --help'. The bqtools syntaxe is '--duree=12:13:15'. This give 12 hours, 13 minutes and 15 seconds

bqtools only option:
  The '--micro[=nb_batch]' option can be used with BqTools when launching many jobs that
  have a very short duration. This may prevent some queue crashes. The nb_batch value
  is the number of experience to group together in a batch.(default 20)

  The '--long' option must be used with BqTools to launch jobs whose duration
  is more than 5 days. The maximum duration of a job will be either the
  BQ_MAX_JOB_DURATION environment variable (in the form hour:min:sec) if it is
  set, and 1200:00:00 (50 days) otherwise.
  Since long jobs are launched on a different queue with few nodes, please make
  sure you are not using too many nodes at once.
  If this option is not set, the maximum duration of each job will be 120 hours
  (5 days).

cluster only option:
  The '--wait' is transfered to cluster. This must be enabled if their is not nb_process available compute node. Otherwise when their is no compute node available, the launch of that command fail.
  The '--3264', '--32' or '--64' tell the type of cpu the compute node must have to execute the commands.

condor only option:
  The '--req=\"CONDOR_REQUIREMENT\"' option make that cdispatch send additional option to DBI that will be used to generate addtional requirement for condor. CONDOR_REQUIREMENT must follow the syntax of requirement for condor with one exception. The symbol '\"' must be escaped 3 times! So the requirement (Machine == \"computer.example.com\") must be writed like that:

  cdispatch \"--req=Machine==\\\\\\\"computer.example.com\\\\\\\"\"
     or
  cdispatch '--req=Machine==\\\"computer.example.com\\\"' 


where <command-template> is interpreted as follows: the first argument
is the <command> above, and the rest are interpreted as <arguments>.
The arguments may contain segments of the form {{a,b,c,d}}, which trigger
parallel dispatch: a separate 'cluster --execute' command is issued for
the rest of the command template, the first time with value a, the second
time with value b, etc.  For example, the command (NOTE: THERE MUST NOT
BE ANY SPACES WITHIN THE 'numhidden={{5,10,25}}' part and the quotes are
important to avoid shell misinterpretation) :

  dbidispatch aplearn myscript.plearn 'numhidden={{5,10,25}}'

is equivalent to launching three jobs in parallel on the cluster:

  aplearn myscript.plearn numhidden=5
  aplearn myscript.plearn numhidden=10
  aplearn myscript.plearn numhidden=25

If several arguments contain {{ }} forms, all combinations of arguments
are taken, and the jobs are all launched in parallel.  For instance

  dbidispatch aplearn myscript.plearn 'numhidden={{10,25}}' 'wd={{0.01,0.001}}'

is equivalent to:

  aplearn myscript.plearn numhidden=10 wd=0.01
  aplearn myscript.plearn numhidden=10 wd=0.001
  aplearn myscript.plearn numhidden=25 wd=0.01
  aplearn myscript.plearn numhidden=25 wd=0.001

If the optinal parameter '--file=FILEPATH' is set, the script will take commands from the file instead of taking one as parameter. This file must have one command to execute by line and each of them will be expended.

cdispatch --test --file=tests

In the file, there must not be double quotes around the {{}} as they are for the shell and if the command is in the file, they are not interpreted by the shell.
"""%ShortHelp

if len(sys.argv) == 1:
    print ShortHelp
    sys.exit(1)
optionargs = []
otherargs = []
FILE = ""
dbi_param={}

for argv in sys.argv[1:]:

    if argv == "--help" or argv == "-h":
        print LongHelp
        sys.exit(1)
    elif argv == "--nodbilog":
        dbi_param["dolog"]=False
    elif argv == "--dbilog":
        dbi_param["dolog"]=True
    elif argv.startswith("--bqtools"):
        optionargs.append(argv[2:9])
        if len(argv)>9:
            assert(argv[9]=="=")
            dbi_param["nb_proc"]=argv[10:]
        dbi_param["file_redirect_stderr"]=True
        dbi_param["file_redirect_stderr"]=True
    elif argv.startswith("--cluster"):
        optionargs.append(argv[2:9])
        if len(argv)>9:
            assert(argv[9]=="=")
            dbi_param["nb_proc"]=argv[10:]
    elif argv == "--condor":
        #it is the default
        optionargs.append(argv[2:])
    elif argv.startswith("--duree="):
        dbi_param["duree"]=argv[8:]
    elif argv.startswith("--local"):
        optionargs.append(argv[2:7])
        if len(argv)>7:
            assert(argv[7]=="=")
            dbi_param["nb_proc"]=argv[8:]
    elif argv.startswith("--nb_proc="):
        dbi_param["nb_proc"]=argv[10:]
    elif argv == "--test":
        dbi_param["test"]=True
    elif argv.startswith("--file="):
        FILE = argv[7:]
        optionargs.append(argv[2:])
    elif argv == "--32"  or argv == "--64" or argv == "--3264":
        dbi_param["arch"]=argv[2:]
    elif argv == "--wait":
        dbi_param["wait"]=True
    elif argv[0:6] == "--req=":
        dbi_param["requirements"]="\"%s\""%argv[6:]
    elif argv == "--no_clean_up":
        dbi_param["clean_up"]=False
    elif argv == "long":
        dbi_param["long"] = True
    elif argv.startswith("--micro"):
        dbi_param["micro"]=20
        if len(argv)>7:
            assert(argv[7]=="=")
            dbi_param["micro"]=argv[8:]
    elif argv[0:1] == '-':
	print "Unknow parameter (%s)",argv
	print ShortHelp
        sys.exit(1)
    else:
        otherargs.append(argv)
        
if len(otherargs) == 0 and FILE == "":
    print ShortHelp
    sys.exit(1)


if "local" in optionargs and "cluster" in optionargs:
    print "--cluster and --local can't be used together"
    sys.exit(1)

def generate_combination(repl):
    if repl == []:
        return []
    else:
        res = []
        x = repl[0]
        res1 = generate_combination(repl[1:])
        for y in x:
            if res1 == []:
                res.append(y)
            else:
                for r in res1:
                    res.append(y+" "+r)
        return res

def generate_commands(sp):
### Find replacement lists in the arguments
    repl = []
    for arg in sp:
        p = re.compile('\{\{\S*\}\}')
        reg = p.search(arg)
        if reg:
#            print "reg:",reg.group()[2:-2]
            curargs = reg.group()[2:-2].split(",")# if arg =~ /{{(.*)}}/
#            print "curargs:",curargs
            newcurargs = []
            for curarg in curargs:
                new = p.sub(curarg,arg)
#                print "new:",new
                newcurargs.append(new)
            repl.append(newcurargs)
        else:
            repl.append([arg])
#    print "repl: ",repl
    argscombination = generate_combination(repl)
    return argscombination

#generate the command
if FILE != "":
    FD = open(FILE,'r')#|| die "couldn't open the file $FILE!";
    commands=[]
    for line in FD.readlines():
        line = line.rstrip()
	sp = line.split(" ")
        commands+=generate_commands(sp)
    FD.close
else:
    commands=generate_commands(otherargs)

if "cluster" in optionargs:
    launch_cmd='Cluster'
elif "local" in optionargs:
    launch_cmd='Local'
elif "bqtools" in optionargs:
    launch_cmd='bqtools'
else:
    launch_cmd='Condor'

if FILE == "":    
    t = [x for x in sys.argv[1:] if not x[:2]=="--"]
    t[0]=os.path.split(t[0])[1]
    tmp="_".join(t)
    tmp=re.sub( '[^a-zA-Z0-9-.,]', '_', tmp )
    ### We need to remove the symbols "," as this cause trouble with bqtools
    tmp=re.sub( ',', '-', tmp )
    tmp+='_'+str(datetime.datetime.now()).replace(' ','_')
    dbi_param["log_dir"]=os.path.join("LOGS",tmp)
    dbi_param["log_file"]=os.path.join(dbi_param["log_dir"],'log')
else:
    dbi_param["log_dir"]=os.path.join("LOGS",FILE)
    dbi_param["log_file"]=os.path.join(dbi_param["log_dir"],'log')

if "test" in dbi_param:
    print "We generated %s command in the file"% len(commands)
    print "The script %s was not launched"% ScriptName
    SCRIPT=open(ScriptName,'w');
    SCRIPT.write(
"""#! /usr/bin/env python
#%s
from plearn.parallel.dbi import DBI
jobs = DBI([
"""% " ".join(sys.argv))
    for arg in commands:
        cmdstr = "".join(arg);
        SCRIPT.write("   '%s',\n"%cmdstr)
    SCRIPT.write("   ],'%s'"%(launch_cmd))
    for key in dbi_param.keys():
        if isinstance(dbi_param[key],str):
            SCRIPT.write(","+str(key)+"='"+str(dbi_param[key])+"'")
        else:
            SCRIPT.write(","+str(key)+"="+str(dbi_param[key]))
    SCRIPT.write(
""")
jobs.run()
# There is %d command in the script"""%(len(commands)))
        
    SCRIPT.close()
    os.system("chmod +x %s"%(ScriptName));

else:
    print "We generate the DBI object with %s command"%(len(commands))
    from plearn.parallel.dbi import *
    print time.ctime()
    t1=time.time()
    jobs = DBI(commands,launch_cmd,**dbi_param)
    t2=time.time()
    print "it took %f s to create the DBI objects"%(t2-t1)
    jobs.run()
    t3=time.time()
    print "it took %f s to launch all the commands"%(t3-t2)

