#!/usr/bin/env python
import sys,os,re

ScriptName="launchdbi.py"
ShortHelp='Usage: cdispatch [--help|-h] [--log|--nolog] [--cluster|--local] [--test] [--req="CONDOR_REQUIREMENT"] [--file=FILEPATH | <command-template>]'
LongHelp="""
Dispatches jobs with dbi.py. dbi allow to dispatch jobs on condor, cluster, local, ssh and bqtools.

%s

where <command-template> is interpreted as follows: the first argument
is the <command> above, and the rest are interpreted as <arguments>.
The arguments may contain segments of the form {{a,b,c,d}}, which trigger
parallel dispatch: a separate 'cluster --execute' command is issued for
the rest of the command template, the first time with value a, the second
time with value b, etc.  For example, the command (NOTE: THERE MUST NOT
BE ANY SPACES WITHIN THE 'numhidden={{5,10,25}}' part and the quotes are
important to avoid shell misinterpretation) :

  dbidispatch aplearn myscript.plearn 'numhidden={{5,10,25}}'

is equivalent to launching three jobs in parallel on the cluster:

  aplearn myscript.plearn numhidden=5
  aplearn myscript.plearn numhidden=10
  aplearn myscript.plearn numhidden=25

If several arguments contain {{ }} forms, all combinations of arguments
are taken, and the jobs are all launched in parallel.  For instance

  dbidispatch aplearn myscript.plearn 'numhidden={{10,25}}' 'wd={{0.01,0.001}}'

is equivalent to:

  aplearn myscript.plearn numhidden=10 wd=0.01
  aplearn myscript.plearn numhidden=10 wd=0.001
  aplearn myscript.plearn numhidden=25 wd=0.01
  aplearn myscript.plearn numhidden=25 wd=0.001

The optional parameter '--test' make that cdispatch generate the file $ScriptName, but do not execute it. That way you can see what cdispatch generate.

The optional parameter '--req=\"CONDOR_REQUIREMENT\"' make that cdispatch send additional option to DBI that will be used to generate addtional requirement for condor. CONDOR_REQUIREMENT must follow the syntax of requirement for condor with one exception. The symbol '\"' must be escaped 3 times! So the requirement (Machine == \"computer.example.com\") must be writed like that:

cdispatch \"--req=Machine==\\\\\\\"computer.example.com\\\\\\\"\"
or
cdispatch '--req=Machine==\\\"computer.example.com\\\"' 

If the optinal parameter '--file=FILEPATH' is set, the script will take commands from the file instead of taking one as parameter. This file must have one command to execute by line and each of them will be expended.

cdispatch --test --file=tests

In the file, there must not be double quotes around the {{}} as they are for the shell and if the command is in the file, they are not interpreted by the shell.
"""%ShortHelp

if len(sys.argv) == 1:
    print ShortHelp
    sys.exit(1)
optionargs = []
otherargs = []
FILE = ""
REQ = ""
for argv in sys.argv[1:]:

    if argv == "--help" or argv == "-h":
        print LongHelp
        sys.exit(1)
    elif argv == "--nolog":
        optionargs.append(argv[2:])
    elif argv == "--log":
        optionargs.append(argv[2:])
    elif argv == "--cluster" and not "local" in optionargs:
        optionargs.append(argv[2:])
    elif argv == "--local" and not "cluster" in optionargs:
        optionargs.append(argv[2:])
    elif argv == "--test":
        optionargs.append(argv[2:])
    elif argv[0:7] == "--file=":
        FILE = argv[7:]
        optionargs.append(argv[2:])
    elif argv[0:6] == "--req=":
        REQ = argv[6:]
    elif argv[0:1] == '-':
	print "Unknow parameter (%s)",argv
	print ShortHelp
        sys.exit(1)
    else:
        otherargs.append(argv)
        
if len(otherargs) == 0 and FILE == "":
    print ShortHelp
    sys.exit(1)


if "local" in optionargs and "cluster" in optionargs:
    print "--cluster and --local can't be used together"
    sys.exit(1)


SCRIPT=open(ScriptName,'w');
SCRIPT.write(
"""#! /usr/bin/env python
#%s
from plearn.parallel.dbi import DBI
jobs = DBI([
"""% " ".join(sys.argv))
def generate_combination(repl):
    if repl == []:
        return []
    else:
        res = []
        x = repl[0]
        res1 = generate_combination(repl[1:])
        for y in x:
            if res1 == []:
                res.append(y)
            else:
                for r in res1:
                    res.append(y+" "+r)
        return res

def expendAndPrintArgs(sp):
### Find replacement lists in the arguments
    repl = []
    for arg in sp:
        p = re.compile('\{\{\S*\}\}')
        reg = p.search(arg)
        if reg:
#            print "reg:",reg.group()[2:-2]
            curargs = reg.group()[2:-2].split(",")# if arg =~ /{{(.*)}}/
#            print "curargs:",curargs
            newcurargs = []
            for curarg in curargs:
                new = p.sub(curarg,arg)
#                print "new:",new
                newcurargs.append(new)
            repl.append(newcurargs)
        else:
            repl.append([arg])
#    print "repl: ",repl
    argscombination = generate_combination(repl)
    for arg in argscombination:
        cmdstr = "".join(arg);
	SCRIPT.write("   '%s',\n"%cmdstr)
    return len(argscombination)

nbcommand=0
#print the command
if FILE != "":
    FD = open(FILE,'r')#|| die "couldn't open the file $FILE!";
    for line in FD.readlines():
        line = line.rstrip()
	sp = line.split(" ")
	nbcommand+=expendAndPrintArgs(sp)
    FD.close
else:
    nbcommand=expendAndPrintArgs(otherargs)


if "cluster" in optionargs:
    SCRIPT.write("   ],'Cluster'")
elif "local" in optionargs:
    SCRIPT.write("   ],'Local'")
else:
    SCRIPT.write("   ],'Condor'")


if REQ != "":
    SCRIPT.write(", requirements=\"$REQ\"")

if "test" in optionargs:
    SCRIPT.write(", test=True")

if "log" in optionargs:
    SCRIPT.write(", dolog=True")
else:
    SCRIPT.write(", dolog=False")

SCRIPT.write( """)
jobs.run()
# There is %d command in the script"""%(nbcommand))

SCRIPT.close()
os.system("chmod +x %s"%(ScriptName));

print "We generated %s command in the file"% nbcommand

if "test" in optionargs:
    print "The script %s was not launched"% ScriptName
else:
    print "Launching the script %s"% ScriptName
    os.system("./%s"%(ScriptName))


