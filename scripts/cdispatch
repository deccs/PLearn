#!/usr/bin/perl -w

## This file is a modification made to the file apdispatch by Frederic Bastien
## To make it use dbi.py to launch many experience in one command line
## condordispatch

## Copyright (C) 2004 ApSTAT Technologies Inc. 
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions are met:
## 
##  1. Redistributions of source code must retain the above copyright
##     notice, this list of conditions and the following disclaimer.
## 
##  2. Redistributions in binary form must reproduce the above copyright
##     notice, this list of conditions and the following disclaimer in the
##     documentation and/or other materials provided with the distribution.
## 
##  3. The name of the authors may not be used to endorse or promote
##     products derived from this software without specific prior written
##     permission.
## 
## THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
## IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
## OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
## NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
## SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
## TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
## PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
## LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
## NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
## SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
## 
## This file is part of the PLearn library. For more information on the PLearn
## library, go to the PLearn Web site at www.plearn.org

$ScriptName="lauchdbi.py";
$ShortHelp='Usage: dbidispatch [--help|-h] [--test] [--file=FILEPATH] [--req="CONDOR_REQUIREMENT"]<command-template>'."\n";
$LongHelp=<<EOUSAGE;
Usage: dbidispatch [--test] [--file=FILEPATH] [--req="CONDOR_REQUIREMENT"]<command-template>
Dispatches jobs on Condor with dbi.py.  

where <command-template> is interpreted as follows: the first argument
is the <command> above, and the rest are interpreted as <arguments>.
The arguments may contain segments of the form {{a,b,c,d}}, which trigger
parallel dispatch: a separate "cluster --execute" command is issued for
the rest of the command template, the first time with value a, the second
time with value b, etc.  For example, the command (NOTE: THERE MUST NOT
BE ANY SPACES WITHIN THE "numhidden={{5,10,25}}" part and the quotes are
important to avoid shell misinterpretation) :

  dbidispatch aplearn myscript.plearn "numhidden={{5,10,25}}"

is equivalent to launching three jobs in parallel on the cluster:

  aplearn myscript.plearn numhidden=5
  aplearn myscript.plearn numhidden=10
  aplearn myscript.plearn numhidden=25

If several arguments contain {{ }} forms, all combinations of arguments
are taken, and the jobs are all launched in parallel.  For instance

  dbidispatch aplearn myscript.plearn "numhidden={{10,25}}" "wd={{0.01,0.001}}"

is equivalent to:

  aplearn myscript.plearn numhidden=10 wd=0.01
  aplearn myscript.plearn numhidden=10 wd=0.001
  aplearn myscript.plearn numhidden=25 wd=0.01
  aplearn myscript.plearn numhidden=25 wd=0.001

The optional parameter '--test' make that cdispatch generate the file $ScriptName, but do not execute it. That way you can see what cdispatch generate.

The optional parameter '--req="CONDOR_REQUIREMENT"' make that cdispatch send additional option to DBI that will be used to generate addtional requirement for condor. CONDOR_REQUIREMENT must follow the syntax of requirement for condor with one exception. The symbol '"' must be escaped 3 times! So the requirement (Machine == "computer.example.com") must be writed like that:

cdispatch "--req=Machine\\\\\\"computer.example.com\\\\\\""
or
cdispatch '--req=Machine\\"computer.example.com\\"'

It the the optinal parameter '--file=FILEPATH' is set, the script will take commands from the file instead of taking one as parameter. This file must have one command to execute by line and each of them will be expended.

cdispatch --test --file=tests

In the file, their must not be double quote around the {{}} as they are for the shell and if the command is in the file, they are not interpreted by the shell.
EOUSAGE
    ;

if (scalar(@ARGV) == 0) {
    die $ShortHelp;
}

if($ARGV[0] eq "--help" || $ARGV[0] eq "-h"){
    print $LongHelp;
    exit;
}

if ($ARGV[0] eq "--test") {
    $TEST = 1;
    shift;
}else {
    $TEST = 0;
}

if (substr($ARGV[0],0,7) eq "--file=") {
    $FILE = substr($ARGV[0],7);
    shift;
}else {
    $FILE = "";
}

if(scalar(@ARGV) != 0) {
    if (substr($ARGV[0],0,6) eq "--req=") {
	$REQ = substr($ARGV[0],6);
	shift;
    } elsif (substr($ARGV[0],0,1) eq '-'){
	die "Unknow parameter ($ARGV[0]) or wrong parameter order\n";
    } else {
	$REQ = "";
    }
} else {
    $REQ = "";
}
#$command_name = shift;

#print $command_name, "\n";
#for ($i=0; $i < scalar(@ARGV); ++$i) {
#    print "Root = ", $ARGV[$i],
#    "\tArglist = (", join(",",@{$repl[$i]}),")\n";
#}
open(SCRIPT,">$ScriptName");
print SCRIPT "#! /usr/bin/env python\n".
    "from plearn.parallel.dbi import DBI\n".
    "jobs = DBI([\n";
$nbcommand=0;

#print the command
if ($FILE ne "") {
    open (FD, $FILE)|| die "couldn't open the file $FILE!";
    while ($record = <FD>) {
	my @rec = split(" ", $record, 1024);
	$nbcommand+=printAndExpendArgs(@rec);
	}
    
    close(FD);
} else {
    $nbcommand=printAndExpendArgs(@ARGV)
}

print SCRIPT "   ],'Condor'";

if ($REQ ne "") {
    print SCRIPT ", requirements=\"$REQ\"";
}

if ($TEST) {
    print SCRIPT ", test=True";
}

print SCRIPT ")\n".
    "jobs.run() \n".
    "# There is $nbcommand command in the script\n";

close(SCRIPT);
system("chmod +x $ScriptName");

print "We generated $nbcommand command in the file $ScriptName\n";

if ($TEST){
    print "The script $ScriptName was not launched\n";
} else {
    print "Launching the script $ScriptName\n";
    system("./$ScriptName");
}

sub printAndExpendArgs
{
### Find replacement lists in the arguments
    my @repl = ();
    foreach my $arg (@_) {
	$arg =~ /{{(.*)}}/;
	my @curargs = ("");
	@curargs = split(",",$1) if $arg =~ /{{(.*)}}/;
	push @repl, \@curargs;
    }

    my @idx = (0) x @_;
    my $nbcommand=0;
    while ($idx[$#idx] < scalar(@{$repl[$#idx]})) {
	### Compute current argument list
	my @curargs;
	for (my $i=0; $i < scalar(@idx); ++$i) {
	    my $arg = $_[$i];
	    if ($arg =~ /{{.*}}/) {
		my $value = ($repl[$i])->[$idx[$i]];
		$arg =~ s/{{.*}}/$value/;
	    }
	    push @curargs, $arg;
	}
	### Two passes are necessary to properly increment
	for (my $i=0; $i < scalar(@idx); ++$i) {
	    $idx[$i]++;
	    last if $idx[$i] < scalar(@{$repl[$i]}) || $i == $#idx;
	    $idx[$i] = 0;
	}
	
	
	###There are two distinct steps: command creation and command execution
	### Command creation depending on cluster or direct launch:
	$cmdstr = "" . join(" ",@curargs);
	print SCRIPT "'$cmdstr',\n";
	$nbcommand+=1;
    }
    return $nbcommand
}
