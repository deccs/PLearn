#!/usr/bin/env python2.3
import os, sys
import plearn.utilities.toolkit as toolkit

expdir_prefix   = "expdir" 
metainfos_fname = "metainfos.txt"

class Metainfos:
    ## The order is important! See rhs() implementation.
    casts = [ int , float ]
    
    def __init__( self, path, find ):
        self.path  = path
        self.infos = self.parse_file( os.path.join(path, metainfos_fname),
                                      find
                                      )

    def parse_file( self, mipath, find ):
        if not os.path.exists( mipath ):
            return [ "    Experiment still running\n" ]

        infos = []
        for line in file(mipath, "r"):
            lhs_len = line.find( "=" )
            lhs     = line[:lhs_len]

            ## Parsing the right hand side
            rhs     = self.rhs( line[lhs_len+1:] )
            
            if not find or toolkit.find_one(lhs, find) is not None:
                infos.append( ("    %s"%lhs, rhs) )

        return infos

    def rhs( self, rhs_str ):        
        for cast in self.casts:
            try:
                rhs = cast(rhs_str)
                return rhs
            except ValueError:
                pass

        ## Keep it as a string
        return rhs_str.strip('\n')
        
    def __cmp__( self, other ):
        if self.path == other.path:
            return 0
        
        len_o = len(other.infos)
        
        for (i, info) in enumerate(self.infos):
            if i == len_o:
                return 1

            oinfo = other.infos[i]
            if info != oinfo:
                return cmp(info[1], oinfo[1])

        ## Non-Positive ( <= or == )
        return len(self.infos) - len_o
        
    def __str__( self ):
        return "%s\n%s\n" % ( self.path,
                              "\n".join( [ "%s= %s"%(lhs,str(rhs)) for (lhs,rhs) in self.infos ] )
                              )

def start( targets ):
    meta = []
    
    files = os.listdir( os.getcwd() )    
    for fname in files:
        if fname.startswith( expdir_prefix ):
            meta.append( Metainfos(fname, targets) )            

        meta.sort()
    print "\n".join( [ str(m) for m in meta ] )
        
### Main program
start( sys.argv[1:] )
