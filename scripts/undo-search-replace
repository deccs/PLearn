#!/usr/bin/perl

# Scripts that reverts the changes made by the previous call to search-replace
# A script that performs a search-replace in source files 
# recursing through directories, with undo capabilities

# Copyright (C) 1999 Pascal Vincent
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#   3. The name of the authors may not be used to endorse or promote
#      products derived from this software without specific prior written
#      permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
#  NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  This file is part of the PLearn library. For more information on the PLearn
#  library, go to the PLearn Web site at www.plearn.org

# returns full path to all files and subdirectories of this dir
sub lsdir($)
{
    my $dirname = $_[0];     
    opendir(DIR,$dirname) || die "couldn't open directory $dirname";
    @flist = grep(!/^\./,readdir(DIR));
    closedir(DIR);
    return @flist;
}

$user = $ENV{USER};
$home = $ENV{HOME};

chdir("$home/.undo");
# sort in decreasing time order
@undotimes = sort {$b <=> $a} lsdir(".");
$undodir = shift @undotimes;

chdir($undodir) or die "No undo directory containing undo information";
open(UNDOLIST,"undo.list") or die "No undo.list file in $home/.undo/$undodir";
while (<UNDOLIST>)
{
   ($srcfile, $destfile) = split(/\s/);
   print "+ Restoring file $destfile\n";
   `cp $srcfile $destfile`;
   unlink $srcfile;
}
close(UNDOLIST);
unlink("undo.list");
chdir("$home/.undo");
rmdir($undodir);

print "All files were successfully restored \n";


