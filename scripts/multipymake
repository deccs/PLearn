#!/bin/bash
#Script that compile a target multiple time with different compilation option
#To differenciate the different target we create hardlink to the original file
#Exemple: multipymake plearn -float -double
#         This will create the hard link: plearn-float.cc and plearn-double.cc
#         This will execute pymake -float plearn-float.cc and
#                           pymake -double plearn-double.cc
#Exemple2: multipymake plearn "-float -opt" "-double -opt"
#         This will create the hard link: plearn-float_-opt.cc and plearn-double_-opt.cc
#         This will execute pymake -float -opt plearn-float_-opt.cc and
#                           pymake -double -opt plearn-double_-opt.cc
#Exemple3: multipymake -local -vv plearn "-float -opt" "-double -opt"
#         This will create the hard link: plearn-float_-opt.cc and plearn-double_-opt.cc
#         This will execute pymake -local -vv -float -opt plearn-float_-opt.cc and
#                           pymake -local -vv -double -opt plearn-double_-opt.cc

if [ ${HOSTNAME} == "paralisa.iro.umontreal.ca" ]; then
    nbproc=8
elif [ ${HOSTNAME} == "boltzmann.iro.umontreal.ca" ];then
    nbproc=4
else
    nbproc=1
fi
PYMAKEFLAGS=""

for param in "$@"
do
  if [ $1 == "-local" ]; then
      PYMAKEFLAGS=( "${PYMAKEFLAGS[@]}" "-local=$nbproc" )
      shift      
  elif [ ${1:0:1} == "-" ]; then
      PYMAKEFLAGS=( "${PYMAKEFLAGS[@]}" "$1" )
      shift
  else
      break
  fi  
done

echo "PYMAKEFLAGS: ${PYMAKEFLAGS[@]}"

if [ $# -ge 2 ]; then
    BASEPROG=$1
    shift
else
    echo "Usage: $0 [options...] <base_prog> <List of parameter> ..."
    echo "  Options are parameter passed to pymake for all compilation run"
    echo "  Options must start by - (ex: -force, -local, -v, -v1) "
    exit
fi

if [ ! -e ${BASEPROG%.cc}.cc ]; then
    echo "ERROR: The file '${BASEPROG%.cc}.cc' do not exist!"
    exit
fi

for i in "$@";
  do
  iname=${i//\ /_}
  if [ ! -e ${BASEPROG}${iname}.cc ]; then
      ln ${BASEPROG}.cc ${BASEPROG}${iname}.cc
  fi
  echo "Will compile: ${BASEPROG}${iname}.cc"
done

for i in "$@";
  do
  iname=${i//\ /_}
  echo -e "\nCompiling \"${BASEPROG}${iname}.cc\" with command:"
  echo " pymake $i ${PYMAKEFLAGS[@]} ${BASEPROG}${iname}.cc"
  pymake $i ${PYMAKEFLAGS[@]} ${BASEPROG}${iname}.cc
  status=$?
  if [ "$status" != "0" ]; then
      echo "Build failed for $i"
      exit $status
  fi
#  echo -e "Ended with status: $status\n"
done

echo "Time finished:" `date`
