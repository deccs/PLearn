#!/usr/bin/env python

# pypoints
# Copyright (C) 2003 Pascal Vincent
#
#  Redistribution and use in source and binary forms, with or without/u/bengioy/PLearn/scripts/pymake
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#   3. The name of the authors may not be used to endorse or promote
#      products derived from this software without specific prior written
#      permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
#  NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  This file is part of the PLearn library. For more information on the PLearn
#  library, go to the PLearn Web site at www.plearn.org

from Tkinter import *
# import tkFileDialog
import sys

class InputPoints:

    colors = [ "Red", "Green", "Blue", "Yellow", "Magenta", "Cyan" ]
    radius = 4
    canvaswidth = 500
    canvasheight = 500
    xlow = -1.0
    xhigh = 1.0
    ylow = -1.0
    yhigh = 1.0

    def getRealCoords(self, sx,sy):
        """Returns x,y coordinates to put in mat, given sx,sy canvas coordinates expressed in pixels"""
        x = self.xlow + sx*(self.xhigh-self.xlow)/self.canvaswidth
        y = self.yhigh - sy*(self.yhigh-self.ylow)/self.canvaswidth
        return x,y
        
    def __init__(self, master, filepath):
        self.filepath = filepath
        master.title(filepath)
        # make it non resizable
        master.resizable(0,0)
        master.bind("<Key>", self.keypressed)

        ##################
        # The leftbar

        self.currentval = IntVar()
        self.currentval.set(0)

        leftbar = Frame(master, relief=SUNKEN)
        leftbar.grid(row=1, column=0)

        Button(leftbar, text="save", width=6, command=self.pressedSave).grid(row=0, column=0, columnspan=2)
        Button(leftbar, text="clear", width=6, command=self.pressedClear).grid(row=1, column=0, columnspan=2)
        


        Label(leftbar, text="Class").grid(row=2, column=0, sticky=W)
        Label(leftbar, text="Count").grid(row=2, column=1, sticky=W)

        ncols = len(self.colors)
        self.counts = []
        for k in range(0,ncols):
            Radiobutton(leftbar, bg=self.colors[k], activebackground=self.colors[k], text=str(k), variable=self.currentval, value=k).grid(row=3+k, column=0)
            count_k = IntVar()
            count_k.set(0)
            Label(leftbar, textvariable=count_k).grid(row=3+k, column=1)
            self.counts.append(count_k)
            
        #############
        ## The canvas

        canvas = Canvas(master, width=self.canvaswidth, height=self.canvasheight, background="White")
        canvas.grid(row=1,column=1)
        canvas.bind("<Button-1>", self.leftclick)
        canvas.bind("<Button-3>", self.rightclick)
        self.canvas = canvas
        
        ###########

    def pressedClear(self):
        # print "pressed Clear"
        for i in self.canvas.find_all():
            self.canvas.delete(i)
        for c in self.counts:
            c.set(0)
        
    def pressedSave(self):
        # print "pressed Save"
        self.save()

    def leftclick(self,event):
        canvas = event.widget
        x = canvas.canvasx(event.x)
        y = canvas.canvasx(event.y)
        r = self.radius
        v = self.currentval.get()
        # print 'clicked at: ',x,y
        # print canvas.find_closest(x, y)
        canvas.create_oval(x-r,y-r,x+r,y+r, fill=self.colors[v], outline="", tags=str(v))
        # increment count
        self.counts[v].set(self.counts[v].get()+1)

    def rightclick(self,event):
        canvas = event.widget
        x = canvas.canvasx(event.x)
        y = canvas.canvasx(event.y)
        r = 10
        # print 'clicked at: ',x,y
        closest = canvas.find_closest(x, y)[0]
        # print 'Deleting closest: ', closest

        c = int(canvas.gettags(closest)[0])
        self.counts[c].set(self.counts[c].get()-1)        
        canvas.delete(closest)
        
    def keypressed(self,event):
        print 'Pressed: ',event.char        
        val = int(event.char)
        if val>=0 and val<len(self.colors):
            self.currentval.set(val)

    def get_matrix(self):
        """returns a real coordinat ematrix.
        Each row has x, y, c"""
        canvas = self.canvas
        points = canvas.find_all()
        l = len(points)
        w = 3

        m = []
        for p in points:
            co = canvas.coords(p)  # screen coords
            sx = co[0]+self.radius
            sy = co[1]+self.radius
            c = int(canvas.gettags(p)[0])
            x,y = self.getRealCoords(sx,sy)
            m.append((x,y,c))
        return m

    def save(self):
        #if self.filepath=="":
        #    self.filepath=tkFileDialog.asksaveasfilename()

        m = self.get_matrix()
        l = len(m)
        cl_0 = [ (x,y) for x,y,c in m if c==0 ]
        if len(cl_0) == len(m):
            task = 'regression'
            w = 2
            inputsize = 1
            targetsize = 1
            weightsize = 0
        else:
            task = 'classification'
            w = 3
            inputsize = 2
            targetsize = 1
            weightsize = 0

        f = open(self.filepath,'w')
        f.write('#size: ' + `l` + ' ' + `w` + '\n')
        f.write('#sizes: ' + str(inputsize) + ' ' + str(targetsize) + ' ' +str(weightsize) + '\n')

        for x,y,c in m:
            if w==3:
                f.write(`x` + '\t' + `y` + '\t' + `c` + '\n')
            else:
                f.write(`x` + '\t' + `y` + '\n')                

        f.close()

# Main prg

args = sys.argv[:]

if len(args)<2:
    print "Usage: pypoints filename.amat"
    print "Will open a window to input points and save their"
    print "x,y coordinates and classnum in the given file"
    sys.exit()

filepath=args[1]

root = Tk()
app = InputPoints(root,filepath)
root.mainloop()

