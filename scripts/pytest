#!/usr/bin/env python2.3
__cvs_id__ = '$Id: pytest,v 1.29 2004/12/21 16:23:47 dorionc Exp $'

## This statement changes the behavior of the import statement
from plearn.utilities.versionning import *

## Since the main file of the project is the one importing versionning, the
## builtin import statement was in effect when it was loaded. Therefore, it
## must declare itself as a module after the project declaration
project = declare_project("PyTest")
project.declare_module(__name__, __cvs_id__)
project.neglect_module( "plearn.utilities.cvs" )
project.neglect_module( "plearn.utilities.global_variables" )


### When an official build will be ready...
## official_build( "PyTest",
##                 build_version = [1, 0],
##                 fixlevels     = [5, 28, 89]
##                 )

## Shorthand
def pytest_version(extended=False): return project_version("PyTest", extended)

########################################################################
## The project is now declared, imports will be managed properly.
import copy, fpformat, glob, os, shutil, signal, string, sys, time, types

import plearn.utilities.plpath   as plpath
import plearn.utilities.toolkit  as toolkit

from plearn.pytest                       import *
from plearn.utilities.verbosity          import *
from plearn.utilities.global_variables   import *

########################################################################
## Module variables

globalvars.all_roots                      = [ plpath.plearndir,
                                              plpath.lisaplearndir,
                                              plpath.apstatdir      ]
#####################
## Functions are listed by alphabetical order

def dynamic_version_header():
    # Dynamic version header
    c = lambda s: toolkit.centered_square( s, 70 ) 

    vprint( "\n%s\n%s\n%s\n"
            % ( c("PyTest -- version " + pytest_version()),
                c("(c) 2004 Christian Dorion"),
                c("Report problems to dorionc@apstat.com") ),
            1
            )

def mail():
    raise DeprecationWarning
    # Opening the senmail process
    sendmail = Popen3("sendmail -t", True)

    # "Header" of the mail
    sendmail.tochild.write("From: PyTest -compilePLL -mail\n")
    sendmail.tochild.write("Subject: PyTest -- List of files that did not compile\n")
    sendmail.tochild.write("To: " + modes.options.mail + "\n")

    # Changing the mode of the savelog_file from write to read
    savelog_file.close()
    savelog_file = open(modes.options.savelog, "r")

    # "Body" of the mail
    sendmail.tochild.write(savelog_file.read() + "\n")
    sendmail.tochild.write(".\n")

    # "Closing" the mail mode
    sendmail.tochild.close()
    savelog_file.close()
    modes.options.savelog = None # that way the file isn't closed twice
    #                      # ( see end of pytest() )
        
## def pytest_version():
##     version_str = '$Id: pytest,v 1.29 2004/12/21 16:23:47 dorionc Exp $'

##     bflag = "pytest,v"
##     the_year = time.localtime()[0]

##     begin = string.find(version_str, bflag) + len(bflag)
##     end = string.find(version_str, str(the_year))

##     return string.strip( version_str[begin:end] )

###################################################################################
## MAIN PROGRAM
parser = ModeAndOptionParser( usage = "%prog mode [options] target*",
                              version = "%prog " + pytest_version()   )

parser.add_option( '-v', "--verbosity",
                   choices=["0", "1", "2", "3"], default="1",
                   help="Selects the level of verbosity among [0, 1, 2, 3], "
                   "1 being the default value. Level 0 is very quiet, while level 3 "
                   "is mainly intended for debug."
                   )

parser.add_option("--mail", default=None,
                  help='Not supported yet.')

parser.add_option( '--traceback',
                   action="store_true",
                   help="This flag triggers routines to report the traceback of "
                   "PyTestUsageError. By default, only the class's name and meesage "
                   "are reported.",
                   default = False )

modes.add_supported_modes( parser )

modes.options, modes.targets = parser.parse_args()
modes.current_mode           = parser.selected_mode

############################################################
################## Some preprocessing ######################

## Managing the verbosity option.
if hasattr(modes.options, 'verbosity'):
    set_vprint( VerbosityPrint( verbosity        = modes.options.verbosity,
                                default_priority = 0
                                ) )

if ( hasattr(modes.options, 'mail')
     and modes.options.mail is not None ):
    ## vprint.keep_output()
    raise NotImplementedError


############################################################
# Launching the selected mode: The main part of the program
############################################################

## Program name and copyrights with version number
dynamic_version_header()

try:
    modes.current_mode.start()    
    while modes.current_mode.isAlive():
        time.sleep(0.2)
        
except KeyboardInterrupt, kex:
    print "Interupted by user."
    sys.exit()

vprint("\nQuitting PyTest.\n", 1)

## kept = vprint.close()    
## if kept is not None:
##     for k in kept:
##         print k
##     raise NotImplementedError('mail not implemented yet')
    
