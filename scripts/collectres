#!/usr/bin/env python

# pymake
# Copyright (C) 2001 Pascal Vincent
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#
#   3. The name of the authors may not be used to endorse or promote
#      products derived from this software without specific prior written
#      permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
#  NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#  TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#  This file is part of the PLearn library. For more information on the PLearn
#  library, go to the PLearn Web site at www.plearn.org

# see main below for help on using this script
#
# Here is an example of use:
#
# First I found what were the best results for two competing algorithms
# using a collectres sort command:
#
#   collectres letter-sgrad-best-valid-NLL "sort mincol 6 5 4 3" exp/letter-sgrad-*/Split0/LearnerExpdir/Strat0results.pmat
#
#   collectres letter-NatGradBlock-best-valid-NLL "sort mincol 6 5 4 3" exp/letter-NatGradBlock-*/Split0/LearnerExpdir/Strat0results.pmat
#
# Then I copy-pasted the names of the best experiment directories into a collectres plot command
# to display their error curves:
#
#   collectres letter-sgrad-vs-BlockNatGrad-best-valid-NLL-plot "plot cols cpu-sec NLL 0 99 8 6 valid-NLL" exp/letter-sgrad-nout=26-nh1=400-nh2=400-nh3=0-slr=0.01-dc=0-n_train_it=1600001-epoch=16000-seed=2-minibatch=1-20070405:002553/Split0/LearnerExpdir/Strat0results.pmat exp/letter-natgradblockO-nout=26-nh1=400-nh2=400-nh3=0-slr=1e-5-dc=1e-6-n_train_it=1600001-epoch=16000-seed=1-minibatch=30-cov_minibatch=10-lambda=.03-k=3-gamma=.995-ren=1-ngv=0-20070401:220403/Split0/LearnerExpdir/Strat0results.pmat
#
# Finally I could display the curves (after possibly editing the gnuplot command in the output file) using
#
#   smartplot letter-sgrad-vs-BlockNatGrad-best-valid-NLL-plot.eps letter-sgrad-vs-BlockNatGrad-best-valid-NLL-plot
#    

import sys,string
from plearn.vmat.PMat import *
from numarray import *

def selectres(loc_specs,a):
  res = []
  loc_mode = loc_specs[0]
  if loc_mode=="pos":
    row=int(loc_specs[1])
    i=2
    while len(loc_specs[i:])>0:
      res.append(a[row,int(loc_specs[i])])
      i+=1
  elif loc_mode=="mincol":
    mcol = int(loc_specs[1])
    mrow = argmin(a[:,mcol])
    print "found min row = ",mrow," for col ",mcol,", with value=",a[mrow,mcol]
    i=1
    while len(loc_specs[i:])>0:
      res.append(a[mrow,int(loc_specs[i])])
      i+=1
  elif loc_mode=="cols":
    minrow = int(loc_specs[3])
    maxrow = int(loc_specs[4])
    if maxrow<0:
      maxrow = a.shape[0]+maxrow
    maxrow += 1
    i=5
    b=[]
    res = zeros([maxrow-minrow,0])
    while len(loc_specs[i:])>0:
      col = int(loc_specs[i])
      if col<0:
        b = array(range(minrow,maxrow))
      else:
        b=a[minrow:maxrow,col].copy()
      res=concatenate([res,b.resize([maxrow-minrow,1])],1)
      if i==5:
        i=6
      else:
        i+=2 # skip the column name
  else:
    raise ValueError("Invalid <location-spec> mode, expected 'pos', 'mincol', or 'col', got "+loc_mode)    
  return res

def getres(loc_specs,filenames):
  all_results = []
  for filename in filenames:
    try:
      file_res = selectres(loc_specs,
                           load_pmat_as_array(filename))
      all_results.append([file_res,filename])
    except ValueError,v:
      print >>sys.stderr, "caught ValueError exception!"
      print >>sys.stderr, v
  return all_results

def compare_res(x,y):
  if x[0][0]<y[0][0]:
    return -1
  else:
    return 1

def write_array(f,a):
  rows=a.shape[0]
  cols=a.shape[1]
  for r in range(0,rows):
    for c in range(0,cols):
      f.write(str(a[r,c])+" ")
    f.write("\n")

def distinct_experiment_names(filenames):
  splitted_filenames = map(lambda fname: string.split(fname.replace("/","-"),"-"), filenames)
  distinct_names = []
  for splitted_filename in splitted_filenames:
    different_parts = []
    for part in splitted_filename:
      everywhere=True
      for other_splitted_filename in splitted_filenames:
        if not part in other_splitted_filename:
          everywhere=False
          break
      if not everywhere:
        different_parts.append(part)
    distinct_names.append(string.join(different_parts,"-"))
  return distinct_names

def outputres(f,mode,speclist,results):
  if mode=="min":
    minval = 1e36
    minfile = ""
    selected = []
    for res in results:
      print res
      val = res[0][0]
      if val<minval:
        minval=val
        minfile=res[1]
        selected=res[0]
    for v in selected:
      f.write(str(v)+" ")
    f.write(minfile+"\n")
  elif mode=="sort":
    results.sort(compare_res)
    for res in results:
      for v in res[0]:
        f.write(str(v)+" ")
      f.write(res[1]+"\n")
  elif mode=="plot":
    # "plot cols <xlabel> <ylabel> <minrow> <maxrow> <x> <col1> <name1> <col2> <name2> ..." : make a smartplot file with <col1> as y-columns (with legend label <namei>), <x> as x-column (-1 means use the row indices). Axes are labeled <xlabel> and <ylabel>. Use rows from <minrow> to <maxrow> (-1 means last) row inclusively.'
    #
    # build the gnuplot command in the smartplot file header
    filenames = map(lambda res: res[1], results) # collect the filenames from the results list
    distinct_expnames = distinct_experiment_names(filenames) # keep only the option=value parts that are distinct among experiments
    f.write('# to set y on log-scale insert this at the beginning below: set logscale y;\n')
    # speclist has the elements: cols <xlabel> <ylabel> <minrow> <maxrow> <x> <col1> <name1> <col2> <name2> ...
    f.write('#: set xlabel "'+speclist[1]+'"; set ylabel "'+speclist[2]+'"; plot ')
    ncoln=len(speclist)-6 
    ncol=int(ncoln/2)
    if ncol*2!=ncoln:
      ValueError("Invalid plot <spec>: there should be one <name> per <col> to plot")
    ncol+=1 # add 1 for <x>, now this is the number of columns per experiment
    j = 0
    nexp = len(distinct_expnames)
    for expname in distinct_expnames:
      for i in range(0,ncol-1):
        name = speclist[6+i*2+1]
        f.write('@ using '+str(1+j*ncol)+':'+str(2+j*ncol+i)+' with lines t "'+name+'~'+expname+'"')
        if j<nexp-1:
          f.write(",")
      j=j+1
    f.write("\n")
    # concatenate vertically all the results from each experiment into one big array
    arrays = []
    for res in results:
      arrays.append(res[0])
    a = concatenate(arrays,1)
    # write the array to file, without any []
    write_array(f,a)
  else:
    raise ValueError("Invalid <spec> mode, expected 'min', 'sort', or 'plot', got "+mode)


if __name__=='__main__':
  args = sys.argv[:]
  if len(args)==1:
    print "Usage: collectres <outputfile> <spec> <file1.pmat> <file2.pmat> ..."
    print 
    print "The <spec> can be the following (note how the <spec> has to be surrounded by quotes):"
    print '  "min <location-spec>" : identify the mininum of <location-spec> over the <file*.pmat>'
    print '                          prints the values of the selected <location-spec> and the name'
    print '                          of the minimizing <file.pmat> in the <outputfile>.'
    print '  "sort <location-spec>" : make a sorted table of all the values at each <location-spec>'
    print '                           over the <file*.pmat>. The output format is similar to "min" but'
    print '                           it outputs the selected values for all the pmat files, sorted'
    print '                           by the first value in the <location-spec>.'
    print '  "plot cols <xlabel> <ylabel> <minrow> <maxrow> <x> <col1> <name1> <col2> <name2> ..." :'
    print '                          make a smartplot file (see PLearn/scripts/smartplot) with column with'
    print '                          indices <col1> in <fileX.pmat> as y-columns (with legend label <namei>),'
    print '                          column with index <x> as x-column (or -1 for the row indices).'
    print '                          Axes are labeled <xlabel> and <ylabel>. Use rows from <minrow> to <maxrow>'
    print '                          row inclusively (<maxrow> = -1 means last row).'
    print 
    print "In the above, <location-spec> can be the following (but do not surround <location-spec> by quotes):"
    print '  pos <row> <col0> [<col1> <col2>...] : keep only the values at positions'
    print '                          (<row> <col0>) (<row> <col1>) ... in each pmat file, and the first value'
    print '                          may be used to minimize over files in the min command.'
    print '  mincol <mcol> [<col1> <col2>...] : keep only the minimum value in colun <mcol> of each pmat,'
    print '                          keeping track at the same time of the <coli> values at the min-selected row.'
    sys.exit(1)
  output = args[1]
  filenames = args[3:]
  speclist = string.split(args[2])
  mode = speclist[0]
  f=open(output,"w")
  f.write("# "+args[0]+" "+output+" "+'"'+args[2]+'" ')
  for file in filenames:
    f.write(file+" ")
  f.write("\n")
  outputres(f,mode,speclist[1:],getres(speclist[1:],filenames))
  f.flush()
