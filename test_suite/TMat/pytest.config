## 
## Defining the program name. These are MUTUALLY EXCLUSIVE OPTIONS.
## - 'local' means that the program is located in the current directory
## - 'global' means that the program is accessible in the user's path (shell variable).
## - A 'pymake_name' means that the program must be compiled with pymake prior to be ran
## while a simple 'prog_name' may be any shell or python script/command you like.
## The argument must be a string.
## 
## PROG_NAME = { 'local_prog_name':None,
## 'global_prog_name':None,
## 'local_pymake_name':None,
## 'global_pymake_name':None }
## 
## The 'X_options' can be provided only if the PROG_NAME is a 'X_name' and will be used to invoke
## the compilation process. Must be a string or a list of strings. If it's a list, the test will be
## repeated for every options configuration in the list. These are MUTUALLY EXCLUSIVE OPTIONS.
## 
## COMPILE_OPTIONS = { 'pymake_options': None }
## 
## The argument string (or list of strings) to provide the PROG_NAME. Again,
## if the it is a list, the test will be repeated (for every options configuration in
## the COMPILE_OPTIONS list) for every arguments configuration in the 'test_args'
## list.
## 
## The 'local_files' (array of strings) in the 'test_arguments' MUST be highlighted.
## For example
## DefineTest( local_pymake_name='bid',
## pymake_options='-g++ -dbg' 
## test_args='--db data.amat --log log.txt',
## local_files=['data.amat'] )
## means that the data.amat file is located in the test's directory. Note that
## local_files='data.amat' would also be understood by pytest.
## 
## ARGUMENTS = { 'test_args':'',
## 'local_files':[]}
## 
## An array (or a single file name [string]) 'related_files' are to be managed (added or commited)
## under pytest's cvs mode.
## CVS_FILES = { 'related_files':[] }
##
DefineTest( local_pymake_name='test_TVec',
            pymake_options= '-g++ -dbg',
            related_files=['test_TVec.h', 'test_TVec.cc'] )

_mat_dir = 'Matrices'
_matrices = []
def _addToMatrices(matrices, dir, dirlist):
    if string.find(dir, 'CVS') != -1:
        return
    matrices.append(dir)
    for file in dirlist:
        file = os.path.join(dir, file)
        if os.path.isfile(file) and not os.path.isdir(file):
            matrices.append(file)

os.path.walk(_mat_dir, _addToMatrices, _matrices)
#raw_input( _matrices )

_test_TMat_maths_related_files = _matrices
_test_TMat_maths_related_files.append("test_TMat_maths.cc")
_test_TMat_maths_related_files.append("test_TMat_maths.h")

DefineTest( local_pymake_name='test_TMat_maths',
            pymake_options= '-g++ -dbg -throwerrors',
            test_args= os.path.join(test_suite_dir, 'TMat/Matrices/Random'),
            related_files= _test_TMat_maths_related_files )        
