import os.path
from plearn.pyplearn import *

plarg_defaults.data    = "data.amat"

dataset = pl.AutoVMatrix(
    specification = plargs.data,
    inputsize = 4,
    targetsize = 2,
    weightsize = 0
    )

### PCA regression is implemented used a StackedLearner, wherein the first
### level carries out the PCA, and the second level the linear regression.
learner = pl.StackedLearner(
    base_learners = [ pl.PCA(ncomponents = 2,
                             normalize = 1,
                             normalize_warning = 0,
                             algo = "classical") ],
    combiner = pl.LinearRegressor(),
    precompute_base_learners_output = 1)

splitter = pl.FractionSplitter(
    splits = TMat(1,2, [ (0,0.75) , (0.75,1) ])
    )

tester = pl.PTester(
    expdir = plargs.expdir,
    dataset = dataset,
    splitter = splitter,
    learner = learner,
    statnames = ['E[train.E[mse]]', 'E[train.E[aic]]', 'E[train.E[bic]]', 'E[train.E[mabic]]',
                 'E[test.E[mse]]',  'E[test.E[aic]]',  'E[test.E[bic]]',  'E[test.E[mabic]]'],
    provide_learner_expdir = 1,
    save_test_costs = 1,
    save_test_outputs = 1,
    save_test_confidence = 1
    )

def main():
    return tester
