PTester(
expdir = "PYTEST__PL_stacked_pca_regression_script__RESULTS:expdir/" ;
dataset = *1 ->AutoVMatrix(
specification = "data.amat" ;
load_in_memory = 0 ;
writable = 0 ;
length = 200 ;
width = 6 ;
inputsize = 4 ;
targetsize = 2 ;
weightsize = 0 ;
metadatadir = "PYTEST__PL_stacked_pca_regression_script__RESULTS:data.amat.metadata/"  )
;
splitter = *2 ->FractionSplitter(
round_to_closest = 0 ;
splits = 1  2  [ 
0 : 0.75  	0.75 : 1  	
]
 )
;
statnames = 8 [ "E[train.E[mse]]" "E[train.E[aic]]" "E[train.E[bic]]" "E[train.E[mabic]]" "E[test.E[mse]]" "E[test.E[aic]]" "E[test.E[bic]]" "E[test.E[mabic]]" ] ;
statmask = TVec(0 0 *0 )
;
learner = *3 ->StackedLearner(
base_learners = 1 [ *4 ->PCA(
ncomponents = 2 ;
sigmasq = 0 ;
normalize = 1 ;
algo = "classical" ;
horizon = -1 ;
normalize_warning = 0 ;
mu = TVec(0 0 *0 )
;
eigenvals = TVec(0 0 *0 )
;
eigenvecs = 0  0  [ 
]
;
expdir = "" ;
seed = -1 ;
stage = 0 ;
n_examples = -1 ;
inputsize = -1 ;
targetsize = -1 ;
weightsize = -1 ;
forget_when_training_set_changes = 0 ;
nstages = 1 ;
report_progress = 1 ;
verbosity = 1 ;
oldest_observation = -1  )
] ;
combiner = *5 ->LinearRegressor(
include_bias = 1 ;
cholesky = 1 ;
weight_decay = 0 ;
output_learned_weights = 0 ;
weights = 0  0  [ 
]
;
AIC = nan ;
BIC = nan ;
resid_variance = TVec(0 0 *0 )
;
expdir = "" ;
stage = 0 ;
n_examples = -1 ;
inputsize = -1 ;
targetsize = -1 ;
weightsize = -1 ;
forget_when_training_set_changes = 0 ;
nstages = 1 ;
report_progress = 1 ;
verbosity = 1  )
;
default_operation = "mean" ;
splitter = *0 ;
base_train_splitter = *0 ;
train_base_learners = 1 ;
normalize_base_learners_output = 0 ;
precompute_base_learners_output = 1 ;
put_raw_input = 0 ;
share_learner = 0 ;
nsep = 1 ;
expdir = "" ;
seed = -1 ;
stage = 0 ;
n_examples = -1 ;
inputsize = -1 ;
targetsize = -1 ;
weightsize = -1 ;
forget_when_training_set_changes = 0 ;
nstages = 1 ;
report_progress = 1 ;
verbosity = 1  )
;
report_stats = 1 ;
save_initial_tester = 1 ;
save_stat_collectors = 1 ;
save_learners = 1 ;
save_initial_learners = 0 ;
save_data_sets = 0 ;
save_test_outputs = 1 ;
save_test_costs = 1 ;
provide_learner_expdir = 1 ;
train = 1 ;
template_stats_collector = *0 ;
global_template_stats_collector = *0 ;
final_commands = TVec(0 0 *0 )
;
save_test_confidence = 1  )
