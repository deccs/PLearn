*1 ->HyperLearner(
tester = *2 ->PTester(
expdir = "PYTEST__PL_RegressionTree__RESULTS:expdir/Split0/LearnerExpdir/Strat0/Trials2/" ;
dataset = *3 ->SubVMatrix(
parent = *4 ->FileVMatrix(
filename = "PLEARNDIR:examples/data/test_suite/linear_4x_2y.pmat" ;
remove_when_done = -1 ;
track_ref = -1 ;
writable = 0 ;
length = 200 ;
width = 6 ;
inputsize = 6 ;
targetsize = 0 ;
weightsize = 0 ;
extrasize = 0 ;
metadatadir = "PLEARNDIR:examples/data/test_suite/linear_4x_2y.pmat.metadata/"  )
;
istart = 0 ;
jstart = 0 ;
fistart = -1 ;
flength = -1 ;
source = *4  ;
writable = 0 ;
length = 200 ;
width = 6 ;
inputsize = 4 ;
targetsize = 1 ;
weightsize = 0 ;
extrasize = 0 ;
metadatadir = ""  )
;
splitter = *5 ->FractionSplitter(
round_to_closest = 0 ;
splits = 1  3  [ 
(0 , 0.75 )	(0 , 0.75 )	(0.75 , 1 )	
]
 )
;
statnames = 8 [ "E[test1.E[mse]]" "E[test1.E[base_confidence]]" "E[test1.E[base_reward_l2]]" "E[test1.E[base_reward_l1]]" "E[test2.E[mse]]" "E[test2.E[base_confidence]]" "E[test2.E[base_reward_l2]]" "E[test2.E[base_reward_l1]]" ] ;
statmask = []
;
learner = *6 ->RegressionTree(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
maximum_number_of_nodes = 50 ;
compute_train_stats = 1 ;
complexity_penalty_factor = 0 ;
multiclass_outputs = []
;
leave_template = *7 ->RegressionTreeLeave(
id = -1 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *0 ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
sorted_train_set = *8 ->RegressionTreeRegisters(
report_progress = 1 ;
verbosity = 2 ;
tsource = *9 ->MemoryVMatrixNoSave(
source = *10 ->TransposeVMatrix(
source = *11 ->SubVMatrix(
parent = *4  ;
istart = 0 ;
jstart = 0 ;
fistart = -1 ;
flength = -1 ;
source = *4  ;
writable = 0 ;
length = 150 ;
width = 6 ;
inputsize = 4 ;
targetsize = 1 ;
weightsize = 0 ;
extrasize = 0 ;
metadatadir = ""  )
;
writable = 0 ;
length = 6 ;
width = 150 ;
inputsize = 150 ;
targetsize = 0 ;
weightsize = 0 ;
extrasize = 0 ;
metadatadir = ""  )
;
fieldnames = []
;
deep_copy_memory_data = 1 ;
writable = 0 ;
length = 6 ;
width = 150 ;
inputsize = 150 ;
targetsize = 0 ;
weightsize = 0 ;
extrasize = 0 ;
metadatadir = ""  )
;
next_id = 244 ;
leave_register = 150 [ 165 106 64 97 79 105 97 150 99 166 109 58 135 105 153 91 79 106 136 166 91 135 70 121 70 106 166 99 165 75 67 88 97 72 109 64 105 105 165 72 136 79 60 108 165 118 54 154 121 117 97 81 105 88 28 97 99 121 93 79 79 96 165 109 109 96 135 55 54 118 153 109 96 150 55 58 90 63 87 96 105 151 87 87 64 94 135 117 151 121 118 78 70 73 81 78 105 91 153 106 78 97 166 69 91 88 63 121 67 54 69 109 108 121 97 94 64 153 96 99 70 136 121 153 69 60 153 87 99 120 88 88 97 64 109 64 153 121 99 96 109 90 117 121 97 55 105 91 58 150 ] ;
writable = 0 ;
length = 150 ;
width = 6 ;
inputsize = 4 ;
targetsize = 1 ;
weightsize = 0 ;
extrasize = 0 ;
metadatadir = ""  )
;
root = *12 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *13 ->RegressionTreeLeave(
id = 1 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 150 ;
weights_sum = 1.00000000000000244 ;
targets_sum = 2401.03592000000026 ;
weighted_targets_sum = 16.0069061333333345 ;
weighted_squared_targets_sum = 9123.03187068025909 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *13  ;
leave_output = 2 [ 16.0069061333332954 1 ] ;
leave_error = 3 [ 17733.6216534378291 0 2.00000000000000488 ] ;
split_col = 1 ;
split_balance = 10 ;
split_feature_value = 0.036194999999999998 ;
after_split_error = 6339.63754059466464 ;
missing_node = *0 ;
missing_leave = *14 ->RegressionTreeLeave(
id = 2 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *15 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *16 ->RegressionTreeLeave(
id = 3 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 70 ;
weights_sum = 0.466666666666666063 ;
targets_sum = -4527.80441000000064 ;
weighted_targets_sum = -30.185362733333335 ;
weighted_squared_targets_sum = 3339.66270165469314 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *16  ;
leave_output = 2 [ -64.6829201428572276 1 ] ;
leave_error = 3 [ 2774.37058898262922 0 0.933333333333332127 ] ;
split_col = 1 ;
split_balance = 12 ;
split_feature_value = -0.796699999999999964 ;
after_split_error = 791.868290498600572 ;
missing_node = *0 ;
missing_leave = *17 ->RegressionTreeLeave(
id = 5 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *18 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *19 ->RegressionTreeLeave(
id = 6 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 29 ;
weights_sum = 0.193333333333333218 ;
targets_sum = -3465.00773000000072 ;
weighted_targets_sum = -23.1000515333333354 ;
weighted_squared_targets_sum = 2997.85468750103064 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *19  ;
leave_output = 2 [ -119.483025172413875 1 ] ;
leave_error = 3 [ 475.58129731941159 0 0.386666666666666436 ] ;
split_col = 1 ;
split_balance = 9 ;
split_feature_value = -1.31519999999999992 ;
after_split_error = 133.463062402859748 ;
missing_node = *0 ;
missing_leave = *20 ->RegressionTreeLeave(
id = 17 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *21 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *22 ->RegressionTreeLeave(
id = 18 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 10 ;
weights_sum = 0.0666666666666666657 ;
targets_sum = -1604.8422300000002 ;
weighted_targets_sum = -10.698948200000002 ;
weighted_squared_targets_sum = 1746.29511187725006 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *22  ;
leave_output = 2 [ -160.484223000000043 1 ] ;
leave_error = 3 [ 58.5654461660012444 0 0.133333333333333331 ] ;
split_col = 1 ;
split_balance = 4 ;
split_feature_value = -1.76971500000000015 ;
after_split_error = 16.8789931264006015 ;
missing_node = *0 ;
missing_leave = *23 ->RegressionTreeLeave(
id = 29 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *24 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *25 ->RegressionTreeLeave(
id = 30 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -562.481160000000045 ;
weighted_targets_sum = -3.74987440000000039 ;
weighted_squared_targets_sum = 704.078692073113416 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *25  ;
leave_output = 2 [ -187.493720000000025 1 ] ;
leave_error = 3 [ 2.00158256869046891 0 0.0400000000000000008 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = -1.65359500000000015 ;
after_split_error = 0.00309428292258406845 ;
missing_node = *0 ;
missing_leave = *26 ->RegressionTreeLeave(
id = 71 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *27 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *28 ->RegressionTreeLeave(
id = 72 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -384.983659999999986 ;
weighted_targets_sum = -2.56655773333333359 ;
weighted_squared_targets_sum = 494.042942031446728 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *28  ;
leave_output = 2 [ -192.491829999999993 1 ] ;
leave_error = 3 [ 0.00309428292276214822 0 0.00309428292276214822 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = -2.05787500000000012 ;
after_split_error = 0 ;
missing_node = *0 ;
missing_leave = *29 ->RegressionTreeLeave(
id = 233 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *30 ->RegressionTreeLeave(
id = 234 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -192.832469999999972 ;
weighted_targets_sum = -1.28554980000000008 ;
weighted_squared_targets_sum = 247.895743242006034 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *31 ->RegressionTreeLeave(
id = 235 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -192.151190000000014 ;
weighted_targets_sum = -1.28100793333333351 ;
weighted_squared_targets_sum = 246.147198789440694 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *28  ;
right_node = *32 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *33 ->RegressionTreeLeave(
id = 73 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -177.497500000000002 ;
weighted_targets_sum = -1.18331666666666679 ;
weighted_squared_targets_sum = 210.035750041666688 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *33  ;
leave_output = 2 [ -177.497500000000002 1 ] ;
leave_error = 3 [ 0 0 0 ] ;
split_col = -1 ;
split_balance = 2147483647 ;
split_feature_value = 1.79769313486231571e+308 ;
after_split_error = 1.79769313486231571e+308 ;
missing_node = *0 ;
missing_leave = *34 ->RegressionTreeLeave(
id = 236 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *35 ->RegressionTreeLeave(
id = 237 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *36 ->RegressionTreeLeave(
id = 238 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *33   )
;
left_leave = *25  ;
right_node = *37 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *38 ->RegressionTreeLeave(
id = 31 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 7 ;
weights_sum = 0.0466666666666666688 ;
targets_sum = -1042.36106999999993 ;
weighted_targets_sum = -6.94907379999999986 ;
weighted_squared_targets_sum = 1042.21641980413688 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *38  ;
leave_output = 2 [ -148.908724285714271 1 ] ;
leave_error = 3 [ 14.8774105577123557 0 0.0933333333333333376 ] ;
split_col = 3 ;
split_balance = 5 ;
split_feature_value = -4.74906000000000006 ;
after_split_error = 3.5971516681086797 ;
missing_node = *0 ;
missing_leave = *39 ->RegressionTreeLeave(
id = 74 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *40 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *41 ->RegressionTreeLeave(
id = 75 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -175.837510000000009 ;
weighted_targets_sum = -1.17225006666666687 ;
weighted_squared_targets_sum = 206.1255328200007 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *41  ;
leave_output = 2 [ -175.837510000000009 1 ] ;
leave_error = 3 [ 0 0 0 ] ;
split_col = -1 ;
split_balance = 2147483647 ;
split_feature_value = 1.79769313486231571e+308 ;
after_split_error = 1.79769313486231571e+308 ;
missing_node = *0 ;
missing_leave = *42 ->RegressionTreeLeave(
id = 113 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *43 ->RegressionTreeLeave(
id = 114 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *44 ->RegressionTreeLeave(
id = 115 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *41  ;
right_node = *45 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *46 ->RegressionTreeLeave(
id = 76 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 6 ;
weights_sum = 0.0400000000000000008 ;
targets_sum = -866.523559999999975 ;
weighted_targets_sum = -5.77682373333333388 ;
weighted_squared_targets_sum = 836.090886984136091 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *46  ;
leave_output = 2 [ -144.420593333333358 1 ] ;
leave_error = 3 [ 3.59715166810845233 0 0.0800000000000000017 ] ;
split_col = 1 ;
split_balance = 0 ;
split_feature_value = -1.43682500000000002 ;
after_split_error = 0.529347535980104866 ;
missing_node = *0 ;
missing_leave = *47 ->RegressionTreeLeave(
id = 116 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *48 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *49 ->RegressionTreeLeave(
id = 117 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -451.839400000000012 ;
weighted_targets_sum = -3.01226266666666698 ;
weighted_squared_targets_sum = 453.827814718630691 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *49  ;
leave_output = 2 [ -150.613133333333337 1 ] ;
leave_error = 3 [ 0.282992137883448458 0 0.0400000000000000008 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = -3.13504000000000005 ;
after_split_error = 0.00999469557601595504 ;
missing_node = *0 ;
missing_leave = *50 ->RegressionTreeLeave(
id = 197 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *51 ->RegressionTreeLeave(
id = 198 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = -146.918560000000014 ;
weighted_targets_sum = -0.979457066666666876 ;
weighted_squared_targets_sum = 143.900421816490706 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *52 ->RegressionTreeLeave(
id = 199 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -304.920839999999998 ;
weighted_targets_sum = -2.0328056000000001 ;
weighted_squared_targets_sum = 309.927392902140014 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *49  ;
right_node = *53 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *54 ->RegressionTreeLeave(
id = 118 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -414.68416000000002 ;
weighted_targets_sum = -2.7645610666666669 ;
weighted_squared_targets_sum = 382.2630722655054 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *54  ;
leave_output = 2 [ -138.228053333333349 1 ] ;
leave_error = 3 [ 0.246355398096885225 0 0.0400000000000000008 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = -2.44208500000000006 ;
after_split_error = 0.183220482032616871 ;
missing_node = *0 ;
missing_leave = *55 ->RegressionTreeLeave(
id = 200 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *56 ->RegressionTreeLeave(
id = 201 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = -136.49520000000004 ;
weighted_targets_sum = -0.909967999999999999 ;
weighted_squared_targets_sum = 124.206264153600031 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *57 ->RegressionTreeLeave(
id = 202 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -278.188960000000009 ;
weighted_targets_sum = -1.85459306666666679 ;
weighted_squared_targets_sum = 258.056808111905355 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *54   )
;
right_leave = *46   )
;
right_leave = *38   )
;
left_leave = *22  ;
right_node = *58 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *59 ->RegressionTreeLeave(
id = 19 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 19 ;
weights_sum = 0.126666666666666677 ;
targets_sum = -1860.16549999999984 ;
weighted_targets_sum = -12.4011033333333351 ;
weighted_squared_targets_sum = 1251.55957562378012 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *59  ;
leave_output = 2 [ -97.9034473684210553 1 ] ;
leave_error = 3 [ 74.8976162368580418 0 0.253333333333333355 ] ;
split_col = 1 ;
split_balance = 7 ;
split_feature_value = -1.16121499999999989 ;
after_split_error = 21.5111374778552857 ;
missing_node = *0 ;
missing_leave = *60 ->RegressionTreeLeave(
id = 32 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *61 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *62 ->RegressionTreeLeave(
id = 33 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 6 ;
weights_sum = 0.0400000000000000008 ;
targets_sum = -715.629170000000045 ;
weighted_targets_sum = -4.77086113333333373 ;
weighted_squared_targets_sum = 570.045923418595407 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *62  ;
leave_output = 2 [ -119.271528333333336 1 ] ;
leave_error = 3 [ 2.03604915965981625 0 0.0800000000000000017 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = -1.10694000000000004 ;
after_split_error = 0.221228036537741812 ;
missing_node = *0 ;
missing_leave = *63 ->RegressionTreeLeave(
id = 53 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *64 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *65 ->RegressionTreeLeave(
id = 54 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -372.10329999999999 ;
weighted_targets_sum = -2.48068866666666699 ;
weighted_squared_targets_sum = 307.693557698994709 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *65  ;
leave_output = 2 [ -124.034433333333354 1 ] ;
leave_error = 3 [ 0.00548930514478163101 0 0.00548930514478163101 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = -1.69603999999999999 ;
after_split_error = 0.000219082922519264756 ;
missing_node = *0 ;
missing_leave = *66 ->RegressionTreeLeave(
id = 239 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *67 ->RegressionTreeLeave(
id = 240 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = -124.200460000000007 ;
weighted_targets_sum = -0.828003066666666898 ;
weighted_squared_targets_sum = 102.838361761410681 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *68 ->RegressionTreeLeave(
id = 241 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -247.902839999999998 ;
weighted_targets_sum = -1.65268560000000009 ;
weighted_squared_targets_sum = 204.855195937584028 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *65  ;
right_node = *69 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *70 ->RegressionTreeLeave(
id = 55 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -343.525869999999998 ;
weighted_targets_sum = -2.29017246666666674 ;
weighted_squared_targets_sum = 262.352365719600698 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *70  ;
leave_output = 2 [ -114.508623333333333 1 ] ;
leave_error = 3 [ 0.215738731392987493 0 0.0400000000000000008 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = 0.509650000000000047 ;
after_split_error = 0.128841484970660891 ;
missing_node = *0 ;
missing_leave = *71 ->RegressionTreeLeave(
id = 242 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *72 ->RegressionTreeLeave(
id = 243 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = -113.352759999999989 ;
weighted_targets_sum = -0.755685066666666683 ;
weighted_squared_targets_sum = 85.65898799745068 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *73 ->RegressionTreeLeave(
id = 244 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -230.173110000000008 ;
weighted_targets_sum = -1.53448739999999995 ;
weighted_squared_targets_sum = 176.693377722149989 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *70   )
;
left_leave = *62  ;
right_node = *74 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *75 ->RegressionTreeLeave(
id = 34 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 13 ;
weights_sum = 0.0866666666666666696 ;
targets_sum = -1144.53632999999968 ;
weighted_targets_sum = -7.63024219999999964 ;
weighted_squared_targets_sum = 681.513652205184826 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *75  ;
leave_output = 2 [ -88.0412561538461489 1 ] ;
leave_error = 3 [ 19.4750883181964802 0 0.173333333333333339 ] ;
split_col = 2 ;
split_balance = 7 ;
split_feature_value = -6.68825000000000003 ;
after_split_error = 5.81526685152111966 ;
missing_node = *0 ;
missing_leave = *76 ->RegressionTreeLeave(
id = 56 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *77 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *78 ->RegressionTreeLeave(
id = 57 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 10 ;
weights_sum = 0.0666666666666666657 ;
targets_sum = -929.035599999999931 ;
weighted_targets_sum = -6.19357066666666611 ;
weighted_squared_targets_sum = 577.502672231901329 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *78  ;
leave_output = 2 [ -92.9035599999999988 1 ] ;
leave_error = 3 [ 4.19581637398951024 0 0.133333333333333331 ] ;
split_col = 1 ;
split_balance = 6 ;
split_feature_value = -1.04829499999999998 ;
after_split_error = 2.15172959846818168 ;
missing_node = *0 ;
missing_leave = *79 ->RegressionTreeLeave(
id = 107 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *80 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *81 ->RegressionTreeLeave(
id = 108 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -201.468869999999981 ;
weighted_targets_sum = -1.34312580000000015 ;
weighted_squared_targets_sum = 135.305857542979339 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *81  ;
leave_output = 2 [ -100.734435000000005 1 ] ;
leave_error = 3 [ 0.0136778921126326503 0 0.0136778921126326503 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = -0.441430000000000045 ;
after_split_error = 0 ;
missing_node = *0 ;
missing_leave = *82 ->RegressionTreeLeave(
id = 227 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *83 ->RegressionTreeLeave(
id = 228 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -100.018249999999981 ;
weighted_targets_sum = -0.666788333333333205 ;
weighted_squared_targets_sum = 66.6910022204166637 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *84 ->RegressionTreeLeave(
id = 229 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -101.450620000000001 ;
weighted_targets_sum = -0.67633746666666672 ;
weighted_squared_targets_sum = 68.6148553225626756 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *81  ;
right_node = *85 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *86 ->RegressionTreeLeave(
id = 109 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 8 ;
weights_sum = 0.0533333333333333368 ;
targets_sum = -727.566730000000007 ;
weighted_targets_sum = -4.85044486666666685 ;
weighted_squared_targets_sum = 442.196814688922075 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *86  ;
leave_output = 2 [ -90.9458412500000009 1 ] ;
leave_error = 3 [ 2.13805170635598518 0 0.106666666666666674 ] ;
split_col = 2 ;
split_balance = 2 ;
split_feature_value = -9.18992000000000075 ;
after_split_error = 0.337813845131658352 ;
missing_node = *0 ;
missing_leave = *87 ->RegressionTreeLeave(
id = 230 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *88 ->RegressionTreeLeave(
id = 231 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = -91.9765299999998547 ;
weighted_targets_sum = -0.613176866666666598 ;
weighted_squared_targets_sum = 56.397880472272675 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *89 ->RegressionTreeLeave(
id = 232 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 7 ;
weights_sum = 0.0466666666666666688 ;
targets_sum = -635.590200000000095 ;
weighted_targets_sum = -4.23726800000000026 ;
weighted_squared_targets_sum = 385.7989342166494 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *86   )
;
left_leave = *78  ;
right_node = *90 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *91 ->RegressionTreeLeave(
id = 58 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -215.500729999999976 ;
weighted_targets_sum = -1.43667153333333331 ;
weighted_squared_targets_sum = 104.010979973283341 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *91  ;
leave_output = 2 [ -71.8335766666666586 1 ] ;
leave_error = 3 [ 1.61945047753160898 0 0.0400000000000000008 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = 2.85157499999999997 ;
after_split_error = 0.0267389822939781974 ;
missing_node = *0 ;
missing_leave = *92 ->RegressionTreeLeave(
id = 110 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *93 ->RegressionTreeLeave(
id = 111 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = -75.2941599999999909 ;
weighted_targets_sum = -0.501961066666666733 ;
weighted_squared_targets_sum = 37.7947368673706734 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *94 ->RegressionTreeLeave(
id = 112 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -140.206569999999999 ;
weighted_targets_sum = -0.934710466666666684 ;
weighted_squared_targets_sum = 66.2162431059126675 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *91   )
;
right_leave = *75   )
;
right_leave = *59   )
;
left_leave = *19  ;
right_node = *95 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *96 ->RegressionTreeLeave(
id = 7 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 41 ;
weights_sum = 0.273333333333333095 ;
targets_sum = -1062.7966799999997 ;
weighted_targets_sum = -7.08531119999999959 ;
weighted_squared_targets_sum = 341.808014153662668 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *96  ;
leave_output = 2 [ -25.9218702439024611 1 ] ;
leave_error = 3 [ 316.286993179187675 0 0.54666666666666619 ] ;
split_col = 1 ;
split_balance = 3 ;
split_feature_value = -0.34517500000000001 ;
after_split_error = 105.868276535697049 ;
missing_node = *0 ;
missing_leave = *97 ->RegressionTreeLeave(
id = 20 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *98 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *99 ->RegressionTreeLeave(
id = 21 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 19 ;
weights_sum = 0.126666666666666677 ;
targets_sum = -893.630649999999946 ;
weighted_targets_sum = -5.95753766666666706 ;
weighted_squared_targets_sum = 305.178639377724721 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *99  ;
leave_output = 2 [ -47.0331921052631543 1 ] ;
leave_error = 3 [ 49.9532516541003346 0 0.253333333333333355 ] ;
split_col = 2 ;
split_balance = 3 ;
split_feature_value = -7.35407999999999973 ;
after_split_error = 19.8796985770064367 ;
missing_node = *0 ;
missing_leave = *100 ->RegressionTreeLeave(
id = 41 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *101 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *102 ->RegressionTreeLeave(
id = 42 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 8 ;
weights_sum = 0.0533333333333333368 ;
targets_sum = -478.474159999999983 ;
weighted_targets_sum = -3.1898277333333338 ;
weighted_squared_targets_sum = 194.724798247468016 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *102  ;
leave_output = 2 [ -59.809270000000005 1 ] ;
leave_error = 3 [ 7.88706018209330217 0 0.106666666666666674 ] ;
split_col = 1 ;
split_balance = 2 ;
split_feature_value = -0.581860000000000044 ;
after_split_error = 0.868682218515694049 ;
missing_node = *0 ;
missing_leave = *103 ->RegressionTreeLeave(
id = 77 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *104 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *105 ->RegressionTreeLeave(
id = 78 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -210.84371999999999 ;
weighted_targets_sum = -1.40562480000000001 ;
weighted_squared_targets_sum = 99.065637851193344 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *105  ;
leave_output = 2 [ -70.2812399999999968 1 ] ;
leave_error = 3 [ 0.553167864882681992 0 0.0400000000000000008 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = -2.23238499999999984 ;
after_split_error = 0.168978629290691268 ;
missing_node = *0 ;
missing_leave = *106 ->RegressionTreeLeave(
id = 143 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *107 ->RegressionTreeLeave(
id = 144 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = -65.8983800000000031 ;
weighted_targets_sum = -0.439322533333333376 ;
weighted_squared_targets_sum = 28.9506432441626735 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *108 ->RegressionTreeLeave(
id = 145 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -144.945339999999987 ;
weighted_targets_sum = -0.966302266666666632 ;
weighted_squared_targets_sum = 70.1149946070306669 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *105  ;
right_node = *109 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *110 ->RegressionTreeLeave(
id = 79 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 5 ;
weights_sum = 0.0333333333333333329 ;
targets_sum = -267.630440000000021 ;
weighted_targets_sum = -1.78420293333333335 ;
weighted_squared_targets_sum = 95.6591603962746717 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *110  ;
leave_output = 2 [ -53.5260880000000014 1 ] ;
leave_error = 3 [ 0.315514353633076561 0 0.0666666666666666657 ] ;
split_col = 1 ;
split_balance = 1 ;
split_feature_value = -0.501179999999999959 ;
after_split_error = 0.0204439538035167401 ;
missing_node = *0 ;
missing_leave = *111 ->RegressionTreeLeave(
id = 146 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *112 ->RegressionTreeLeave(
id = 147 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = -52.4257500000000078 ;
weighted_targets_sum = -0.349504999999999844 ;
weighted_squared_targets_sum = 18.3230617537499931 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *113 ->RegressionTreeLeave(
id = 148 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 4 ;
weights_sum = 0.0266666666666666684 ;
targets_sum = -215.204690000000028 ;
weighted_targets_sum = -1.4346979333333334 ;
weighted_squared_targets_sum = 77.336098642524675 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *110   )
;
left_leave = *102  ;
right_node = *114 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *115 ->RegressionTreeLeave(
id = 43 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 11 ;
weights_sum = 0.0733333333333333337 ;
targets_sum = -415.156490000000019 ;
weighted_targets_sum = -2.76770993333333326 ;
weighted_squared_targets_sum = 110.453841130256677 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *115  ;
leave_output = 2 [ -37.7414990909090875 1 ] ;
leave_error = 3 [ 11.9926383949132571 0 0.146666666666666667 ] ;
split_col = 1 ;
split_balance = 7 ;
split_feature_value = -0.617779999999999996 ;
after_split_error = 5.7658396809937118 ;
missing_node = *0 ;
missing_leave = *116 ->RegressionTreeLeave(
id = 80 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *117 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *118 ->RegressionTreeLeave(
id = 81 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -103.127129999999994 ;
weighted_targets_sum = -0.687514200000000075 ;
weighted_squared_targets_sum = 35.6753355603233402 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *118  ;
leave_output = 2 [ -51.5635650000000041 1 ] ;
leave_error = 3 [ 0.449304840400662542 0 0.0266666666666666684 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = 2.03620000000000001 ;
after_split_error = 0 ;
missing_node = *0 ;
missing_leave = *119 ->RegressionTreeLeave(
id = 161 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *120 ->RegressionTreeLeave(
id = 162 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -55.6683099999999911 ;
weighted_targets_sum = -0.371122066666666695 ;
weighted_squared_targets_sum = 20.6597382550406685 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *121 ->RegressionTreeLeave(
id = 163 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -47.4588200000000029 ;
weighted_targets_sum = -0.316392133333333381 ;
weighted_squared_targets_sum = 15.0155973052826699 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *118  ;
right_node = *122 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *123 ->RegressionTreeLeave(
id = 82 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 9 ;
weights_sum = 0.0600000000000000047 ;
targets_sum = -312.029360000000054 ;
weighted_targets_sum = -2.08019573333333341 ;
weighted_squared_targets_sum = 74.7785055699333441 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *123  ;
leave_output = 2 [ -34.6699288888888901 1 ] ;
leave_error = 3 [ 5.31653484059320025 0 0.120000000000000009 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = 0.591400000000000037 ;
after_split_error = 1.59838525525966713 ;
missing_node = *0 ;
missing_leave = *124 ->RegressionTreeLeave(
id = 164 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *125 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *126 ->RegressionTreeLeave(
id = 165 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 5 ;
weights_sum = 0.0333333333333333329 ;
targets_sum = -198.243249999999989 ;
weighted_targets_sum = -1.32162166666666669 ;
weighted_squared_targets_sum = 52.7188190578006726 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *126  ;
leave_output = 2 [ -39.6486500000000035 1 ] ;
leave_error = 3 [ 0.636608327434661891 0 0.0666666666666666657 ] ;
split_col = 3 ;
split_balance = 3 ;
split_feature_value = -1.56711 ;
after_split_error = 0.405305692174654175 ;
missing_node = *0 ;
missing_leave = *127 ->RegressionTreeLeave(
id = 191 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *128 ->RegressionTreeLeave(
id = 192 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = -35.9233100000000007 ;
weighted_targets_sum = -0.23948873333333337 ;
weighted_squared_targets_sum = 8.60322800904066831 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *129 ->RegressionTreeLeave(
id = 193 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 4 ;
weights_sum = 0.0266666666666666684 ;
targets_sum = -162.319939999999974 ;
weighted_targets_sum = -1.08213293333333338 ;
weighted_squared_targets_sum = 44.1155910487599954 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *126  ;
right_node = *130 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *131 ->RegressionTreeLeave(
id = 166 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 4 ;
weights_sum = 0.0266666666666666684 ;
targets_sum = -113.786109999999994 ;
weighted_targets_sum = -0.758574066666666713 ;
weighted_squared_targets_sum = 22.059686512132668 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *131  ;
leave_output = 2 [ -28.4465274999999984 1 ] ;
leave_error = 3 [ 0.961776927825005234 0 0.0533333333333333368 ] ;
split_col = 1 ;
split_balance = 2 ;
split_feature_value = -0.412640000000000007 ;
after_split_error = 0.122110760935989035 ;
missing_node = *0 ;
missing_leave = *132 ->RegressionTreeLeave(
id = 194 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *133 ->RegressionTreeLeave(
id = 195 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = -33.20474999999999 ;
weighted_targets_sum = -0.221365000000000062 ;
weighted_squared_targets_sum = 7.35036948375000065 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *134 ->RegressionTreeLeave(
id = 196 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -80.5813599999999894 ;
weighted_targets_sum = -0.537209066666666679 ;
weighted_squared_targets_sum = 14.7093170283826673 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *131   )
;
right_leave = *123   )
;
right_leave = *115   )
;
left_leave = *99  ;
right_node = *135 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *136 ->RegressionTreeLeave(
id = 22 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 22 ;
weights_sum = 0.14666666666666664 ;
targets_sum = -169.166030000000035 ;
weighted_targets_sum = -1.12777353333333341 ;
weighted_squared_targets_sum = 36.6293747759380111 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *136  ;
leave_output = 2 [ -7.68936500000000223 1 ] ;
leave_error = 3 [ 55.9150248815966791 0 0.293333333333333279 ] ;
split_col = 1 ;
split_balance = 4 ;
split_feature_value = -0.0821300000000000086 ;
after_split_error = 26.8904632651653444 ;
missing_node = *0 ;
missing_leave = *137 ->RegressionTreeLeave(
id = 44 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *138 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *139 ->RegressionTreeLeave(
id = 45 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 13 ;
weights_sum = 0.0866666666666666696 ;
targets_sum = -207.557480000000027 ;
weighted_targets_sum = -1.38371653333333322 ;
weighted_squared_targets_sum = 30.1523790784066676 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *139  ;
leave_output = 2 [ -15.965959999999999 1 ] ;
leave_error = 3 [ 16.1200325117360102 0 0.173333333333333339 ] ;
split_col = 3 ;
split_balance = 3 ;
split_feature_value = -1.15891499999999992 ;
after_split_error = 9.19154126603875987 ;
missing_node = *0 ;
missing_leave = *140 ->RegressionTreeLeave(
id = 83 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *141 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *142 ->RegressionTreeLeave(
id = 84 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 5 ;
weights_sum = 0.0333333333333333329 ;
targets_sum = -119.815830000000005 ;
weighted_targets_sum = -0.798772200000000043 ;
weighted_squared_targets_sum = 20.6369126752206711 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *142  ;
leave_output = 2 [ -23.9631660000000011 1 ] ;
leave_error = 3 [ 2.9916037008709373 0 0.0666666666666666657 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = -2.12482499999999996 ;
after_split_error = 0.746847325971338849 ;
missing_node = *0 ;
missing_leave = *143 ->RegressionTreeLeave(
id = 149 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *144 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *145 ->RegressionTreeLeave(
id = 150 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -57.6758400000000009 ;
weighted_targets_sum = -0.384505600000000003 ;
weighted_squared_targets_sum = 7.64076145701733456 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *145  ;
leave_output = 2 [ -19.2252800000000015 1 ] ;
leave_error = 3 [ 0.4970672708986692 0 0.0400000000000000008 ] ;
split_col = 1 ;
split_balance = 1 ;
split_feature_value = -0.10633999999999999 ;
after_split_error = 0.00781290769066451431 ;
missing_node = *0 ;
missing_leave = *146 ->RegressionTreeLeave(
id = 215 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *147 ->RegressionTreeLeave(
id = 216 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = -22.2395500000000013 ;
weighted_targets_sum = -0.148263666666666655 ;
weighted_squared_targets_sum = 3.29731722801666738 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *148 ->RegressionTreeLeave(
id = 217 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -35.4362899999999996 ;
weighted_targets_sum = -0.236241933333333348 ;
weighted_squared_targets_sum = 4.34344422900066718 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *145  ;
right_node = *149 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *150 ->RegressionTreeLeave(
id = 151 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = -62.1399899999999974 ;
weighted_targets_sum = -0.41426660000000004 ;
weighted_squared_targets_sum = 12.9961512182033339 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *150  ;
leave_output = 2 [ -31.0699950000000022 1 ] ;
leave_error = 3 [ 0.249780055072664348 0 0.0266666666666666684 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = -1.68244499999999997 ;
after_split_error = 0 ;
missing_node = *0 ;
missing_leave = *151 ->RegressionTreeLeave(
id = 218 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *152 ->RegressionTreeLeave(
id = 219 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -28.0094799999999964 ;
weighted_targets_sum = -0.186729866666666688 ;
weighted_squared_targets_sum = 5.23020646580266568 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *153 ->RegressionTreeLeave(
id = 220 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = -34.130510000000001 ;
weighted_targets_sum = -0.227536733333333352 ;
weighted_squared_targets_sum = 7.76594475240066817 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *150   )
;
left_leave = *142  ;
right_node = *154 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *155 ->RegressionTreeLeave(
id = 85 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 8 ;
weights_sum = 0.0533333333333333368 ;
targets_sum = -87.7416499999999928 ;
weighted_targets_sum = -0.584944333333333399 ;
weighted_squared_targets_sum = 9.5154664031860019 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *155  ;
leave_output = 2 [ -10.9677062500000009 1 ] ;
leave_error = 3 [ 6.19993756516783456 0 0.106666666666666674 ] ;
split_col = 3 ;
split_balance = 6 ;
split_feature_value = 3.08020000000000005 ;
after_split_error = 2.37574213259581013 ;
missing_node = *0 ;
missing_leave = *156 ->RegressionTreeLeave(
id = 152 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *157 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *158 ->RegressionTreeLeave(
id = 153 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 7 ;
weights_sum = 0.0466666666666666688 ;
targets_sum = -92.6157499999999914 ;
weighted_targets_sum = -0.617438333333333422 ;
weighted_squared_targets_sum = 9.3570873977860014 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *158  ;
leave_output = 2 [ -13.2308214285714296 1 ] ;
leave_error = 3 [ 2.37574213259581013 0 0.0933333333333333376 ] ;
split_col = 1 ;
split_balance = 1 ;
split_feature_value = -0.262695000000000012 ;
after_split_error = 0.82728846988722271 ;
missing_node = *0 ;
missing_leave = *159 ->RegressionTreeLeave(
id = 185 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *160 ->RegressionTreeLeave(
id = 186 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = -10.5931799999999878 ;
weighted_targets_sum = -0.0706212000000001061 ;
weighted_squared_targets_sum = 0.748103083416000847 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *161 ->RegressionTreeLeave(
id = 187 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 6 ;
weights_sum = 0.0400000000000000008 ;
targets_sum = -82.0225700000000018 ;
weighted_targets_sum = -0.546817133333333372 ;
weighted_squared_targets_sum = 8.60898431436999978 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *158  ;
right_node = *162 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *163 ->RegressionTreeLeave(
id = 154 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 4.87410000000000032 ;
weighted_targets_sum = 0.032494000000000002 ;
weighted_squared_targets_sum = 0.158379005400000022 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *163  ;
leave_output = 2 [ 4.87410000000000032 1 ] ;
leave_error = 3 [ 0 0 0 ] ;
split_col = -1 ;
split_balance = 2147483647 ;
split_feature_value = 1.79769313486231571e+308 ;
after_split_error = 1.79769313486231571e+308 ;
missing_node = *0 ;
missing_leave = *164 ->RegressionTreeLeave(
id = 188 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *165 ->RegressionTreeLeave(
id = 189 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *166 ->RegressionTreeLeave(
id = 190 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *163   )
;
right_leave = *155   )
;
left_leave = *139  ;
right_node = *167 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *168 ->RegressionTreeLeave(
id = 46 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 9 ;
weights_sum = 0.0600000000000000047 ;
targets_sum = 38.391449999999999 ;
weighted_targets_sum = 0.255943000000000032 ;
weighted_squared_targets_sum = 6.47699569753133275 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *168  ;
leave_output = 2 [ 4.26571666666666705 1 ] ;
leave_error = 3 [ 10.7704307534293324 0 0.120000000000000009 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = -0.0792649999999999744 ;
after_split_error = 2.14048019403406808 ;
missing_node = *0 ;
missing_leave = *169 ->RegressionTreeLeave(
id = 86 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *170 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *171 ->RegressionTreeLeave(
id = 87 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 4 ;
weights_sum = 0.0266666666666666684 ;
targets_sum = -20.8623900000000013 ;
weighted_targets_sum = -0.139082600000000001 ;
weighted_squared_targets_sum = 1.25263627282333334 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *171  ;
leave_output = 2 [ -5.21559749999999944 1 ] ;
leave_error = 3 [ 1.05447482393966685 0 0.0533333333333333368 ] ;
split_col = 3 ;
split_balance = 2 ;
split_feature_value = -1.85971500000000001 ;
after_split_error = 0.139893091254222196 ;
missing_node = *0 ;
missing_leave = *172 ->RegressionTreeLeave(
id = 125 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *173 ->RegressionTreeLeave(
id = 126 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = -12.3881300000000003 ;
weighted_targets_sum = -0.0825875333333333378 ;
weighted_squared_targets_sum = 1.02310509931266669 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *174 ->RegressionTreeLeave(
id = 127 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = -8.47425999999999924 ;
weighted_targets_sum = -0.0564950666666666698 ;
weighted_squared_targets_sum = 0.229531173510666681 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *171  ;
right_node = *175 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *176 ->RegressionTreeLeave(
id = 88 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 5 ;
weights_sum = 0.0333333333333333329 ;
targets_sum = 59.2538400000000038 ;
weighted_targets_sum = 0.395025600000000032 ;
weighted_squared_targets_sum = 5.22435942470800008 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *176  ;
leave_output = 2 [ 11.8507680000000004 1 ] ;
leave_error = 3 [ 1.08600537009439835 0 0.0666666666666666657 ] ;
split_col = 3 ;
split_balance = 3 ;
split_feature_value = 2.88428500000000021 ;
after_split_error = 0.734990923745331592 ;
missing_node = *0 ;
missing_leave = *177 ->RegressionTreeLeave(
id = 128 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *178 ->RegressionTreeLeave(
id = 129 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = 10.0296400000000041 ;
weighted_targets_sum = 0.0668642666666666996 ;
weighted_squared_targets_sum = 0.670624523530667149 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *179 ->RegressionTreeLeave(
id = 130 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 4 ;
weights_sum = 0.0266666666666666684 ;
targets_sum = 49.2241999999999962 ;
weighted_targets_sum = 0.328161333333333305 ;
weighted_squared_targets_sum = 4.55373490117733315 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *176   )
;
right_leave = *168   )
;
right_leave = *136   )
;
right_leave = *96   )
;
left_leave = *16  ;
right_node = *180 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *181 ->RegressionTreeLeave(
id = 4 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 80 ;
weights_sum = 0.533333333333332882 ;
targets_sum = 6928.84032999999908 ;
weighted_targets_sum = 46.1922688666666588 ;
weighted_squared_targets_sum = 5783.36916902556004 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *181  ;
leave_output = 2 [ 86.6105041250000625 1 ] ;
leave_error = 3 [ 3565.26695161203133 0 1.06666666666666576 ] ;
split_col = 1 ;
split_balance = 20 ;
split_feature_value = 0.937115000000000031 ;
after_split_error = 1048.37002708401451 ;
missing_node = *0 ;
missing_leave = *182 ->RegressionTreeLeave(
id = 8 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *183 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *184 ->RegressionTreeLeave(
id = 9 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 50 ;
weights_sum = 0.333333333333332982 ;
targets_sum = 2449.19952999999987 ;
weighted_targets_sum = 16.3279968666666662 ;
weighted_squared_targets_sum = 1012.36507460954613 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *184  ;
leave_output = 2 [ 48.9839906000000482 1 ] ;
leave_error = 3 [ 425.10925915183185 0 0.666666666666665964 ] ;
split_col = 1 ;
split_balance = 6 ;
split_feature_value = 0.432620000000000005 ;
after_split_error = 121.842470789270692 ;
missing_node = *0 ;
missing_leave = *185 ->RegressionTreeLeave(
id = 11 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *186 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *187 ->RegressionTreeLeave(
id = 12 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 28 ;
weights_sum = 0.186666666666666564 ;
targets_sum = 842.195039999999949 ;
weighted_targets_sum = 5.61463360000000122 ;
weighted_squared_targets_sum = 189.51913846573197 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *187  ;
leave_output = 2 [ 30.0783942857143103 1 ] ;
leave_error = 3 [ 41.2799505502247399 0 0.373333333333333128 ] ;
split_col = 1 ;
split_balance = 2 ;
split_feature_value = 0.26894499999999999 ;
after_split_error = 22.4639602548301482 ;
missing_node = *0 ;
missing_leave = *188 ->RegressionTreeLeave(
id = 35 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *189 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *190 ->RegressionTreeLeave(
id = 36 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 15 ;
weights_sum = 0.100000000000000006 ;
targets_sum = 352.039670000000001 ;
weighted_targets_sum = 2.34693113333333336 ;
weighted_squared_targets_sum = 59.5814975016619925 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *190  ;
leave_output = 2 [ 23.4693113333333336 1 ] ;
leave_error = 3 [ 9.00128011113828741 0 0.200000000000000011 ] ;
split_col = 3 ;
split_balance = 3 ;
split_feature_value = 0.287649999999999961 ;
after_split_error = 4.55178643471853928 ;
missing_node = *0 ;
missing_leave = *191 ->RegressionTreeLeave(
id = 95 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *192 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *193 ->RegressionTreeLeave(
id = 96 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 6 ;
weights_sum = 0.0400000000000000008 ;
targets_sum = 106.155180000000001 ;
weighted_targets_sum = 0.70770120000000003 ;
weighted_squared_targets_sum = 13.2969076162293316 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *193  ;
leave_output = 2 [ 17.6925300000000014 1 ] ;
leave_error = 3 [ 1.55176580838666167 0 0.0800000000000000017 ] ;
split_col = 1 ;
split_balance = 4 ;
split_feature_value = 0.107589999999999991 ;
after_split_error = 0.446338964225057477 ;
missing_node = *0 ;
missing_leave = *194 ->RegressionTreeLeave(
id = 179 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *195 ->RegressionTreeLeave(
id = 180 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = 21.1915699999999987 ;
weighted_targets_sum = 0.141277133333333388 ;
weighted_squared_targets_sum = 2.9938842604326652 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *196 ->RegressionTreeLeave(
id = 181 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 5 ;
weights_sum = 0.0333333333333333329 ;
targets_sum = 84.9636100000000027 ;
weighted_targets_sum = 0.56642406666666667 ;
weighted_squared_targets_sum = 10.3030233557966664 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *193  ;
right_node = *197 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *198 ->RegressionTreeLeave(
id = 97 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 9 ;
weights_sum = 0.0600000000000000047 ;
targets_sum = 245.884489999999971 ;
weighted_targets_sum = 1.63922993333333356 ;
weighted_squared_targets_sum = 46.2845898854326663 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *198  ;
leave_output = 2 [ 27.320498888888892 1 ] ;
leave_error = 3 [ 3.00002062633182565 0 0.120000000000000009 ] ;
split_col = 3 ;
split_balance = 3 ;
split_feature_value = 2.14775000000000027 ;
after_split_error = 1.60150674033000873 ;
missing_node = *0 ;
missing_leave = *199 ->RegressionTreeLeave(
id = 182 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *200 ->RegressionTreeLeave(
id = 183 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = 30.6246100000000006 ;
weighted_targets_sum = 0.204164066666666616 ;
weighted_squared_targets_sum = 6.25244491768066712 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *201 ->RegressionTreeLeave(
id = 184 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 8 ;
weights_sum = 0.0533333333333333368 ;
targets_sum = 215.25988000000001 ;
weighted_targets_sum = 1.43506586666666669 ;
weighted_squared_targets_sum = 40.0321449677520036 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *198   )
;
left_leave = *190  ;
right_node = *202 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *203 ->RegressionTreeLeave(
id = 37 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 13 ;
weights_sum = 0.0866666666666666696 ;
targets_sum = 490.155370000000005 ;
weighted_targets_sum = 3.26770246666666697 ;
weighted_squared_targets_sum = 129.937640964069999 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *203  ;
leave_output = 2 [ 37.7042592307692317 1 ] ;
leave_error = 3 [ 13.4626801436918626 0 0.173333333333333339 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = -0.349470000000000003 ;
after_split_error = 5.07508760070883014 ;
missing_node = *0 ;
missing_leave = *204 ->RegressionTreeLeave(
id = 98 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *205 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *206 ->RegressionTreeLeave(
id = 99 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 6 ;
weights_sum = 0.0400000000000000008 ;
targets_sum = 181.14364999999998 ;
weighted_targets_sum = 1.20762433333333341 ;
weighted_squared_targets_sum = 37.1207787902646729 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *206  ;
leave_output = 2 [ 30.1906083333333335 1 ] ;
leave_error = 3 [ 1.32373105759045329 0 0.0800000000000000017 ] ;
split_col = 3 ;
split_balance = 2 ;
split_feature_value = -1.86292999999999997 ;
after_split_error = 0.274094608278331597 ;
missing_node = *0 ;
missing_leave = *207 ->RegressionTreeLeave(
id = 131 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *208 ->RegressionTreeLeave(
id = 132 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = 26.9559800000000003 ;
weighted_targets_sum = 0.179706533333333446 ;
weighted_squared_targets_sum = 4.84416571840267363 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *209 ->RegressionTreeLeave(
id = 133 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 5 ;
weights_sum = 0.0333333333333333329 ;
targets_sum = 154.187669999999997 ;
weighted_targets_sum = 1.02791779999999999 ;
weighted_squared_targets_sum = 32.2766130718620019 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *206  ;
right_node = *210 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *211 ->RegressionTreeLeave(
id = 100 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 7 ;
weights_sum = 0.0466666666666666688 ;
targets_sum = 309.011719999999968 ;
weighted_targets_sum = 2.06007813333333356 ;
weighted_squared_targets_sum = 92.8168621738053332 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *211  ;
leave_output = 2 [ 44.1445314285714332 1 ] ;
leave_error = 3 [ 3.75135654311842615 0 0.0933333333333333376 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = 1.28273500000000018 ;
after_split_error = 1.16191341589332642 ;
missing_node = *0 ;
missing_leave = *212 ->RegressionTreeLeave(
id = 134 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *213 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *214 ->RegressionTreeLeave(
id = 135 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 4 ;
weights_sum = 0.0266666666666666684 ;
targets_sum = 158.331799999999987 ;
weighted_targets_sum = 1.05554533333333356 ;
weighted_squared_targets_sum = 42.328464357964009 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *214  ;
leave_output = 2 [ 39.5829500000000039 1 ] ;
leave_error = 3 [ 1.09373241179465586 0 0.0533333333333333368 ] ;
split_col = 1 ;
split_balance = 0 ;
split_feature_value = 0.299314999999999998 ;
after_split_error = 0.240273207153327617 ;
missing_node = *0 ;
missing_leave = *215 ->RegressionTreeLeave(
id = 203 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *216 ->RegressionTreeLeave(
id = 204 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = 46.3773499999999856 ;
weighted_targets_sum = 0.309182333333333503 ;
weighted_squared_targets_sum = 14.3390572868166686 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *217 ->RegressionTreeLeave(
id = 205 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = 111.954450000000008 ;
weighted_targets_sum = 0.74636300000000011 ;
weighted_squared_targets_sum = 27.9894070711473368 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *214  ;
right_node = *218 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *219 ->RegressionTreeLeave(
id = 136 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = 150.679919999999981 ;
weighted_targets_sum = 1.0045328 ;
weighted_squared_targets_sum = 50.4883978158413385 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *219  ;
leave_output = 2 [ 50.2266399999999962 1 ] ;
leave_error = 3 [ 0.0681810040986781524 0 0.0400000000000000008 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = 2.04712499999999986 ;
after_split_error = 0.00392131309066329203 ;
missing_node = *0 ;
missing_leave = *220 ->RegressionTreeLeave(
id = 206 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *221 ->RegressionTreeLeave(
id = 207 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = 48.4341599999999914 ;
weighted_targets_sum = 0.32289439999999997 ;
weighted_squared_targets_sum = 15.6391190327040039 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *222 ->RegressionTreeLeave(
id = 208 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = 102.24575999999999 ;
weighted_targets_sum = 0.681638399999999978 ;
weighted_squared_targets_sum = 34.8492787831373292 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *219   )
;
right_leave = *211   )
;
right_leave = *203   )
;
left_leave = *187  ;
right_node = *223 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *224 ->RegressionTreeLeave(
id = 13 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 22 ;
weights_sum = 0.14666666666666664 ;
targets_sum = 1607.00448999999981 ;
weighted_targets_sum = 10.7133632666666685 ;
weighted_squared_targets_sum = 822.845936143814129 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *224  ;
leave_output = 2 [ 73.0456586363636688 1 ] ;
leave_error = 3 [ 80.5625202390456536 0 0.293333333333333279 ] ;
split_col = 1 ;
split_balance = 6 ;
split_feature_value = 0.756380000000000052 ;
after_split_error = 32.2963206990872962 ;
missing_node = *0 ;
missing_leave = *225 ->RegressionTreeLeave(
id = 38 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *226 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *227 ->RegressionTreeLeave(
id = 39 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 14 ;
weights_sum = 0.0933333333333333376 ;
targets_sum = 886.886090000000081 ;
weighted_targets_sum = 5.91257393333333425 ;
weighted_squared_targets_sum = 386.540563219147373 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *227  ;
leave_output = 2 [ 63.3490064285714354 1 ] ;
leave_error = 3 [ 23.969758214020132 0 0.186666666666666675 ] ;
split_col = 3 ;
split_balance = 10 ;
split_feature_value = -2.19003499999999995 ;
after_split_error = 9.66110139106137744 ;
missing_node = *0 ;
missing_leave = *228 ->RegressionTreeLeave(
id = 59 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *229 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *230 ->RegressionTreeLeave(
id = 60 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = 83.8064699999999903 ;
weighted_targets_sum = 0.558709800000000034 ;
weighted_squared_targets_sum = 23.4124120810993332 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *230  ;
leave_output = 2 [ 41.9032350000000022 1 ] ;
leave_error = 3 [ 0.00132806979265908537 0 0.00132806979265908537 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = -3.1773049999999996 ;
after_split_error = 0 ;
missing_node = *0 ;
missing_leave = *231 ->RegressionTreeLeave(
id = 101 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *232 ->RegressionTreeLeave(
id = 102 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 41.6800699999999935 ;
weighted_targets_sum = 0.277867133333333349 ;
weighted_squared_targets_sum = 11.5815215680326666 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *233 ->RegressionTreeLeave(
id = 103 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 42.1263999999999967 ;
weighted_targets_sum = 0.280842666666666685 ;
weighted_squared_targets_sum = 11.8308905130666666 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *230  ;
right_node = *234 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *235 ->RegressionTreeLeave(
id = 61 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 12 ;
weights_sum = 0.0800000000000000017 ;
targets_sum = 803.079619999999977 ;
weighted_targets_sum = 5.35386413333333344 ;
weighted_squared_targets_sum = 363.128151138048054 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *235  ;
leave_output = 2 [ 66.92330166666666 1 ] ;
leave_error = 3 [ 9.65977332126890786 0 0.160000000000000003 ] ;
split_col = 3 ;
split_balance = 4 ;
split_feature_value = 2.82453999999999983 ;
after_split_error = 2.91998118893811931 ;
missing_node = *0 ;
missing_leave = *236 ->RegressionTreeLeave(
id = 104 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *237 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *238 ->RegressionTreeLeave(
id = 105 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 8 ;
weights_sum = 0.0533333333333333368 ;
targets_sum = 498.671859999999981 ;
weighted_targets_sum = 3.32447906666666659 ;
weighted_squared_targets_sum = 208.09516304127601 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *238  ;
leave_output = 2 [ 62.3339824999999976 1 ] ;
leave_error = 3 [ 1.73428615611938763 0 0.106666666666666674 ] ;
split_col = 3 ;
split_balance = 6 ;
split_feature_value = 2.35129499999999991 ;
after_split_error = 1.20228931743125678 ;
missing_node = *0 ;
missing_leave = *239 ->RegressionTreeLeave(
id = 155 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *240 ->RegressionTreeLeave(
id = 156 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = 62.9106799999999993 ;
weighted_targets_sum = 0.419404533333332941 ;
weighted_squared_targets_sum = 26.3850243870826695 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *241 ->RegressionTreeLeave(
id = 157 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 7 ;
weights_sum = 0.0466666666666666688 ;
targets_sum = 435.761180000000024 ;
weighted_targets_sum = 2.90507453333333343 ;
weighted_squared_targets_sum = 181.710138654193344 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *238  ;
right_node = *242 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *243 ->RegressionTreeLeave(
id = 106 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 4 ;
weights_sum = 0.0266666666666666684 ;
targets_sum = 304.407759999999996 ;
weighted_targets_sum = 2.02938506666666685 ;
weighted_squared_targets_sum = 155.032988096772016 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *243  ;
leave_output = 2 [ 76.101939999999999 1 ] ;
leave_error = 3 [ 1.18569503281867772 0 0.0533333333333333368 ] ;
split_col = 1 ;
split_balance = 0 ;
split_feature_value = 0.592494999999999994 ;
after_split_error = 0.00355264134659952213 ;
missing_node = *0 ;
missing_leave = *244 ->RegressionTreeLeave(
id = 158 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *245 ->RegressionTreeLeave(
id = 159 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = 80.5889199999999875 ;
weighted_targets_sum = 0.537259466666666796 ;
weighted_squared_targets_sum = 43.2971601784426596 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *246 ->RegressionTreeLeave(
id = 160 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = 223.818840000000023 ;
weighted_targets_sum = 1.49212560000000005 ;
weighted_squared_targets_sum = 111.735827918329349 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *243   )
;
right_leave = *235   )
;
left_leave = *227  ;
right_node = *247 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *248 ->RegressionTreeLeave(
id = 40 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 8 ;
weights_sum = 0.0533333333333333368 ;
targets_sum = 720.118400000000065 ;
weighted_targets_sum = 4.80078933333333335 ;
weighted_squared_targets_sum = 436.305372924666642 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *248  ;
leave_output = 2 [ 90.0147999999999939 1 ] ;
leave_error = 3 [ 8.32656248506665619 0 0.106666666666666674 ] ;
split_col = 2 ;
split_balance = 4 ;
split_feature_value = 5.85068500000000036 ;
after_split_error = 2.39782196026289407 ;
missing_node = *0 ;
missing_leave = *249 ->RegressionTreeLeave(
id = 62 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *250 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *251 ->RegressionTreeLeave(
id = 63 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = 154.203579999999988 ;
weighted_targets_sum = 1.02802386666666679 ;
weighted_squared_targets_sum = 79.2874180128546868 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *251  ;
leave_output = 2 [ 77.1017900000000083 1 ] ;
leave_error = 3 [ 0.0498754602666810209 0 0.0266666666666666684 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = -1.04825499999999994 ;
after_split_error = 0 ;
missing_node = *0 ;
missing_leave = *252 ->RegressionTreeLeave(
id = 167 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *253 ->RegressionTreeLeave(
id = 168 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 75.7341899999999839 ;
weighted_targets_sum = 0.504894600000000082 ;
weighted_squared_targets_sum = 38.2377835663740129 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *254 ->RegressionTreeLeave(
id = 169 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 78.4693900000000042 ;
weighted_targets_sum = 0.523129266666666704 ;
weighted_squared_targets_sum = 41.0496344464806739 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *251  ;
right_node = *255 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *256 ->RegressionTreeLeave(
id = 64 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 6 ;
weights_sum = 0.0400000000000000008 ;
targets_sum = 565.914819999999963 ;
weighted_targets_sum = 3.77276546666666679 ;
weighted_squared_targets_sum = 357.017954911812012 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *256  ;
leave_output = 2 [ 94.3191366666666653 1 ] ;
leave_error = 3 [ 2.34794649999640193 0 0.0800000000000000017 ] ;
split_col = 3 ;
split_balance = 2 ;
split_feature_value = 0.139270000000000005 ;
after_split_error = 1.53879167940953376 ;
missing_node = *0 ;
missing_leave = *257 ->RegressionTreeLeave(
id = 170 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *258 ->RegressionTreeLeave(
id = 171 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = 96.6401699999999408 ;
weighted_targets_sum = 0.644267800000000279 ;
weighted_squared_targets_sum = 62.2621497175260004 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *259 ->RegressionTreeLeave(
id = 172 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 5 ;
weights_sum = 0.0333333333333333329 ;
targets_sum = 469.274649999999951 ;
weighted_targets_sum = 3.12849766666666662 ;
weighted_squared_targets_sum = 294.755805194285983 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *256   )
;
right_leave = *248   )
;
right_leave = *224   )
;
left_leave = *184  ;
right_node = *260 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *261 ->RegressionTreeLeave(
id = 10 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 30 ;
weights_sum = 0.199999999999999872 ;
targets_sum = 4479.64080000000013 ;
weighted_targets_sum = 29.8642719999999997 ;
weighted_squared_targets_sum = 4771.0040944160155 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *261  ;
leave_output = 2 [ 149.321360000000084 1 ] ;
leave_error = 3 [ 623.260767932185786 0 0.399999999999999745 ] ;
split_col = 1 ;
split_balance = 8 ;
split_feature_value = 1.44567500000000004 ;
after_split_error = 238.043712468330853 ;
missing_node = *0 ;
missing_leave = *262 ->RegressionTreeLeave(
id = 14 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *263 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *264 ->RegressionTreeLeave(
id = 15 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 19 ;
weights_sum = 0.126666666666666677 ;
targets_sum = 2388.4680000000003 ;
weighted_targets_sum = 15.9231200000000008 ;
weighted_squared_targets_sum = 2035.13483177585226 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *264  ;
leave_output = 2 [ 125.708842105263159 1 ] ;
leave_error = 3 [ 66.9157077453886728 0 0.253333333333333355 ] ;
split_col = 1 ;
split_balance = 5 ;
split_feature_value = 1.2774350000000001 ;
after_split_error = 24.1608341688744517 ;
missing_node = *0 ;
missing_leave = *265 ->RegressionTreeLeave(
id = 23 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *266 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *267 ->RegressionTreeLeave(
id = 24 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 12 ;
weights_sum = 0.0800000000000000017 ;
targets_sum = 1389.4405099999999 ;
weighted_targets_sum = 9.26293673333333345 ;
weighted_squared_targets_sum = 1080.890425285226 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *267  ;
leave_output = 2 [ 115.786709166666668 1 ] ;
leave_error = 3 [ 16.7309274270517392 0 0.160000000000000003 ] ;
split_col = 3 ;
split_balance = 8 ;
split_feature_value = 3.03715500000000027 ;
after_split_error = 6.78331317461888439 ;
missing_node = *0 ;
missing_leave = *268 ->RegressionTreeLeave(
id = 65 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *269 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *270 ->RegressionTreeLeave(
id = 66 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 10 ;
weights_sum = 0.0666666666666666657 ;
targets_sum = 1122.60447999999997 ;
weighted_targets_sum = 7.48402986666666692 ;
weighted_squared_targets_sum = 843.265233105289326 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *270  ;
leave_output = 2 [ 112.260448000000011 1 ] ;
leave_error = 3 [ 6.20937485581785609 0 0.133333333333333331 ] ;
split_col = 3 ;
split_balance = 8 ;
split_feature_value = -0.972770000000000024 ;
after_split_error = 1.72287732250645886 ;
missing_node = *0 ;
missing_leave = *271 ->RegressionTreeLeave(
id = 119 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *272 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *273 ->RegressionTreeLeave(
id = 120 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 94.8581899999999933 ;
weighted_targets_sum = 0.632387933333333319 ;
weighted_squared_targets_sum = 59.9871747338406607 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *273  ;
leave_output = 2 [ 94.8581899999999933 1 ] ;
leave_error = 3 [ 0 0 0 ] ;
split_col = -1 ;
split_balance = 2147483647 ;
split_feature_value = 1.79769313486231571e+308 ;
after_split_error = 1.79769313486231571e+308 ;
missing_node = *0 ;
missing_leave = *274 ->RegressionTreeLeave(
id = 173 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *275 ->RegressionTreeLeave(
id = 174 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *276 ->RegressionTreeLeave(
id = 175 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *273  ;
right_node = *277 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *278 ->RegressionTreeLeave(
id = 121 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 9 ;
weights_sum = 0.0600000000000000047 ;
targets_sum = 1027.74629000000004 ;
weighted_targets_sum = 6.85164193333333316 ;
weighted_squared_targets_sum = 783.278058371448651 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *278  ;
leave_output = 2 [ 114.194032222222205 1 ] ;
leave_error = 3 [ 1.72287732250634451 0 0.120000000000000009 ] ;
split_col = 1 ;
split_balance = 7 ;
split_feature_value = 1.03719500000000009 ;
after_split_error = 1.07265289472230152 ;
missing_node = *0 ;
missing_leave = *279 ->RegressionTreeLeave(
id = 176 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *280 ->RegressionTreeLeave(
id = 177 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = 111.287989999999937 ;
weighted_targets_sum = 0.741919933333333392 ;
weighted_squared_targets_sum = 82.566778121600592 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *281 ->RegressionTreeLeave(
id = 178 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 8 ;
weights_sum = 0.0533333333333333368 ;
targets_sum = 916.458299999999895 ;
weighted_targets_sum = 6.10972200000000054 ;
weighted_squared_targets_sum = 700.711280249848187 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *278   )
;
left_leave = *270  ;
right_node = *282 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *283 ->RegressionTreeLeave(
id = 67 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = 266.836029999999994 ;
weighted_targets_sum = 1.77890686666666675 ;
weighted_squared_targets_sum = 237.625192179936676 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *283  ;
leave_output = 2 [ 133.418014999999997 1 ] ;
leave_error = 3 [ 0.573938318800659264 0 0.0266666666666666684 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = 4.0628700000000002 ;
after_split_error = 0 ;
missing_node = *0 ;
missing_leave = *284 ->RegressionTreeLeave(
id = 122 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *285 ->RegressionTreeLeave(
id = 123 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 138.057269999999988 ;
weighted_targets_sum = 0.920381800000000028 ;
weighted_squared_targets_sum = 127.06539866568599 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *286 ->RegressionTreeLeave(
id = 124 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 128.778760000000005 ;
weighted_targets_sum = 0.858525066666666725 ;
weighted_squared_targets_sum = 110.559793514250686 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *283   )
;
left_leave = *267  ;
right_node = *287 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *288 ->RegressionTreeLeave(
id = 25 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 7 ;
weights_sum = 0.0466666666666666688 ;
targets_sum = 999.027489999999943 ;
weighted_targets_sum = 6.66018326666666649 ;
weighted_squared_targets_sum = 954.244406490626147 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *288  ;
leave_output = 2 [ 142.718212857142845 1 ] ;
leave_error = 3 [ 7.42990674182374722 0 0.0933333333333333376 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = 0.852400000000000047 ;
after_split_error = 0.383762277940444818 ;
missing_node = *0 ;
missing_leave = *289 ->RegressionTreeLeave(
id = 68 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *290 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *291 ->RegressionTreeLeave(
id = 69 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = 398.055919999999958 ;
weighted_targets_sum = 2.65370613333333338 ;
weighted_squared_targets_sum = 352.214078048060003 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *291  ;
leave_output = 2 [ 132.685306666666662 1 ] ;
leave_error = 3 [ 0.212531887024959398 0 0.0400000000000000008 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = 0.0478799999999999781 ;
after_split_error = 0.0504540736027003778 ;
missing_node = *0 ;
missing_leave = *292 ->RegressionTreeLeave(
id = 137 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *293 ->RegressionTreeLeave(
id = 138 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = 129.886429999999962 ;
weighted_targets_sum = 0.865909533333333203 ;
weighted_squared_targets_sum = 112.469897987632677 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *294 ->RegressionTreeLeave(
id = 139 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = 268.169489999999996 ;
weighted_targets_sum = 1.78779660000000007 ;
weighted_squared_targets_sum = 239.74418006042734 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *291  ;
right_node = *295 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *296 ->RegressionTreeLeave(
id = 70 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 4 ;
weights_sum = 0.0266666666666666684 ;
targets_sum = 600.971569999999929 ;
weighted_targets_sum = 4.006477133333334 ;
weighted_squared_targets_sum = 602.030328442565974 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *296  ;
leave_output = 2 [ 150.242892500000011 1 ] ;
leave_error = 3 [ 0.171230390915363406 0 0.0533333333333333368 ] ;
split_col = 3 ;
split_balance = 2 ;
split_feature_value = 1.30223500000000003 ;
after_split_error = 0.0180043344344157363 ;
missing_node = *0 ;
missing_leave = *297 ->RegressionTreeLeave(
id = 140 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *298 ->RegressionTreeLeave(
id = 141 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666536 ;
targets_sum = 153.178699999999935 ;
weighted_targets_sum = 1.02119133333333378 ;
weighted_squared_targets_sum = 156.424760891266658 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *299 ->RegressionTreeLeave(
id = 142 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = 447.792869999999994 ;
weighted_targets_sum = 2.98528580000000021 ;
weighted_squared_targets_sum = 445.605567551299316 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *296   )
;
right_leave = *288   )
;
left_leave = *264  ;
right_node = *300 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *301 ->RegressionTreeLeave(
id = 16 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 11 ;
weights_sum = 0.0733333333333333337 ;
targets_sum = 2091.17280000000028 ;
weighted_targets_sum = 13.9411520000000007 ;
weighted_squared_targets_sum = 2735.86926264016302 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *301  ;
leave_output = 2 [ 190.106618181818192 1 ] ;
leave_error = 3 [ 171.12800472294353 0 0.146666666666666667 ] ;
split_col = 2 ;
split_balance = 9 ;
split_feature_value = 24.753779999999999 ;
after_split_error = 32.3542885699819749 ;
missing_node = *0 ;
missing_leave = *302 ->RegressionTreeLeave(
id = 26 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *303 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *304 ->RegressionTreeLeave(
id = 27 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 10 ;
weights_sum = 0.0666666666666666657 ;
targets_sum = 1803.79416999999989 ;
weighted_targets_sum = 12.0252944666666668 ;
weighted_squared_targets_sum = 2185.29274943564997 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *304  ;
leave_output = 2 [ 180.379417000000018 1 ] ;
leave_error = 3 [ 32.3542885699819749 0 0.133333333333333331 ] ;
split_col = 1 ;
split_balance = 4 ;
split_feature_value = 1.77604000000000006 ;
after_split_error = 6.9334155021134114 ;
missing_node = *0 ;
missing_leave = *305 ->RegressionTreeLeave(
id = 47 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *306 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *307 ->RegressionTreeLeave(
id = 48 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 7 ;
weights_sum = 0.0466666666666666688 ;
targets_sum = 1199.38043000000016 ;
weighted_targets_sum = 7.99586953333333383 ;
weighted_squared_targets_sum = 1372.27835111403033 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *307  ;
leave_output = 2 [ 171.340061428571431 1 ] ;
leave_error = 3 [ 4.53114819570822469 0 0.0933333333333333376 ] ;
split_col = 1 ;
split_balance = 3 ;
split_feature_value = 1.58981499999999998 ;
after_split_error = 2.24276698607739045 ;
missing_node = *0 ;
missing_leave = *308 ->RegressionTreeLeave(
id = 89 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *309 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *310 ->RegressionTreeLeave(
id = 90 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = 327.021780000000035 ;
weighted_targets_sum = 2.18014520000000012 ;
weighted_squared_targets_sum = 357.150820013889415 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *310  ;
leave_output = 2 [ 163.510889999999989 1 ] ;
leave_error = 3 [ 1.34667606532281203 0 0.0266666666666666684 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = 2.63016499999999986 ;
after_split_error = 0 ;
missing_node = *0 ;
missing_leave = *311 ->RegressionTreeLeave(
id = 209 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *312 ->RegressionTreeLeave(
id = 210 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 156.404530000000022 ;
weighted_targets_sum = 1.04269686666666672 ;
weighted_squared_targets_sum = 163.082513363472628 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *313 ->RegressionTreeLeave(
id = 211 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 170.617250000000013 ;
weighted_targets_sum = 1.13744833333333339 ;
weighted_squared_targets_sum = 194.06830665041673 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *310  ;
right_node = *314 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *315 ->RegressionTreeLeave(
id = 91 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 5 ;
weights_sum = 0.0333333333333333329 ;
targets_sum = 872.358650000000011 ;
weighted_targets_sum = 5.81572433333333372 ;
weighted_squared_targets_sum = 1015.12753110014091 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *315  ;
leave_output = 2 [ 174.471730000000008 1 ] ;
leave_error = 3 [ 0.896090920754980758 0 0.0666666666666666657 ] ;
split_col = 2 ;
split_balance = 3 ;
split_feature_value = 20.3570750000000018 ;
after_split_error = 0.551595038088242617 ;
missing_node = *0 ;
missing_leave = *316 ->RegressionTreeLeave(
id = 212 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *317 ->RegressionTreeLeave(
id = 213 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666189 ;
targets_sum = 170.817769999999967 ;
weighted_targets_sum = 1.13878513333333364 ;
weighted_squared_targets_sum = 194.524736985152657 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *318 ->RegressionTreeLeave(
id = 214 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 4 ;
weights_sum = 0.0266666666666666684 ;
targets_sum = 701.540880000000016 ;
weighted_targets_sum = 4.67693920000000052 ;
weighted_squared_targets_sum = 820.602794114988228 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *315   )
;
left_leave = *307  ;
right_node = *319 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *320 ->RegressionTreeLeave(
id = 49 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 3 ;
weights_sum = 0.0200000000000000004 ;
targets_sum = 604.413739999999962 ;
weighted_targets_sum = 4.02942493333333385 ;
weighted_squared_targets_sum = 813.014398321619979 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *320  ;
leave_output = 2 [ 201.471246666666701 1 ] ;
leave_error = 3 [ 2.40226730640564057 0 0.0400000000000000008 ] ;
split_col = 3 ;
split_balance = 1 ;
split_feature_value = 1.45652000000000004 ;
after_split_error = 0.166055228482390183 ;
missing_node = *0 ;
missing_leave = *321 ->RegressionTreeLeave(
id = 92 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *322 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *323 ->RegressionTreeLeave(
id = 93 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 212.045299999999997 ;
weighted_targets_sum = 1.41363533333333335 ;
weighted_squared_targets_sum = 299.754728347266678 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *323  ;
leave_output = 2 [ 212.045299999999997 1 ] ;
leave_error = 3 [ 0 0 0 ] ;
split_col = -1 ;
split_balance = 2147483647 ;
split_feature_value = 1.79769313486231571e+308 ;
after_split_error = 1.79769313486231571e+308 ;
missing_node = *0 ;
missing_leave = *324 ->RegressionTreeLeave(
id = 221 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *325 ->RegressionTreeLeave(
id = 222 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *326 ->RegressionTreeLeave(
id = 223 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
left_leave = *323  ;
right_node = *327 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *328 ->RegressionTreeLeave(
id = 94 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 2 ;
weights_sum = 0.0133333333333333342 ;
targets_sum = 392.368439999999964 ;
weighted_targets_sum = 2.61578960000000027 ;
weighted_squared_targets_sum = 513.259669974353301 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *328  ;
leave_output = 2 [ 196.18422000000001 1 ] ;
leave_error = 3 [ 0.166055228482390183 0 0.0266666666666666684 ] ;
split_col = 3 ;
split_balance = 0 ;
split_feature_value = 2.6831649999999998 ;
after_split_error = 0 ;
missing_node = *0 ;
missing_leave = *329 ->RegressionTreeLeave(
id = 224 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *330 ->RegressionTreeLeave(
id = 225 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 193.688809999999961 ;
weighted_targets_sum = 1.29125873333333341 ;
weighted_squared_targets_sum = 250.102367461440622 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *331 ->RegressionTreeLeave(
id = 226 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 198.679630000000003 ;
weighted_targets_sum = 1.32453086666666686 ;
weighted_squared_targets_sum = 263.157302512912679 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *328   )
;
right_leave = *320   )
;
left_leave = *304  ;
right_node = *332 ->RegressionTreeNode(
missing_is_valid = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
leave_template = *333 ->RegressionTreeLeave(
id = 28 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 1 ;
weights_sum = 0.00666666666666666709 ;
targets_sum = 287.378629999999987 ;
weighted_targets_sum = 1.91585753333333342 ;
weighted_squared_targets_sum = 550.576513204512594 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
train_set = *8  ;
leave = *333  ;
leave_output = 2 [ 287.378629999999987 1 ] ;
leave_error = 3 [ 0 0 0 ] ;
split_col = -1 ;
split_balance = 2147483647 ;
split_feature_value = 1.79769313486231571e+308 ;
after_split_error = 1.79769313486231571e+308 ;
missing_node = *0 ;
missing_leave = *334 ->RegressionTreeLeave(
id = 50 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
left_node = *0 ;
left_leave = *335 ->RegressionTreeLeave(
id = 51 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
;
right_node = *0 ;
right_leave = *336 ->RegressionTreeLeave(
id = 52 ;
missing_leave = 0 ;
loss_function_weight = 1 ;
verbosity = 2 ;
train_set = *8  ;
length = 0 ;
weights_sum = 0 ;
targets_sum = 0 ;
weighted_targets_sum = 0 ;
weighted_squared_targets_sum = 0 ;
loss_function_factor = 2 ;
output = []
;
error = []
 )
 )
;
right_leave = *333   )
;
right_leave = *301   )
;
right_leave = *261   )
;
right_leave = *181   )
;
priority_queue = *337 ->RegressionTreeQueue(
verbosity = 2 ;
maximum_number_of_nodes = 50 ;
next_available_node = 35 ;
nodes = 50 [ *85  *90  *157  *242  *205  *197  *309  *144  *170  *130  *104  *277  *192  *48  *213  *314  *69  *282  *109  *149  *290  *218  *175  *237  *117  *250  *255  *125  *53  *295  *229  *327  *80  *27  *64  *0 *0 *0 *0 *0 *0 *0 *0 *0 *0 *0 *0 *0 *0 *0 ]  )
;
first_leave = *13  ;
first_leave_output = 2 [ 16.0069061333332954 1 ] ;
first_leave_error = 3 [ 17733.6216534378291 0 2.00000000000000488 ] ;
split_cols = 40 [ 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 3 2 3 3 3 3 3 1 3 3 1 2 3 3 3 3 1 3 1 3 3 1 3 3 ] ;
random_gen = *0 ;
seed = 1827 ;
stage = 41 ;
n_examples = 150 ;
inputsize = 4 ;
targetsize = 1 ;
weightsize = 0 ;
forget_when_training_set_changes = 1 ;
nstages = 41 ;
report_progress = 1 ;
verbosity = 2 ;
nservers = 0 ;
save_trainingset_prefix = "" ;
test_minibatch_size = 1 ;
use_a_separate_random_generator_for_testing = 1827  )
;
perf_evaluators = {};
report_stats = 1 ;
save_initial_tester = 0 ;
save_stat_collectors = 1 ;
save_learners = 0 ;
save_initial_learners = 0 ;
save_data_sets = 0 ;
save_test_outputs = 0 ;
call_forget_in_run = 1 ;
save_test_costs = 0 ;
save_test_names = 0 ;
provide_learner_expdir = 1 ;
should_train = 1 ;
should_test = 1 ;
template_stats_collector = *0 ;
global_template_stats_collector = *0 ;
final_commands = []
;
save_test_confidence = 0 ;
enforce_clean_expdir = 1  )
;
option_fields = 1 [ "nstages" ] ;
dont_restart_upon_change = 1 [ "nstages" ] ;
strategy = 1 [ *338 ->HyperOptimize(
which_cost = "E[test2.E[mse]]" ;
min_n_trials = 0 ;
oracle = *339 ->EarlyStoppingOracle(
option = "nstages" ;
values = []
;
range = 3 [ 1 61 20 ] ;
min_value = -3.40282000000000014e+38 ;
max_value = 3.40282000000000014e+38 ;
max_degradation = 3.40282000000000014e+38 ;
relative_max_degradation = -1 ;
min_improvement = -3.40282000000000014e+38 ;
relative_min_improvement = -1 ;
max_degraded_steps = 120 ;
min_n_steps = 2  )
;
provide_tester_expdir = 1 ;
sub_strategy = []
;
rerun_after_sub = 0 ;
provide_sub_expdir = 1 ;
save_best_learner = 0 ;
splitter = *0  )
] ;
provide_strategy_expdir = 1 ;
save_final_learner = 0 ;
learner = *6  ;
provide_learner_expdir = 1 ;
expdir_append = "" ;
forward_nstages = 0 ;
random_gen = *0 ;
stage = 1 ;
n_examples = 200 ;
inputsize = 4 ;
targetsize = 1 ;
weightsize = 0 ;
forget_when_training_set_changes = 0 ;
nstages = 1 ;
report_progress = 1 ;
verbosity = 2 ;
nservers = 0 ;
save_trainingset_prefix = "" ;
test_minibatch_size = 1 ;
use_a_separate_random_generator_for_testing = 1827  )
