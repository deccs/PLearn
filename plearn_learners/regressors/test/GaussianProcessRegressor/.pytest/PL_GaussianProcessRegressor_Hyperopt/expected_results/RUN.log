Type !? to get some help.
!R 0 
!R 0 
!R 0 
!R 1 GaussianProcessRegressor(
kernel = *1 ->SummationKernel(
terms = 2 [ *2 ->RationalQuadraticARDKernel(
isp_alpha = 14.8530952689689837 ;
isp_signal_sigma = 29.6219285851744907 ;
isp_global_sigma = 0 ;
isp_input_sigma = 1 [ 22.2544311480311059 ] ;
kronecker_indexes = []
;
cache_threshold = 1000000 ;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 1 ;
data_inputsize = 1 ;
n_examples = 5  )
*3 ->IIDNoiseKernel(
isp_noise_sigma = -1.86446658043304136 ;
isp_kronecker_sigma = -100 ;
kronecker_indexes = []
;
cache_threshold = 1000000 ;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 1 ;
data_inputsize = 1 ;
n_examples = 5  )
] ;
input_indexes = []
;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 0 ;
data_inputsize = 1 ;
n_examples = 5  )
;
weight_decay = 0 ;
include_bias = 1 ;
compute_confidence = 1 ;
confidence_epsilon = 1.00000000000000002e-08 ;
hyperparameters = 3 [ ("terms[0].isp_signal_sigma" , "0.0" )("terms[0].isp_alpha" , "0.0" )("terms[1].isp_noise_sigma" , "0.0" )] ;
ARD_hyperprefix_initval = ("terms[0].isp_input_sigma" , "0.0" );
optimizer = *4 ->ConjGradientOptimizer(
verbosity = 1 ;
expected_red = 1 ;
no_negative_gamma = 1 ;
sigma = 0.100000000000000006 ;
rho = 0.0500000000000000028 ;
constrain_limit = 0.100000000000000006 ;
max_extrapolate = 3 ;
max_eval_per_line_search = 20 ;
slope_ratio = 10 ;
minibatch_n_samples = 0 ;
minibatch_n_line_searches = 3 ;
nstages = 1 ;
early_stop = 0  )
;
save_gram_matrix = 0 ;
solution_algorithm = "exact" ;
active_set_indices = []
;
alpha = 5  1  [ 
-1.11770047923155547 	
-1.44398600678466971 	
2.34477475107078348 	
0.359163702825774089 	
-0.273169390819025082 	
]
;
gram_inverse = 5  5  [ 
2.17384303478444618 	-0.0428570226814908445 	-2.24278913014357606 	0.211187944940308625 	-0.0160008498417097828 	
-0.0428570226814906294 	2.63229682411057064 	-2.36514023143184327 	-0.310986674734060831 	0.0223156036847275939 	
-2.24278913014357606 	-2.36514023143184327 	4.57667695944806141 	0.0265284039045036689 	-8.51433617209678838e-05 	
0.211187944940308597 	-0.310986674734060831 	0.0265284039045036689 	0.113894354038077864 	-0.0105928862092774176 	
-0.0160008498417097828 	0.0223156036847275904 	-8.51433617209677347e-05 	-0.0105928862092774159 	0.0346336314422349412 	
]
;
subgram_inverse = 0  0  [ 
]
;
target_mean = 1 [ 10 ] ;
training_inputs = 5  1  [ 
5 	
6 	
5.5 	
10 	
20 	
]
;
expdir = "" ;
random_gen = *0 ;
seed = 1827 ;
stage = 10 ;
n_examples = 5 ;
inputsize = 1 ;
targetsize = 1 ;
weightsize = 0 ;
forget_when_training_set_changes = 0 ;
nstages = 10 ;
report_progress = 1 ;
verbosity = 1 ;
nservers = 0 ;
save_trainingset_prefix = "" ;
test_minibatch_size = 1 ;
use_a_separate_random_generator_for_testing = 1827 ;
finalized = 0  )

!R 1 1 [ 14.9482509617831152 ] 
!R 1 1 [ 14.444695835622035 ] 
!R 2 4  1  [ 
13.4992090127023872 	
14.4141233331845555 	
14.9482509617831152 	
14.444695835622035 	
]
1 [ 4  4  [ 
0.510839430955278506 	0.283483493901130146 	0.0642765859007319307 	-0.555619592268506324 	
0.283483493901130146 	0.39189685516754752 	0.1038829738530751 	-0.369897017889378787 	
0.064276585900728378 	0.1038829738530751 	0.285799680593760874 	0.185897571277269691 	
-0.555619592268506324 	-0.369897017889378787 	0.185897571277269691 	2.23845483387388011 	
]
] 
