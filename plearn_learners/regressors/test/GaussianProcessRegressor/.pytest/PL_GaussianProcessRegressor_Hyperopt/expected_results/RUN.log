Type !? to get some help.
!R 0 
!R 0 
!R 0 
!R 1 GaussianProcessRegressor(
kernel = *1 ->SummationKernel(
terms = 2 [ *2 ->RationalQuadraticARDKernel(
isp_alpha = 14.853095269456114 ;
isp_signal_sigma = 29.6219285853971783 ;
isp_global_sigma = 0 ;
isp_input_sigma = 1 [ 22.2544311476688854 ] ;
kronecker_indexes = []
;
cache_threshold = 1000000 ;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 1 ;
data_inputsize = 1 ;
n_examples = 5  )
*3 ->IIDNoiseKernel(
isp_noise_sigma = -1.86446658051810465 ;
isp_kronecker_sigma = 100 ;
kronecker_indexes = []
;
cache_threshold = 1000000 ;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 1 ;
data_inputsize = 1 ;
n_examples = 5  )
] ;
input_indexes = []
;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 0 ;
data_inputsize = 1 ;
n_examples = 5  )
;
weight_decay = 0 ;
include_bias = 1 ;
compute_confidence = 1 ;
confidence_epsilon = 1.00000000000000002e-08 ;
hyperparameters = 3 [ ("terms[0].isp_signal_sigma" , "0.0" )("terms[0].isp_alpha" , "0.0" )("terms[1].isp_noise_sigma" , "0.0" )] ;
ARD_hyperprefix_initval = ("terms[0].isp_input_sigma" , "0.0" );
optimizer = *4 ->ConjGradientOptimizer(
verbosity = 1 ;
expected_red = 1 ;
no_negative_gamma = 1 ;
sigma = 0.100000000000000006 ;
rho = 0.0500000000000000028 ;
constrain_limit = 0.100000000000000006 ;
max_extrapolate = 3 ;
max_eval_per_line_search = 20 ;
slope_ratio = 10 ;
minibatch_n_samples = 0 ;
minibatch_n_line_searches = 3 ;
nstages = 1  )
;
save_gram_matrix = 0 ;
alpha = 5  1  [ 
-1.11770047932178263 	
-1.44398600688429668 	
2.34477475126346269 	
0.359163702821040154 	
-0.273169390815487967 	
]
;
gram_inverse = 5  5  [ 
2.17384303487071584 	-0.0428570225967640356 	-2.24278913031203198 	0.211187944939461469 	-0.0160008498413865587 	
-0.0428570225967640217 	2.63229682422365707 	-2.36514023162738685 	-0.310986674737835034 	0.0223156036844845661 	
-2.24278913031203198 	-2.3651402316273864 	4.57667695980610389 	0.0265284039100822065 	-8.51433620477555936e-05 	
0.211187944939461497 	-0.310986674737834978 	0.0265284039100822031 	0.113894354037312281 	-0.0105928862088902134 	
-0.0160008498413865621 	0.0223156036844845695 	-8.51433620477557969e-05 	-0.0105928862088902134 	0.0346336314419248142 	
]
;
target_mean = 1 [ 10 ] ;
training_inputs = *5 ->MemoryVMatrix(
data = 5  1  [ 
5 	
6 	
5.5 	
10 	
20 	
]
;
source = *0 ;
fieldnames = []
;
writable = 0 ;
length = 5 ;
width = 1 ;
inputsize = 1 ;
targetsize = 0 ;
weightsize = 0 ;
extrasize = 0 ;
metadatadir = ""  )
;
seed = 1827 ;
stage = 10 ;
n_examples = 5 ;
inputsize = 1 ;
targetsize = 1 ;
weightsize = 0 ;
forget_when_training_set_changes = 0 ;
nstages = 10 ;
report_progress = 1 ;
verbosity = 1 ;
nservers = 0 ;
save_trainingset_prefix = ""  )

!R 1 1 [ 14.9482509617879042 ] 
!R 1 1 [ 14.4446958356286146 ] 
!R 2 4  1  [ 
13.4992090127011366 	
14.414123333186323 	
14.9482509617879042 	
14.4446958356286146 	
]
1 [ 4  4  [ 
0.36675739311799932 	0.283483493893399441 	0.064276585894635474 	-0.555619592274418039 	
0.283483493893395888 	0.247814817331955928 	0.103882973844278581 	-0.369897017903692671 	
0.0642765858946248159 	0.103882973844275028 	0.141717642754883022 	0.185897571263485162 	
-0.555619592274439356 	-0.369897017903710434 	0.185897571263470951 	2.0943727960689591 	
]
] 
