Type !? to get some help.
!R 0 
!R 0 
!R 0 
!R 1 GaussianProcessRegressor(
kernel = *1 ->SummationKernel(
terms = 2 [ *2 ->RationalQuadraticARDKernel(
isp_alpha = 14.8530952695687528 ;
isp_signal_sigma = 29.6219285855842109 ;
isp_global_sigma = 0 ;
isp_input_sigma = 1 [ 22.2544311479547581 ] ;
kronecker_indexes = []
;
cache_threshold = 1000000 ;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 1 ;
data_inputsize = 1 ;
n_examples = 5  )
*3 ->IIDNoiseKernel(
isp_noise_sigma = -1.86446658049196934 ;
isp_kronecker_sigma = -100 ;
kronecker_indexes = []
;
cache_threshold = 1000000 ;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 1 ;
data_inputsize = 1 ;
n_examples = 5  )
] ;
input_indexes = []
;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 0 ;
data_inputsize = 1 ;
n_examples = 5  )
;
weight_decay = 0 ;
include_bias = 1 ;
compute_confidence = 1 ;
confidence_epsilon = 1.00000000000000002e-08 ;
hyperparameters = 3 [ ("terms[0].isp_signal_sigma" , "0.0" )("terms[0].isp_alpha" , "0.0" )("terms[1].isp_noise_sigma" , "0.0" )] ;
ARD_hyperprefix_initval = ("terms[0].isp_input_sigma" , "0.0" );
optimizer = *4 ->ConjGradientOptimizer(
verbosity = 1 ;
expected_red = 1 ;
no_negative_gamma = 1 ;
sigma = 0.100000000000000006 ;
rho = 0.0500000000000000028 ;
constrain_limit = 0.100000000000000006 ;
max_extrapolate = 3 ;
max_eval_per_line_search = 20 ;
slope_ratio = 10 ;
minibatch_n_samples = 0 ;
minibatch_n_line_searches = 3 ;
nstages = 1  )
;
save_gram_matrix = 0 ;
alpha = 5  1  [ 
-1.11770047929104055 	
-1.44398600685698719 	
2.34477475120374246 	
0.35916370282251725 	
-0.273169390814979818 	
]
;
gram_inverse = 5  5  [ 
2.17384303484850605 	-0.0428570226279049171 	-2.24278913026098703 	0.211187944941121059 	-0.0160008498417494489 	
-0.0428570226279050698 	2.63229682419555111 	-2.36514023156742859 	-0.310986674738180424 	0.0223156036848867825 	
-2.24278913026098703 	-2.36514023156742859 	4.57667695969712351 	0.0265284039081269407 	-8.51433619161135006e-05 	
0.211187944941121086 	-0.31098667473818048 	0.0265284039081269442 	0.113894354037727866 	-0.0105928862091330695 	
-0.0160008498417494489 	0.0223156036848867825 	-8.51433619161134599e-05 	-0.0105928862091330678 	0.0346336314417550195 	
]
;
target_mean = 1 [ 10 ] ;
training_inputs = 5  1  [ 
5 	
6 	
5.5 	
10 	
20 	
]
;
random_gen = *0 ;
seed = 1827 ;
stage = 10 ;
n_examples = 5 ;
inputsize = 1 ;
targetsize = 1 ;
weightsize = 0 ;
forget_when_training_set_changes = 0 ;
nstages = 10 ;
report_progress = 1 ;
verbosity = 1 ;
nservers = 0 ;
save_trainingset_prefix = "" ;
test_minibatch_size = 1 ;
use_a_separate_random_generator_for_testing = 1827  )

!R 1 1 [ 14.9482509617864245 ] 
!R 1 1 [ 14.4446958356311814 ] 
!R 2 4  1  [ 
13.4992090127012432 	
14.4141233331850245 	
14.9482509617864245 	
14.4446958356311814 	
]
1 [ 4  4  [ 
0.510839430938520356 	0.283483493894024718 	0.0642765858965077541 	-0.555619592268588036 	
0.283483493894031824 	0.391896855152693624 	0.103882973846950222 	-0.369897017895095104 	
0.064276585896521965 	0.103882973846953774 	0.285799680578093407 	0.185897571267990003 	
-0.555619592268573825 	-0.369897017895084446 	0.185897571267993555 	2.23845483386523281 	
]
] 
