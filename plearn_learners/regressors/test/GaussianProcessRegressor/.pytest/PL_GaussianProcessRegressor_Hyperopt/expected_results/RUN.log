Type !? to get some help.
!R 0 
!R 0 
!R 0 
!R 1 GaussianProcessRegressor(
kernel = *1 ->SummationKernel(
terms = 2 [ *2 ->RationalQuadraticARDKernel(
isp_alpha = 14.8530952695504261 ;
isp_signal_sigma = 29.6219285856411894 ;
isp_global_sigma = 0 ;
isp_input_sigma = 1 [ 22.2544311482102088 ] ;
kronecker_indexes = []
;
cache_threshold = 1000000 ;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 1 ;
data_inputsize = 1 ;
n_examples = 5  )
*3 ->IIDNoiseKernel(
isp_noise_sigma = -1.86446658047284264 ;
isp_kronecker_sigma = -100 ;
kronecker_indexes = []
;
cache_threshold = 1000000 ;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 1 ;
data_inputsize = 1 ;
n_examples = 5  )
] ;
input_indexes = []
;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 0 ;
data_inputsize = 1 ;
n_examples = 5  )
;
weight_decay = 0 ;
include_bias = 1 ;
compute_confidence = 1 ;
confidence_epsilon = 1.00000000000000002e-08 ;
hyperparameters = 3 [ ("terms[0].isp_signal_sigma" , "0.0" )("terms[0].isp_alpha" , "0.0" )("terms[1].isp_noise_sigma" , "0.0" )] ;
ARD_hyperprefix_initval = ("terms[0].isp_input_sigma" , "0.0" );
optimizer = *4 ->ConjGradientOptimizer(
verbosity = 1 ;
expected_red = 1 ;
no_negative_gamma = 1 ;
sigma = 0.100000000000000006 ;
rho = 0.0500000000000000028 ;
constrain_limit = 0.100000000000000006 ;
max_extrapolate = 3 ;
max_eval_per_line_search = 20 ;
slope_ratio = 10 ;
minibatch_n_samples = 0 ;
minibatch_n_line_searches = 3 ;
nstages = 1 ;
early_stop = 0  )
;
save_gram_matrix = 0 ;
alpha = 5  1  [ 
-1.11770047926741944 	
-1.44398600683733602 	
2.34477475115816247 	
0.359163702825210596 	
-0.273169390815579172 	
]
;
gram_inverse = 5  5  [ 
2.1738430348361808 	-0.0428570226562168741 	-2.24278913022280779 	0.21118794494333884 	-0.016000849842130186 	
-0.0428570226562171239 	2.63229682417954214 	-2.36514023152167674 	-0.310986674739582525 	0.0223156036853270311 	
-2.24278913022280779 	-2.3651402315216763 	4.57667695961490306 	0.0265284039064695096 	-8.51433617983321869e-05 	
0.211187944943338812 	-0.310986674739582469 	0.0265284039064695096 	0.113894354038512086 	-0.0105928862093947491 	
-0.0160008498421301826 	0.0223156036853270276 	-8.51433617983319294e-05 	-0.0105928862093947491 	0.0346336314417334534 	
]
;
target_mean = 1 [ 10 ] ;
training_inputs = 5  1  [ 
5 	
6 	
5.5 	
10 	
20 	
]
;
expdir = "" ;
random_gen = *0 ;
seed = 1827 ;
stage = 10 ;
n_examples = 5 ;
inputsize = 1 ;
targetsize = 1 ;
weightsize = 0 ;
forget_when_training_set_changes = 0 ;
nstages = 10 ;
report_progress = 1 ;
verbosity = 1 ;
nservers = 0 ;
save_trainingset_prefix = "" ;
test_minibatch_size = 1 ;
use_a_separate_random_generator_for_testing = 1827 ;
finalized = 0  )

!R 1 1 [ 14.9482509617851225 ] 
!R 1 1 [ 14.4446958356332527 ] 
!R 2 4  1  [ 
13.4992090127014244 	
14.4141233331841647 	
14.9482509617851225 	
14.4446958356332527 	
]
1 [ 4  4  [ 
0.510839430940516981 	0.283483493893925242 	0.0642765858976659388 	-0.555619592261329842 	
0.283483493893680105 	0.391896855155454082 	0.103882973848694604 	-0.369897017886295032 	
0.0642765858979466032 	0.10388297384912093 	0.285799680582960625 	0.185897571271347317 	
-0.555619592261404449 	-0.369897017886252399 	0.185897571271155471 	2.23845483384018262 	
]
] 
