PTester(
expdir = "PYTEST__PL_kernel_ridge_hyper_regressor__RESULTS:expdir/" ;
dataset = *1 ->AutoVMatrix(
filename = "PLEARNDIR:examples/data/test_suite/sin_signcos_1x_2y.amat" ;
load_in_memory = 0 ;
writable = 0 ;
length = 300 ;
width = 3 ;
inputsize = 1 ;
targetsize = 2 ;
weightsize = 0 ;
extrasize = 0 ;
metadatadir = "PLEARNDIR:examples/data/test_suite/sin_signcos_1x_2y.amat.metadata/"  )
;
splitter = *2 ->FractionSplitter(
round_to_closest = 0 ;
splits = 1  3  [ 
(0 , 0.75 )	(0.75 , 1 )	(0 , 1 )	
]
 )
;
statnames = 2 [ "E[test1.E[mse]]" "E[test2.E[mse]]" ] ;
statmask = TVec(0 0 *0 )
;
learner = *3 ->HyperLearner(
tester = *4 ->PTester(
expdir = "" ;
dataset = *0 ;
splitter = *0 ;
statnames = 2 [ "E[test.E[mse]]" "E[train.E[mse]]" ] ;
statmask = TVec(0 0 *0 )
;
learner = *5 ->KernelRidgeRegressor(
kernel = *6 ->GaussianKernel(
sigma = 1 ;
scale_by_sigma = 0 ;
is_symmetric = 1 ;
report_progress = 0 ;
specify_dataset = *0 ;
cache_gram_matrix = 0 ;
data_inputsize = -1 ;
n_examples = -1  )
;
weight_decay = 0 ;
include_bias = 1 ;
params = 0  0  [ 
]
;
training_inputs = *0 ;
expdir = "" ;
seed = -1 ;
stage = 0 ;
n_examples = -1 ;
inputsize = -1 ;
targetsize = -1 ;
weightsize = -1 ;
forget_when_training_set_changes = 0 ;
nstages = 1 ;
report_progress = 1 ;
verbosity = 1 ;
nservers = 0 ;
save_trainingset_prefix = ""  )
;
perf_evaluators = {};
report_stats = 1 ;
save_initial_tester = 1 ;
save_stat_collectors = 1 ;
save_learners = 1 ;
save_initial_learners = 0 ;
save_data_sets = 0 ;
save_test_outputs = 0 ;
call_forget_in_run = 1 ;
save_test_costs = 0 ;
provide_learner_expdir = 1 ;
train = 1 ;
template_stats_collector = *0 ;
global_template_stats_collector = *0 ;
final_commands = TVec(0 0 *0 )
;
save_test_confidence = 0  )
;
option_fields = 2 [ "weight_decay" "kernel.sigma" ] ;
dont_restart_upon_change = TVec(0 0 *0 )
;
strategy = 2 [ *7 ->HyperOptimize(
which_cost = 0 ;
min_n_trials = 0 ;
oracle = *8 ->CartesianProductOracle(
option_names = 2 [ "weight_decay" "kernel.sigma" ] ;
option_values = 2 [ 5 [ "1e-8" "1e-6" "1e-4" "1e-2" "1e0" ] 5 [ "1e-2" "1e-1" "1e0" "1e1" "1e2" ] ]  )
;
provide_tester_expdir = 0 ;
sub_strategy = TVec(0 0 *0 )
;
rerun_after_sub = 0 ;
provide_sub_expdir = 1 ;
splitter = *9 ->KFoldSplitter(
K = 10 ;
append_train = 0 ;
append_non_constant_test = 0 ;
include_test_in_train = 0 ;
cross_range = (0 , 1 ) )
 )
*10 ->HyperRetrain(
splitter = *11 ->FractionSplitter(
round_to_closest = 0 ;
splits = 1  1  [ 
(0 , 1 )	
]
 )
;
provide_tester_expdir = 0  )
] ;
provide_strategy_expdir = 1 ;
save_final_learner = 1 ;
learner = *5  ;
provide_learner_expdir = 1 ;
expdir_append = "" ;
expdir = "" ;
stage = 0 ;
n_examples = -1 ;
inputsize = -1 ;
targetsize = -1 ;
weightsize = -1 ;
forget_when_training_set_changes = 0 ;
nstages = 1 ;
report_progress = 1 ;
verbosity = 1 ;
nservers = 0 ;
save_trainingset_prefix = ""  )
;
perf_evaluators = {};
report_stats = 1 ;
save_initial_tester = 1 ;
save_stat_collectors = 1 ;
save_learners = 1 ;
save_initial_learners = 0 ;
save_data_sets = 0 ;
save_test_outputs = 1 ;
call_forget_in_run = 1 ;
save_test_costs = 1 ;
provide_learner_expdir = 1 ;
train = 1 ;
template_stats_collector = *0 ;
global_template_stats_collector = *0 ;
final_commands = TVec(0 0 *0 )
;
save_test_confidence = 0  )
