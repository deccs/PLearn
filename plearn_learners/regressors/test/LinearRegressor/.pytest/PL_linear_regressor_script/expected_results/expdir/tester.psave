PTester(
expdir = "PYTEST__PL_linear_regressor_script__RESULTS:expdir/" ;
dataset = *1 ->AutoVMatrix(
filename = "PLEARNDIR:examples/data/test_suite/linear_2x_2y.amat" ;
load_in_memory = 0 ;
writable = 0 ;
length = 200 ;
width = 4 ;
inputsize = 2 ;
targetsize = 2 ;
weightsize = 0 ;
extrasize = 0 ;
metadatadir = "PLEARNDIR:examples/data/test_suite/linear_2x_2y.amat.metadata/"  )
;
splitter = *2 ->FractionSplitter(
round_to_closest = 0 ;
splits = 1  2  [ 
(0 , 0.75 )	(0.75 , 1 )	
]
 )
;
statnames = 8 [ "E[train.E[mse]]" "E[train.E[aic]]" "E[train.E[bic]]" "E[train.E[mabic]]" "E[test.E[mse]]" "E[test.E[aic]]" "E[test.E[bic]]" "E[test.E[mabic]]" ] ;
statmask = []
;
learner = *3 ->LinearRegressor(
include_bias = 1 ;
cholesky = 1 ;
weight_decay = 0 ;
output_learned_weights = 0 ;
weights = 0  0  [ 
]
;
AIC = nan ;
BIC = nan ;
resid_variance = []
;
stage = 0 ;
n_examples = -1 ;
inputsize = -1 ;
targetsize = -1 ;
weightsize = -1 ;
forget_when_training_set_changes = 0 ;
nstages = 1 ;
report_progress = 1 ;
verbosity = 1 ;
nservers = 0 ;
save_trainingset_prefix = "" ;
test_minibatch_size = 1 ;
use_a_separate_random_generator_for_testing = 1827  )
;
perf_evaluators = {};
report_stats = 1 ;
save_initial_tester = 1 ;
save_stat_collectors = 1 ;
save_learners = 1 ;
save_initial_learners = 0 ;
save_data_sets = 0 ;
save_test_outputs = 1 ;
call_forget_in_run = 1 ;
save_test_costs = 1 ;
provide_learner_expdir = 1 ;
should_train = 1 ;
should_test = 1 ;
template_stats_collector = *0 ;
global_template_stats_collector = *0 ;
final_commands = []
;
save_test_confidence = 1 ;
enforce_clean_expdir = 1  )
