# Network architecture consisting in two RBMs stacked together, followed by an
# affine transformation for classification.

$DEFINE{expdir}{expdir-tester}
$EVALUATE{expdir}

$DEFINE{rbm_size_1}{10}
$DEFINE{rbm_size_2}{100}

$DEFINE{inputsize}{5}
$DEFINE{targetsize}{1}
$DEFINE{n_classes}{2}

PTester( 
    expdir = "${expdir}"
    learner =
        ModuleLearner(
            module =
                NetworkModule(

                    modules = [
                        RBMModule(
                            name = "rbm_1"
                            visible_layer =
                                RBMBinomialLayer(
                                    size = ${inputsize}
                                )
                            hidden_layer =
                                RBMBinomialLayer(
                                    size = ${rbm_size_1}
                                )
                            connection =
                                RBMMatrixConnection(
                                    down_size = ${inputsize}
                                    up_size = ${rbm_size_1}
                                )
                            grad_learning_rate = ${grad_lr}
                            cd_learning_rate = ${cd_lr}
                        )

                        RBMModule(
                            name = "rbm_2"
                            visible_layer =
                                RBMBinomialLayer(
                                    size = ${rbm_size_1}
                                )
                            hidden_layer =
                                RBMBinomialLayer(
                                    size = ${rbm_size_2}
                                )
                            connection =
                                RBMMatrixConnection(
                                    down_size = ${rbm_size_1}
                                    up_size = ${rbm_size_2}
                                )
                            grad_learning_rate = ${grad_lr}
                            cd_learning_rate = ${cd_lr}
                        )

                        GradNNetLayerModule( 
                            name = "affine_net"
                            input_size = ${rbm_size_2}
                            output_size = ${n_classes}
                            start_learning_rate = ${grad_lr}
                        )

                        SoftmaxModule(
                            name = "softmax"
                            input_size = ${n_classes}
                            output_size = ${n_classes}
                        )

                        CombiningCostsModule( 
                            name = "costs"
                            cost_weights = [1 0]
                            sub_costs = [

                                NLLCostModule( 
                                    name = "nll"
                                    input_size = ${n_classes}
                                )

                                ClassErrorCostModule(
                                    name = "class_error"
                                    input_size = ${n_classes}
                                )

                            ]
                        )

                        ArgmaxModule(
                            name = "argmax_class"
                        )

                        SquaredErrorCostModule(
                            name = "mse"
                            input_size = 1 # The predicted class index.
                        )

                    ]

                    connections = [
                        NetworkConnection( 
                            source = "rbm_1.hidden.state"
                            destination = "rbm_2.visible"
                        )

                        NetworkConnection( 
                            source = "rbm_2.hidden.state"
                            destination = "affine_net.input"
                        )
                       
                        NetworkConnection( 
                            source = "affine_net.output"
                            destination = "softmax.input"
                        )

                        NetworkConnection( 
                            source = "softmax.output"
                            destination = "costs.prediction"
                        )

                        NetworkConnection( 
                            source = "affine_net.output"
                            destination = "argmax_class.input"
                            propagate_gradient = 0
                        )

                        NetworkConnection( 
                            source = "argmax_class.output"
                            destination = "mse.prediction"
                            propagate_gradient = 0
                        )
                    ]

                    ports = [
                        "input"     "rbm_1.visible"
                        "target_1"  "costs.target"
                        "target_2"  "mse.target"
                        "output"    "affine_net.output"
                        "cost_1"    "costs.cost"
                        "cost_2"    "mse.cost"
                    ]
                )

                cost_ports = [ "cost_1" "cost_2" ]
                target_ports = [ "target_1" "target_2" ]

                batch_size = ${batch_size}
                nstages = ${nstages}
        )

    report_stats = 1
    save_initial_tester = 0
    save_learners = 1
    save_stat_collectors = 0
    save_test_outputs = 0
    splitter =
        ExplicitSplitter( 
            splitsets = 1  2  [ 
                *4374-> AutoVMatrix(
                    filename = "PLEARNDIR:examples/data/test_suite/linear_4x_2y_binary_class.vmat"
                    inputsize = ${inputsize}
                    targetsize = ${targetsize}
                    weightsize = 0
                )
                *4374
            ]
        );
    statnames = [
        "E[test1.E[NLL]]"
        "E[test1.E[class_error]]"
        "E[test1.E[mse]]"
    ]

)
