*1 ->ModuleLearner(
module = *2 ->NetworkModule(
modules = 2 [ *3 ->GradNNetLayerModule(
start_learning_rate = 9.99999999999999955e-07 ;
decrease_constant = 0 ;
init_weights = 0  0  [ 
]
;
init_bias = []
;
init_weights_random_scale = 1 ;
L1_penalty_factor = 0 ;
L2_penalty_factor = 0 ;
weights = 1  3  [ 
-0.242348941691123809 	0.208358973108872414 	0.486403264194497642 	
]
;
bias = 1 [ 0.0148056958818535648 ] ;
input_size = 3 ;
output_size = 1 ;
name = "affine_net" ;
estimate_simpler_diag_hessian = 0 ;
expdir = "" ;
random_gen = *4 ->PRandom(
seed = 1827 ;
fixed_seed = 0  )
 )
*5 ->SquaredErrorCostModule(
target_size = 1 ;
input_size = 1 ;
output_size = 1 ;
name = "mse" ;
estimate_simpler_diag_hessian = 0 ;
expdir = "" ;
random_gen = *4   )
] ;
connections = 1 [ *6 ->NetworkConnection(
source = "affine_net.output" ;
destination = "mse.prediction" ;
propagate_gradient = 1  )
] ;
ports = 4 [ ("input" , "affine_net.input" )("target" , "mse.target" )("output" , "affine_net.output" )("mse" , "mse.cost" )] ;
save_states = 1 ;
name = "NetworkModule" ;
estimate_simpler_diag_hessian = 0 ;
expdir = "" ;
random_gen = *4   )
;
batch_size = 1 ;
cost_ports = 1 [ "mse" ] ;
input_ports = 1 [ "input" ] ;
target_ports = 1 [ "target" ] ;
weight_ports = []
;
mbatch_size = 1 ;
seed = 1827 ;
stage = 1000 ;
n_examples = 200 ;
inputsize = 3 ;
targetsize = 1 ;
weightsize = 0 ;
forget_when_training_set_changes = 0 ;
nstages = 1000 ;
report_progress = 1 ;
verbosity = 1 ;
nservers = 0 ;
save_trainingset_prefix = "" ;
test_minibatch_size = 1000 ;
use_a_separate_random_generator_for_testing = 1  )
