*12 -> PTester(
    dataset = *1 -> MemoryVMatrix(
        data = 2 3 [
                1,
                0,
                0,
                0,
                1,
                1
                ],
        inputsize = 2,
        targetsize = 1,
        weightsize = 0
        ),
    expdir = "expdir",
    learner = *10 -> HyperLearner(
        dont_restart_upon_change = [ "nstages" ],
        learner = *5 -> DeepBeliefNet(
            cd_learning_rate = 0.01,
            connections = [
                *2 -> RBMMatrixConnection(
                    down_size = 2,
                    up_size = 2
                    )
                ],
            forget_when_training_set_changes = 0,
            grad_learning_rate = 0.1,
            layers = [
                *3 -> RBMBinomialLayer( size = 2 ),
                *4 -> RBMBinomialLayer( size = 2 )
                ],
            n_classes = 2,
            nstages = 0,
            report_progress = 1,
            training_schedule = [
                20,
                10
                ],
            use_classification_cost = 1
            ),
        option_fields = [ "nstages" ],
        provide_strategy_expdir = 1,
        report_progress = 1,
        strategy = [
            *7 -> HyperOptimize(
                oracle = *6 -> EarlyStoppingOracle(
                    max_degraded_steps = 31,
                    option = "nstages",
                    range = [
                        0,
                        31,
                        2
                        ]
                    ),
                which_cost = 2
                )
            ],
        tester = *9 -> PTester(
            save_initial_tester = 1,
            save_test_costs = 1,
            save_test_outputs = 1,
            splitter = *8 -> FractionSplitter(
                splits = 1 2 [
                        (0, 1),
                        (0, 1)
                        ]
                ),
            statnames = [
                "E[train.E[NLL]]",
                "E[train.E[class_error]]",
                "E[test.E[NLL]]",
                "E[test.E[class_error]]"
                ]
            )
        ),
    provide_learner_expdir = 1,
    save_initial_tester = 1,
    save_learners = 1,
    save_test_costs = 1,
    save_test_outputs = 1,
    splitter = *11 -> NoSplitSplitter( ),
    statnames = [
        "E[train.E[E[train.E[NLL]]]]",
        "E[train.E[E[train.E[class_error]]]]",
        "E[train.E[E[test.E[NLL]]]]",
        "E[train.E[E[test.E[class_error]]]]"
        ]
    )
