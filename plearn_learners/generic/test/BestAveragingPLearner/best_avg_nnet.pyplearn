## Exercices the BestAveragingPLearner with simple NNets

filename = "PLEARNDIR:examples/data/test_suite/linear_4x_2y.pmat"

def buildOptimizer():
    return pl.ConjGradientOptimizer(nstages     = 1,
                                    sigma       = 0.1,
                                    rho         = 0.05,
                                    slope_ratio = 10,
                                    verbosity   = 100)

def buildNNet():
    return pl.NNet(
        nhidden                 = 4,
        noutputs                = -1,
        weight_decay            = 1e-6,
        bias_decay              = 0,
        penalty_type            = "L2_square",
        direct_in_to_out        = 0,
        output_transfer_func    = "none",
        hidden_transfer_func    = "tanh",
        cost_funcs              = [ "mse" ],
        optimizer               = buildOptimizer(),
        batch_size              = 0,      # Batch optimization, put 1 for stochastic
        initialization_method   = "uniform_linear",
        nstages                 = 101,
        report_progress         = 1,
        verbosity               = 1)

def buildBestAvg():
    return pl.BestAveragingPLearner(
        learner_template     = buildNNet(),
        initial_seed         = 1827,    # RIP, LvB
        total_learner_num    = 5,
        best_learner_num     = 3,
        comparison_statspec  = "E[mse]",
        verbosity            = 1 )

def buildTester():
    return pl.PTester(
        expdir                 = plargs.expdir,
        dataset                = pl.AutoVMatrix(filename=filename,
                                                inputsize=3, targetsize=2),
        splitter               = pl.TrainTestSplitter(test_fraction=0.25),
        statnames              = [ "E[test.E[mse]]"           ,
                                   "E[train.E[learner0_mse]]" ,
                                   "E[train.E[learner1_mse]]" ,
                                   "E[train.E[learner2_mse]]" ,
                                   "E[train.E[learner3_mse]]" ,
                                   "E[train.E[learner4_mse]]" ],
        learner                = buildBestAvg(),
        report_stats           = 1 ,
        save_initial_tester    = 0 ,
        save_stat_collectors   = 1 ,
        save_learners          = 1 ,
        save_initial_learners  = 1 ,
        save_data_sets         = 0 ,
        save_test_outputs      = 1 ,
        call_forget_in_run     = 0 ,
        save_test_costs        = 1 ,
        provide_learner_expdir = 1 ,
        train                  = 1 ,
        save_test_confidence   = 0 ,
        enforce_clean_expdir   = 0 )

def main():
    return buildTester()
