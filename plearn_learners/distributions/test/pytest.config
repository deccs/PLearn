"""Pytest config file.

Test is a class regrouping the elements that define a test for PyTest.
    
    @ivar name: The name of the Test must uniquely determine the
    test. Among others, it will be used to identify the test's results
    ( pytest/*_results/I{name}/ ) and to report test informations.
    @type name: String
    
    @ivar description: The description must provide other users an
    insight of what exactly is the Test testing. You are encouraged
    to used triple quoted strings for indented multi-lines
    descriptions.
    @type description: String
    
    @ivar program: The program to be run by the Test. The L{Program}
    class currently has four subclasses: L{LocalProgram},
    L{GlobalProgram}, L{LocalCompilableProgram} and
    L{GlobalCompilableProgram}. The I{Local} prefix specifies that the
    program executable should be found in the same directory than the
    I{pytest.config} file, while I{Global} means that the program is a
    global command. Currently, this mechanism only support commands that
    are in one of the <plearn_branch>/commands/ directory.
    
    The I{Compilable} tag specifies that the program must be compiled.
    The default compiler is L{pymake}, but this behaviour can be changed
    and/or compile options may be specified.
    
    @type program: L{Program}
    
    @ivar arguments: The command line arguments to be passed to the program
    for the test to proceed.
    @type arguments: String
    
    @ivar resources: A list of resources that are used by your program either
    in the command line or directly in the code (plearn or pyplearn files, databases, ...).
    The elements of the list must be string representations of the path, absolute or relative,
    to the resource.
    @type resources: List of Strings
    
    @ivar precision: The precision (absolute and relative) used when comparing
    floating numbers in the test output (default = 1e-6)
    @type precision: Float
    
"""
Test(
    name = "PL_GaussianDistribution",
    description = "Test single Gaussian",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "gaussian_distribution.pyplearn",
    resources = [ "gaussian_distribution.pyplearn" ],
    precision = 1e-06,
    disabled = False
    )

Test(
    name = "PL_GaussMix",
    description = "Test mixtures of Gaussians",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "gaussmix.pyplearn",
    resources = [ "gaussmix.pyplearn" ],
    precision = 1e-06,
    disabled = True
    )

Test(
    name = "PL_GaussMix_Spherical",
    description = "Test training of mixtures of Gaussians of spherical type",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "gaussmix_spherical.pyplearn",
    resources = [ "gaussmix_spherical.pyplearn" ],
    precision = 1e-06,
    disabled = False
    )

Test(
    name = "PL_GaussMix_Spherical_Missing",
    description = "Test training of mixtures of Gaussians of spherical type with missing values",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "gaussmix_spherical_missing.pyplearn",
    resources = [ "gaussmix_spherical_missing.pyplearn" ],
    precision = 1e-06,
    disabled = False
    )

Test(
    name = "PL_GaussMix_Diagonal",
    description = "Test training of mixtures of Gaussians of diagonal type",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "gaussmix_diagonal.pyplearn",
    resources = [ "gaussmix_diagonal.pyplearn" ],
    precision = 1e-06,
    disabled = False
    )

Test(
    name = "PL_GaussMix_Diagonal_Missing",
    description = "Test training of mixtures of Gaussians of diagonal type with missing values",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "gaussmix_diagonal_missing.pyplearn",
    resources = [ "gaussmix_diagonal_missing.pyplearn" ],
    precision = 1e-06,
    disabled = False
    )

Test(
    name = "PL_GaussMix_General",
    description = "Test training of mixtures of Gaussians of general type",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "gaussmix_general.pyplearn",
    resources = [ "gaussmix_general.pyplearn" ],
    precision = 1e-06,
    disabled = False
    )

Test(
    name = "PL_GaussMix_General_Missing",
    description = "Test training of mixtures of Gaussians of general type with missing values",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "gaussmix_general_missing.pyplearn",
    resources = [ "gaussmix_general_missing.pyplearn" ],
    precision = 1e-06,
    disabled = False
    )

Test(
    name = "PL_GaussMix_Generate",
    description = "Test data generation from mixtures of Gaussians",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "vmat convert gaussian_mixtures_generate.pymat gaussian_mixtures_generate.pmat",
    resources = [ "gaussian_mixtures_generate.pymat" ],
    precision = 1e-06,
    disabled = False
    )

Test(
    name = "PL_ManifoldParzen2",
    description = "Test Manifold Parzen",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "manifold_parzen2.pyplearn",
    resources = [ "manifold_parzen2.pyplearn" ],
    precision = 1e-06,
    disabled = True
    )

Test(
    name = "PL_ParzenWindow",
    description = "Test Parzen Window",
    program = GlobalCompilableProgram(
        name = "plearn_tests",
        compiler = "pymake",
        compile_options = ""
        ),
    arguments = "parzen_window.pyplearn",
    resources = [ "parzen_window.pyplearn" ],
    precision = 1e-06,
    disabled = False
    )
