# Generate data from Gaussian mixtures.
# Also test the 'expecation' method.

from numarray        import array
from plearn.pyplearn import pl

def spherical(n_input):
    return pl.GaussMix(
            L = 4,
            type = "spherical",
            kmeans_iterations = 5,
            alpha = [ 0.1, 0.3, 0.2, 0.4 ],
            sigma = [ 0.3, 1, 0.5, 2 ],
            center = array([ [ 10, 0, 0 ], [ 10, 10, 10 ], [ 0, 10, 0 ], [ 0, 0, 0 ] ]),
            outputs_def = "l",
            n_input = n_input,
            n_target = 3 - n_input,
            input_part = [ 0 ],
            seed = 123456,
            stage = 1,
            inputsize = 3,
            targetsize = 0,
            weightsize = 0,
            report_progress = 1,
            verbosity = 1
    )

def generate_vmat(mixture, n_samples):

    generated_data = pl.VMatrixFromDistribution(
            distr = mixture,
            mode = "sample",
            generator_seed = 123456,
            nsamples = n_samples)

    mixture.outputs_def = "e"
    expectation = pl.PLearnerOutputVMatrix(
            data = pl.MemoryVMatrix(
                data = array([ [ 0, 0, 0] ]),
                inputsize = 3,
                targetsize = 0,
                weightsize = 0),
            learners = [ mixture ]
            )
    return pl.ConcatRowsVMatrix( array = [ generated_data, expectation ] )

def main():
    return pl.ConcatRowsVMatrix(
            fill_missing = 1,
            array = [
                generate_vmat(spherical(0), 20),
                generate_vmat(spherical(1), 20)
            ]
           )

