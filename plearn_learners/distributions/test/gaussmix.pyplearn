# Train some mixtures of Gaussians.

from plearn.pyplearn import pl

def main():
    gaussmix = []    # Array containing the GaussMix objects.
    # Values of options tested.
    l_L = [ 1, 5 ]
    l_type = [ "spherical", "diagonal", "general" ]
    l_n_eigen = [ -1, 2 ]
    l_kmeans_iterations = [ 5 ]
    l_conditional_flags = [ [ ], [ 2, 2, 1, 1 ], [ 1, 1, 2, 0 ] ]
    l_seed = [ 123456 ]
    l_nstages = [ 10 ]

    for L in l_L:
        for type in l_type:
            for n_eigen in l_n_eigen:
                for kmeans_iterations in l_kmeans_iterations:
                    for conditional_flags in l_conditional_flags:
                        for seed in l_seed:
                            for nstages in l_nstages:
                                gaussmix.append(
                                    pl.GaussMix(
                                        L                 = L,
                                        type              = type,
                                        n_eigen           = n_eigen,
                                        kmeans_iterations = kmeans_iterations,
                                        conditional_flags = conditional_flags,
                                        seed              = seed,
                                        nstages           = nstages,
                                        training_time     = -1,
                                        conditional_updating_time = -1
                                    )
                                )



    ptesters = []
    for gm in gaussmix:
        # Create the appropriate PTester.
        concat_flags = ""
        for flag in gm.conditional_flags:
            concat_flags += str(flag)
        ptesters.append(
            pl.PTester(
                expdir = "expdir_%s_%s_%s_%s_%s_%s_%s" \
                        % ( gm.L, gm.type, gm.n_eigen, gm.kmeans_iterations, concat_flags, gm.seed, gm.nstages ),
                        dataset = pl.AutoVMatrix(specification = "PLEARNDIR:examples/data/test_suite/linear_2x_2y.amat"),
                splitter = pl.TrainTestSplitter( test_fraction = 0.25, append_train = True ),
                statnames = [ "E[test1.E[NLL]]", "E[test2.E[NLL]]" ],
                learner = gm,
                save_initial_tester = 0,
                save_test_outputs = 0,
                provide_learner_expdir = 1
            )
        )

    return \
        pl.RunObject(
            objects     = ptesters,
            run_objects = True
        )

