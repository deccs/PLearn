# Test the 'general' type of Gaussian mixture.

from plearn.pyplearn import pl

def main():
    distr = []    # Array containing the distribution objects.
    # Values of options tested.
    l_L = [ 1, 5 ]
    l_type = [ "general" ]
    l_n_eigen = [ -1, 2 ]
    l_kmeans_iterations = [ 5 ]
    l_predictor_size = [ 0, 2 ]
    l_seed = [ 123456 ]
    l_nstages = [ 10 ]

    for L in l_L:
        for type in l_type:
            for n_eigen in l_n_eigen:
                for kmeans_iterations in l_kmeans_iterations:
                    for predictor_size in l_predictor_size:
                        for seed in l_seed:
                            for nstages in l_nstages:
                                distr.append(
                                        pl.GaussMix(
                                            L                 = L,
                                            type              = type,
                                            n_eigen           = n_eigen,
                                            kmeans_iterations = kmeans_iterations,
                                            predictor_size           = predictor_size,
                                            seed              = seed,
                                            nstages           = nstages
                                            )
                                        )

    ptesters = []
    for gm in distr:
        # Create a PTester object for each mixture to train.
        dataset = pl.AutoVMatrix(specification = "PLEARNDIR:plearn_learners/regressors/test/LinearRegressor/data.amat")
        ptesters.append(
            pl.PTester(
                expdir = "expdir_%s_%s_%s_%s_%s_%s_%s" \
                        % ( gm.L, gm.type, gm.n_eigen, gm.kmeans_iterations, gm.predictor_size, gm.seed, gm.nstages ),
                dataset = dataset,
                splitter = pl.TrainTestSplitter( test_fraction = 0.25 ),
                #                statnames = [ "E[test1.E[NLL]]", "E[test2.E[NLL]]" ],
                learner = gm,
                report_stats = 0,
                save_initial_tester = 0,
                save_stat_collectors = 0,
                save_test_outputs = 1,
                provide_learner_expdir = 0
            )
        )

    return \
        pl.RunObject(
            objects     = ptesters,
            run_objects = True
        )

