# Train ConditionalDensityNet

from plearn.pyplearn import pl

def main():
    distrib = []    # Array containing the PDistribution objects.
    # Values of options tested.
    l_nhidden = [ 5 ]
    l_nhidden2 = [ 5 ]
    l_weight_decay = [ 1e-3 ]
    l_start_learning_rate = [ 1e-3 ]
    l_decrease_constant = [ 1e-6 ]
    l_seed = [ 123456 ]
    l_nstages = [ 100 ]

    for nhidden in l_nhidden:
        for nhidden2 in l_nhidden2:
            for weight_decay in l_weight_decay:
                for start_learning_rate in l_start_learning_rate:
                    for decrease_constant in l_decrease_constant:
                        for seed in l_seed:
                            for nstages in l_nstages:
                                distrib.append(
                                    pl.ConditionalDensityNet(
                                        n_output_density_terms  = 4,
                                        nhidden                 = nhidden,
                                        nhidden2                = nhidden2,
                                        weight_decay            = weight_decay,
                                        seed                    = seed,
                                        nstages                 = nstages,
                                        optimizer = \
                                            pl.GradientOptimizer(
                                                start_learning_rate = start_learning_rate,
                                                decrease_constant   = decrease_constant
                                            )
                                    )
                                )

    ptesters = []
    for distr in distrib:
        # Create the appropriate PTester.
        ptesters.append(
            pl.PTester(
                expdir = "expdir_cond_density_net_nhidden=%s_nhidden2=%s_weight_decay=%s_start_learning_rate=%s_decrease_constant=%s_seed=%s_nstages=%s" \
                        % ( distr.nhidden, distr.nhidden2, distr.weight_decay, \
                            distr.optimizer.start_learning_rate, distr.optimizer.decrease_constant, distr.seed, distr.nstages ),
                dataset = \
                    pl.AutoVMatrix(
                        specification = "PLEARNDIR:plearn_learners/regressors/test/LinearRegressor/data.amat",
                        inputsize  = 2,
                        targetsize = 2,
                        weightsize = 0
                    ),
                splitter = pl.TrainTestSplitter( test_fraction = 0.25, append_train = True ),
                statnames = [ "E[test1.E[NLL]]", "E[test2.E[NLL]]" ],
                learner = distr,
                save_initial_tester = 0,
                save_test_outputs = 0,
                provide_learner_expdir = 1
            )
        )

    return \
        pl.RunObject(
            objects     = ptesters,
            run_objects = True
        )

