# Test the 'general' type of Gaussian mixture with missing values.

from plearn.pyplearn import pl

def main():
    distr = []    # Array containing the distribution objects.
    # Values of options tested.
    l_L = [ 1, 5 ]
    l_type = [ "general" ]
    l_n_eigen = [ -1, 2 ]
    l_kmeans_iterations = [ 5 ]
    l_n_input = [ 0, 2 ]
    l_seed = [ 123456 ]
    l_nstages = [ 10 ]
    l_efficient_missing = [ 0, 1 ]
    l_impute_missing = [ 0, 1 ]

    for L in l_L:
        for type in l_type:
            for n_eigen in l_n_eigen:
                for kmeans_iterations in l_kmeans_iterations:
                    for predictor_size in l_n_input:
                        for seed in l_seed:
                            for nstages in l_nstages:
                                for efficient_missing in l_efficient_missing:
                                    for impute_missing in l_impute_missing:
                                        distr.append(
                                            pl.GaussMix(
                                                L                 = L,
                                                type              = type,
                                                n_eigen           = n_eigen,
                                                kmeans_iterations = kmeans_iterations,
                                                predictor_size    = predictor_size,
                                                seed              = seed,
                                                nstages           = nstages,
                                                efficient_missing = efficient_missing,
                                                impute_missing    = impute_missing
                                            )
                                        )

    ptesters = []
    for gm in distr:
        # Create a PTester object for each mixture to train.
        dataset = pl.LocallyPrecomputedVMatrix(
                local_dir = ".",
                sequential_access = False,
                source = pl.AddMissingVMatrix(
                    missing_prop = 0.5,
                    seed = 123456,
                    source = pl.AutoVMatrix(specification = "PLEARNDIR:examples/data/test_suite/linear_2x_2y.amat")
                )
        )

        ptesters.append(
            pl.PTester(
                expdir = "expdir_%s_%s_%s_%s_%s_%s_%s_%s_%s" \
                        % ( gm.L, gm.type, gm.n_eigen, gm.kmeans_iterations, \
                            gm.predictor_size, gm.seed, gm.nstages, \
                            gm.efficient_missing, gm.impute_missing),
                dataset = dataset,
                splitter = pl.TrainTestSplitter( test_fraction = 0.25 ),
                learner = gm,
                report_stats = 0,
                save_initial_tester = 0,
                save_stat_collectors = 0,
                save_test_outputs = 1,
                save_data_sets = 0,
                provide_learner_expdir = 0
            )
        )

    return \
        pl.RunObject(
            objects     = ptesters,
            run_objects = True
        )

