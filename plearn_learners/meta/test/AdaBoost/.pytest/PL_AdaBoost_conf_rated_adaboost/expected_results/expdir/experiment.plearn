*11 -> PTester(
    dataset = *1 -> AutoVMatrix( filename = "PLEARNDIR:examples/data/test_suite/linear_4x_2y_binary_class.vmat" ),
    expdir = "expdir",
    learner = *9 -> HyperLearner(
        dont_restart_upon_change = [ "nstages" ],
        forget_when_training_set_changes = 0,
        learner = *4 -> AdaBoost(
            compute_training_error = 1,
            conf_rated_adaboost = True,
            early_stopping = 1,
            expdir = "",
            forward_sub_learner_test_costs = 1,
            modif_train_set_weights = 0,
            nstages = 20,
            output_threshold = 0.5,
            provide_learner_expdir = 1,
            pseudo_loss_adaboost = False,
            report_progress = 0,
            save_often = 1,
            target_error = 0.5,
            test_minibatch_size = 1,
            verbosity = 1,
            weak_learner_template = *3 -> RegressionTree(
                complexity_penalty_factor = 0.0,
                compute_train_stats = 0,
                leave_template = *2 -> RegressionTreeLeave( ),
                loss_function_weight = 1,
                maximum_number_of_nodes = 5,
                missing_is_valid = 0,
                multiclass_outputs = [
                    0,
                    1
                    ],
                nstages = 5,
                report_progress = 0,
                verbosity = 2
                ),
            weight_by_resampling = 1
            ),
        nstages = 1,
        option_fields = [ "nstages" ],
        provide_learner_expdir = 1,
        provide_strategy_expdir = 1,
        report_progress = 1,
        save_final_learner = 0,
        strategy = [
            *6 -> HyperOptimize(
                oracle = *5 -> EarlyStoppingOracle(
                    max_degradation = 3.40282e+38,
                    max_degraded_steps = 120,
                    max_value = 3.40282e+38,
                    min_improvement = -3.40282e+38,
                    min_n_steps = 2,
                    min_value = -3.40282e+38,
                    option = "nstages",
                    range = [
                        1,
                        11,
                        2
                        ],
                    relative_max_degradation = -1,
                    relative_min_improvement = -1
                    ),
                provide_tester_expdir = 0,
                which_cost = "E[test2.E[class_error]]"
                )
            ],
        tester = *8 -> PTester(
            provide_learner_expdir = 1,
            report_stats = 1,
            save_data_sets = 0,
            save_initial_learners = 0,
            save_initial_tester = 0,
            save_learners = 0,
            save_test_confidence = 0,
            save_test_costs = 0,
            save_test_names = 0,
            save_test_outputs = 0,
            splitter = *7 -> FractionSplitter(
                splits = 1 3 [
                        (0, 0.75),
                        (0, 0.75),
                        (0.75, 1)
                        ]
                ),
            statnames = [
                "E[test1.E[binary_class_error]]",
                "E[test1.E[exp_neg_margin]]",
                "E[test1.E[class_error]]",
                "E[test2.E[binary_class_error]]",
                "E[test2.E[exp_neg_margin]]",
                "E[test2.E[class_error]]"
                ]
            ),
        verbosity = 1
        ),
    provide_learner_expdir = 1,
    save_learners = 1,
    save_split_stats = 0,
    save_test_confidence = 0,
    save_test_costs = 1,
    save_test_outputs = 1,
    splitter = *10 -> FractionSplitter(
        splits = 1 3 [
                (0, 1),
                (0, 0.75),
                (0.75, 1)
                ]
        ),
    statnames = [
        "E[test1.E[binary_class_error]]",
        "E[test1.E[exp_neg_margin]]",
        "E[test1.E[class_error]]",
        "E[test2.E[binary_class_error]]",
        "E[test2.E[exp_neg_margin]]",
        "E[test2.E[class_error]]"
        ]
    )
